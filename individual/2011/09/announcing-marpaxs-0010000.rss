<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Announcing Marpa::XS 0.010000</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2011/09/12#announcing-marpaxs-0010000</link>
    <description>&lt;p&gt;
Some time ago I released
&lt;a href=&quot;http://search.cpan.org/~jkegl/Marpa-XS-0.010000/&quot;&gt;
Marpa::XS 0.010000&lt;/a&gt;.
The core Marpa algorithm had already been converted to C,
speeding it up considerably.
Marpa::XS 0.010000 cleans up a lot of code left over from development,
further speeding things up.
&lt;/p&gt;
&lt;h1&gt;What is Marpa?&lt;/h1&gt;
&lt;p&gt;Marpa is an advance over recursive descent
and yacc.
I hope the Marpa algorithm
will become the standard parser for
problems too
big for regular expressions.
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Marpa parses, in linear time,  all
classes of grammar that are currently in practical use.
(&lt;a href=&quot;#NOTE1&quot;&gt;See Note 1&lt;/a&gt;).
&lt;/li&gt;
&lt;li&gt;The importance of parse-time debugging is often underestimated.
Marpa's parse-time error detection breaks new ground -- Marpa is
fully aware of exactly where in the parse it is at all times,
and of exactly what input it expects and why.
This means parse-time error detection, once a desperate last
resort, now can be used as
&lt;a href=&quot;http://blogs.perl.org/users/jeffrey_kegler/2010/06/parsing-with-ruby-slippers.html&quot;&gt;
a parsing technique in itself&lt;/a&gt;.

&lt;/li&gt;
&lt;li&gt;Marpa is a general BNF parser -- that means if you feed it anything
written in BNF, it &quot;just parses&quot; it.
This includes grammars which are left-recursive, right-recursive and
ambiguous -- even infinitely ambiguous.
&lt;/li&gt;
&lt;li&gt;Marpa never goes exponential -- worst case, even for highly ambiguous
grammars, is O(n**3), which is considered optimal
(&lt;a href=&quot;#NOTE2&quot;&gt;See Note 2&lt;/a&gt;).
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What is Next with Marpa?&lt;/h1&gt;
I had planned to skip this announcement and wait to announce
Marpa::XS 0.012000.
I expected
the release of Marpa::XS 0.012000
to be just days away.
And I did produce
&lt;a href=&quot;http://search.cpan.org/~jkegl/Marpa-XS-0.013_003/&quot;&gt;
its release candidate&lt;/a&gt;
almost immediately.
But in the meantime cpantesters was hit with a prolonged outage,
which continues as of this writing.
I've always waited for a few days of cpantesters results on
the release candidate before cutting an official release
and I hope cpantesters will be back online soon.</description>
  </item>
  </channel>
</rss>
