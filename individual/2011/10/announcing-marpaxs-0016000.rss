<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Announcing Marpa::XS 0.016000</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2011/10/14#announcing-marpaxs-0016000</link>
    <description>&lt;p&gt;
I released
&lt;a href=&quot;http://search.cpan.org/~jkegl/Marpa-XS-0.016000/&quot;&gt;
Marpa::XS 0.016000&lt;/a&gt;
a week ago and the
cpantesters results look excellent.
With this release, my conversion of Marpa from Perl to C
is finished.
A lot of Perl code remains, to be sure,
but all of it is code that
arguably belongs in some kind of
&lt;a href=&quot;#HLL&quot;&gt;higher-level language&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;
This release was checked 
for leaks and other memory issues.
The couple of issues that turned up were fixed.
&lt;/p&gt;
&lt;h1&gt;What is Marpa?&lt;/h1&gt;
&lt;p&gt;Marpa is an advance over recursive descent
and yacc.
I hope the Marpa algorithm
will become the standard parser for
problems too
big for regular expressions.
&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Marpa parses

&lt;a href=&quot;#LINEAR&quot;&gt;
in linear time&lt;/a&gt;,
all
classes of grammar that are currently in practical use.
&lt;/li&gt;
&lt;li&gt;The importance of parse-time debugging is often underestimated.
Marpa's parse-time error detection breaks new ground -- Marpa is
fully aware of exactly where in the parse it is at all times,
and of exactly what input it expects and why.
This means parse-time error detection, once a desperate last
resort, now can be used as
&lt;a href=&quot;http://blogs.perl.org/users/jeffrey_kegler/2010/06/parsing-with-ruby-slippers.html&quot;&gt;
a parsing technique in itself&lt;/a&gt;.

&lt;/li&gt;
&lt;li&gt;Marpa is a general BNF parser -- that means if you feed it anything
written in BNF, it &quot;just parses&quot; it.
This includes grammars which are left-recursive, right-recursive and
ambiguous -- even infinitely ambiguous.
&lt;/li&gt;
&lt;li&gt;Marpa never goes exponential -- worst case, even for highly ambiguous
grammars, is O(n**3), which is
&lt;a href=&quot;#OPTIMAL&quot;&gt;considered optimal&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;What is next with Marpa?&lt;/h1&gt;

&lt;p&gt;
At this point,
little remains to be done before a
a 1.000000 beta release of Marpa::XS.
Once Marpa::XS does go beta, I expect to be able to keep
its interface stable.
&lt;/p&gt;
&lt;p&gt;
Inside Marpa::XS,
the portions converted to C amount to
a complete, if low-level, parsing library.
The &lt;kbd&gt;libmarpa&lt;/kbd&gt; library
does not, however, have the documentation that you'd expect in
a library being released on its own.
&lt;/p&gt;
&lt;p&gt;
Also, frankly, before writing the documentation,
I need to redo the interface to &lt;kbd&gt;libmarpa&lt;/kbd&gt;.
As long as the interface to libmarpa was a strictly internal affair,
I didn't worry about it much --
I made the first cut at a design, and got it working.
I then looked at the result.
If the design was so awful that
it got in the way of features or was an efficiency issue,
I fixed it.
If ugliness or awkwardness was its main issue, I moved on.
With the first pass and a few trial applications behind me,
I now
know how the &lt;kbd&gt;libmarpa&lt;/kbd&gt; interface should look.
&lt;/p&gt;

&lt;p&gt;
Once I have &lt;kbd&gt;libmarpa&lt;/kbd&gt; finished and documented,
the next step will be Marpa::Thin.
These days a lot of people like to hack interfaces.
The Marpa project is about the parse engine -- when it
comes to interfaces, I want to put everyone else on a level
playing field with me, if not get out of the game altogether.
Marpa::Thin will be a &quot;thin&quot; Perl interface to &lt;kbd&gt;libmarpa&lt;/kbd&gt;.
&lt;/p&gt;
&lt;p&gt;
Currently, I plan to create a SWIG interface to &lt;kbd&gt;libmarpa&lt;/kbd&gt;,
which means that any environment that SWIG supports
(and there are a lot of them)
will have access to the low-level Perl library.
I have mixed feelings about Marpa leaving its Perl home,
but I think most Perlers share my belief --
we contribute to the Perl community,
not because it is a goal in itself,
but because it is the best way to
contribute to a larger community.
&lt;/p&gt;
&lt;h1&gt;Limitations and Comparisons&lt;/h1&gt;
&lt;p&gt;
Currently, the major limitation of Marpa::XS is
that it is alpha.
Development is well advanced, but the interface remains
subject to change.
For a comparison of Marpa to other parsers,
one which is careful to point out situations
where older parsing algorithms may still be superior,
see the
&quot;Limitations and Comparisons&quot; section

&lt;a href=&quot;http://blogs.perl.org/users/jeffrey_kegler/2011/08/announcing-marpaxs-080.html&quot;&gt;
in my announcement of Marpa::XS 0.008000&lt;/a&gt;.
&lt;/p&gt;&lt;h2&gt;Notes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a name=&quot;HLL&quot;&gt;&quot;higher-level language&quot;: &lt;/a&gt;
Of course, depending on the application, the ideal &quot;high-level language&quot;
may be C.
But I feel no real need to convert the code for the user interfaces
to C,
and the scripts for building and testing really should be in a
highly portable high-level language.
&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;LINEAR&quot;&gt;&quot;in linear time&quot;: &lt;/a&gt;
To be specific, Marpa parses any LR-regular grammar in linear time -- O(n).
LR-regular is a vast class of grammars that includes LALR,
LR(k) for all k,
and LL(k) for all k.
This means that Marpa parses,
in linear time,
every grammar parsed by yacc,
recursive descent and regular expressions.
&lt;/li&gt;
&lt;li&gt;&lt;a name=&quot;OPTIMAL&quot;&gt;&quot;considered optimal&quot;: &lt;/a&gt;
The phrase &quot;considered optimal&quot; elides some
irrelevant bits of theory.
It would be a bit of a
surprise if it is possible to
do general BNF parsing
in O(n), but nobody has proved that it can't be done.
The Valiant algorithm parses general BNF
and is O(n**2.376...) or better.
But Valiant's algorithm is only faster for huge problems,
and for those it
needs a machine with many terabytes of main memory
to deliver on its speed claims.
So it won't be competing with Marpa any time soon.

&lt;/p&gt;</description>
  </item>
  </channel>
</rss>
