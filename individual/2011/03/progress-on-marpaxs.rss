<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Progress on Marpa::XS</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2011/03/17#progress-on-marpaxs</link>
    <description>&lt;h1&gt;A Faster Marpa&lt;/h1&gt;
&lt;p&gt;I've been converting Marpa from Pure Perl to C.
For those who don't know,
&lt;a href=&quot;http://search.cpan.org/dist/Marpa/&quot;&gt;Marpa&lt;/a&gt;
is a parser generator
which parses any grammar you can write in BNF.
If the grammar is
&lt;a href=&quot;#NOTE1&quot;&gt;one of those which can be parsed
by yacc,
by recursive descent or as a regular expression&lt;/a&gt;,
Marpa parses it
&lt;a href=&quot;#NOTE2&quot;&gt;in linear time&lt;/a&gt;.
&lt;p&gt;Marpa's core algorithm does no system calls.
It is almost 100% pointer twiddling.
There is no floating point, and very little integer arithmetic.
It's as if it was made to order to show C in its very best light.
&lt;p&gt;I expected converting the Perl implementation
to C to improve speed by two orders of magnitude,
and first results are close -- the speedup for the code
converted to C is 95 to 1.
The code converted to C remains wrappered in Perl.
The Perl wrapper handles the I/O,
the user interface, and roughly the last third of the core algorithm.
This last part of the core algorithm I have yet to rewrite in C.
&lt;p&gt;The speedup for an actual application depends
on how much Perl &quot;wrappering&quot; the application layers on top of the Marpa parse engine.
But every test in the test suite is several times faster
for XS than for Pure Perl.
Ultimately, I will make Marpa's core algorithm available
as &lt;var&gt;libmarpa&lt;/var&gt;, a C library with a documented interface.
If you write a wrapper for &lt;var&gt;libmarpa&lt;/var&gt; in C,
you will be able to get the full speedup, which I expect
with a few more tweaks to be better than 100 to 1.
&lt;h1&gt;Looking Onward: An &quot;Official&quot; Alpha Release&lt;/h1&gt;
&lt;p&gt;At this moment,
Marpa::XS is available in developer's releases only.
I prefer that most users look at
&lt;a href=&quot;http://search.cpan.org/dist/Marpa/&quot;&gt;Marpa&lt;/a&gt; instead.
&lt;a href=&quot;http://search.cpan.org/dist/Marpa/&quot;&gt;Marpa&lt;/a&gt; is Pure Perl.
It is also alpha,
but it is stable at this point.
&lt;p&gt;But with this very measurable speedup,
Marpa::XS now offers added value over
&lt;a href=&quot;http://search.cpan.org/dist/Marpa/&quot;&gt;Marpa&lt;/a&gt;,
and I am turning to work on
an &quot;official alpha&quot; release of Marpa::XS.
Such a release would still not be suitable for use in production
situations, and its interface would be subject to change.
&lt;h1&gt;Notes&lt;/h1&gt;
&lt;p&gt;&lt;a name=&quot;NOTE1&quot;&gt;Note 1&lt;/a&gt;:
Technically, the grammars that Marpa parses in linear time are the
LR-regular grammars.
These include the LR(k) grammars and the LL(k) grammars, for all k.
&lt;p&gt;&lt;a name=&quot;NOTE2&quot;&gt;Note 2&lt;/a&gt;:
The claim of O(n) time complexity is for the underlying algorithm.
Actual implementations tend to pick those data structures
which are fastest in practice, instead of on paper.
Pure Perl implementations, of course,
must rely on the internal implementation
of Perl's native data structures.
&lt;p&gt;The relationship between theoretical time complexity
and actual implemented speed in our field is like that
between quantum mechanics and Newtonian mechanics in physics.
There are effects back and forth, and a realm
where each clearly rules.
There are also specialists in each,
who tend to avoid looking at the scales
where one set of rules ceases to apply
and the other kicks in.
&lt;p&gt;The relationship between
theoretical time complexity and actual implemented speed interests
me.
In Marpa's XS implementation, I have control of the data
structures, and I am using the implementation to work out
in detail
the proofs of time complexity for Earley's algorithm
and Leo's modification of it.
In the course of this I hope to make a full accounting of
any differences
between theoretical and implemented time complexity.</description>
  </item>
  </channel>
</rss>
