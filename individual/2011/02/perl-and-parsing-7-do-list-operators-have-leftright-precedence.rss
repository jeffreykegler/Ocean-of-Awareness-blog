<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Perl and Parsing 7: Do List Operators have Left/Right Precedence?</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2011/02/16#perl-and-parsing-7-do-list-operators-have-leftright-precedence</link>
    <description>&lt;h1&gt;Chiral Operators&lt;/h1&gt;
In actual usage,
the syntax of Perl's list operators is quite natural.
Descriptions of that syntax, however, tend to be awkward.
&lt;p&gt;The current practice is to describe this syntax in terms of &quot;left precedence&quot;
and &quot;right precedence&quot;.
In other words, list operators are said to be chiral.
I have
problems with the Chiral Interpretation of list operators.
The most serious of these: the Chiral Interpretation
does not actually account for the behavior
of expressions that contain list operators.
&lt;p&gt;In this post, I assume you have a working knowledge of one or more
list operators (examples are &lt;var&gt;join&lt;/var&gt; and &lt;var&gt;sort&lt;/var&gt;).
The most authoritative account of the Chiral Interpretation
is in
&lt;a href=&quot;http://perldoc.perl.org/perlop.html#Terms-and-List-Operators-(Leftward)&quot;&gt;the perlop man
page&lt;/a&gt;.
&lt;h1&gt;Our Example&lt;/h1&gt;
The rest of this post will use a single example:
&lt;pre&gt;
&lt;code class=&quot;prettyprint&quot;&gt;
sub f { say $_[0]; return $_[0]; }
say join ';', $a = f(1), $b = join ',', $c = f(2),
    $d = join '-', $e = f(3), $f = f(4);
&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;
Here's the output:
&lt;pre&gt;
&lt;code class=&quot;prettyprint&quot;&gt;
1
2
3
4
1;2,3-4
&lt;/code&gt;
&lt;/pre&gt;
&lt;h1&gt;What is Precedence?&lt;/h1&gt;
Precedence is a concept familiar from ordinary arithmetic.
In school we learned that, in the expression
&lt;pre&gt;
&lt;code class=&quot;prettyprint&quot;&gt;
   1+2*3+4

&lt;/code&gt;
&lt;/pre&gt;
the 2*3 should be multiplied out first to yield 6, before either of the
two additions are performed.
Multiplication has higher prececedence than addition.
&lt;p&gt;Precedence is a hierarchy.
There is an order, from high to low,
and each operator has a distinct place.
&lt;p&gt;Some cases are tricky.
The same symbol is often both a unary operator and a binary
operator.
It's very common for the ASCII hyphen-minus sign (&quot;-&quot;) to act as both a unary
negation operator, and as a binary subtraction operator.
The precedence of the unary operator can
be different from the precedence of the binary
operator,
and often is.
But while the unary and binary operators may share the
same symbol, they are considered to be distinct operators.
&lt;p&gt;If we accept that list operators have a left
and a right precedence,
as the &lt;var&gt;perlop&lt;/var&gt; man page does,
that would be an outright exception
to the hierarchical ordering of operators by precedence.
This points to a potential problem in defining left and right
precedence.
But that is not the most serious issue with the Chirality Interpretation.
So that I can go straight to my main point,
let's assume that there are
&lt;b&gt;no issues in defining left and right precedence&lt;/b&gt;.
For now,
let's just say that &quot;I can't tell you what the difference between left and
right precedence is, exactly, but I know it when I see it&quot;.
&lt;p&gt;Let's ask instead about the precedence of
&lt;b&gt;operators other than the list operators&lt;/b&gt;
in expressions which contain list operators.
&lt;h1&gt;Comma Operators versus Assignments&lt;/h1&gt;
&lt;p&gt;Look at the assignment and comma operators in the example above.
Ask this question:
Does the comma have a higher or
lower precedence than the assignment operator?
&lt;p&gt;According to the &lt;var&gt;perlop&lt;/var&gt; man page,
assignment has a higher precedence than
the comma operator.
But in the example above, this is &lt;b&gt;not&lt;/b&gt; always true.
Here are
values of the variables after
the example is executed:
&lt;pre&gt;
&lt;code class=&quot;prettyprint&quot;&gt;
$a=1
$b=2,3-4
$c=2
$d=3-4
$e=3
$f=4
&lt;/code&gt;
&lt;/pre&gt;
For the assignments to
&lt;var&gt;$a&lt;/var&gt;,
&lt;var&gt;$c&lt;/var&gt;,

&lt;var&gt;$e&lt;/var&gt;,
and &lt;var&gt;$f&lt;/var&gt;,
things are as &lt;var&gt;perlop&lt;/var&gt; says -- those assignment operators
have higher precedence than all the commas.
&lt;p&gt;But for the assigment operators in the assignments to
&lt;var&gt;$b&lt;/var&gt;,
and &lt;var&gt;$d&lt;/var&gt;,
things do &lt;b&gt;not&lt;/b&gt; behave as advertized.
True, those assignments still have higher precedence than the
commas to their left.
&lt;b&gt;But the assignment of $b
has lower precedence than the
commas to its right.&lt;/b&gt;
The same is true of the assignment to &lt;var&gt;$d&lt;/var&gt;.
&lt;h2&gt;Chirality is Contagious?&lt;/h2&gt;
&lt;p&gt;What seems to be happening
is that not only are list operators showing chirality,
but that chirality is spreading to other operators.
The &lt;var&gt;perlop&lt;/var&gt; man page does not really prepare us for
this.
&lt;h1&gt;The Grouping Operator Interpretation&lt;/h1&gt;
&lt;p&gt;Now let's add parentheses, so that they clarify the syntactic groupings
without changing them:
&lt;pre&gt;
&lt;code class=&quot;prettyprint&quot;&gt;
say join ';', $a = f(1), $b = (join ',', $c = f(2),
    $d = (join '-', $e = f(3), $f = f(4))); 
&lt;/code&gt;
&lt;/pre&gt;

With this the conceptual problems disappear.
Why?
Because parentheses are recognized as a &lt;b&gt;grouping operator&lt;/b&gt;.
That is, we know that, regardless of the precedence hierarchy among
operators,
operations inside parentheses will take precedence over operations
outside the parentheses.
Parentheses also have two different precedences, but they
are not chiral -- parentheses have an internal and an external precedence.
&lt;p&gt;The parentheses
suggest a better way to describe
Perl's list operators.
We can think of the list operators as a special kind of grouping operator.
&lt;ul&gt;
&lt;li&gt;Just as a grouping begins before a left parenthesis,
a grouping starts just before the list operator.
&lt;li&gt;Just as with parentheses, operations inside a grouping
take precedence over those outside.
&lt;li&gt;Unlike parentheses, the grouping begun by a list operator is
not closed explicitly.
The grouping started by a list operator ends just
before the next operator
which has a precedence lower than the internal precedence of the list operator.
&lt;li&gt;If, in an expression,
no operator after the list operator has lower precedence,
then the grouping ends at the end of the expression.
&lt;li&gt;The internal precedence of list operators is between the precedence
of the Perl comma operator and the precedence of Perl's logical &lt;var&gt;not&lt;/var&gt;
operator.
This is higher
than the internal precedence of parentheses.
In the current
&lt;var&gt;perlop&lt;/var&gt; man page this is said to be
the &quot;rightward
precedence&quot; of list operators.
&lt;li&gt;The external precedence of a list operator is the same
as the
precedence of a Perl term.
This is the same as the external precedence of parentheses.
In the current &lt;var&gt;perlop&lt;/var&gt; man page, this is said to be the &quot;leftward
precedence&quot; of list operators.
&lt;li&gt;List operators do not have chirality.
&lt;/ul&gt;
&lt;h1&gt;Other Problems with Chirality&lt;/h1&gt;
&lt;h2&gt;Operator Chirality is Hard to Define&lt;/h2&gt;
&lt;p&gt;Above, I deferred the question of how to define left
and right precedence.  Now I'll come back to it.
&lt;p&gt;Giving the same operator two different precedences violates
the textbook definition of precedence.
Precedence is a hierarchy.
Chiral operators break that hierarchy.
&lt;p&gt;
Consider an operator which is to the right of one list
operator, but to the left of another list operator.
How do you assign it a precedence?
&lt;p&gt;Grouping operators also break the hierarchy,
but they do it in a well-defined way.
You could modify the Chiral Interpretation so that it
is equally well-defined.
But I think, if you do so,
you'll find you've reinvented grouping.
&lt;h2&gt;Operator Chirality is Hard to Describe&lt;/h2&gt;
&lt;p&gt;Find a Perl book that describes list operator precedence.
There are several excellent ones, by experts.
Ask yourself:
If I were a newbie, and I carefully
studied these paragraphs,
would I know list operator syntax cold?
Or would there still be a lot of cases where
I was not sure?
The answer to this must be subjective,
but my own observation is that many a lucid account
of Perl bogs down when it is time to describe
the syntax of list operators.
&lt;h2&gt;Operator Chirality is not in the Textbooks&lt;/h2&gt;
&lt;p&gt;&quot;Left precedence&quot; and &quot;Right precedence&quot; certainly sound
like academic terms,
&lt;a href=&quot;#NOTE1&quot;&gt;but to my knowledge
they are nowhere in the
academic literature&lt;/a&gt;.
As far as I know, chiral operators are an
&quot;ad hoc&quot; explanation invented and used
exclusively in attempts to grapple with Perl's
list operators.
&lt;p&gt;Both
the Chiral Interpretation and the Grouping Interpretation involve giving the same
set of operators two different precedences.
The difference is that the behavior of grouping operators is well understood
and has been carefully documented in the academic literature.
&lt;p&gt;The Perl tradition is not to fret excessively about
theory.
But when the descriptive going gets tough,
it is nice to have theory to fall back on.
&lt;h1&gt;Notes&lt;/h1&gt;
&lt;a name=&quot;NOTE1&quot;&gt;Note 1&lt;/a&gt;:
The academic literature on parsing is large, and it is risky
to assert that something is not &quot;Out There&quot; somewhere.
But there's no sign of &quot;left precedence&quot;
and &quot;right precedence&quot; in
the very comprehensive
&lt;a href=&quot;ftp://ftp.cs.vu.nl/pub/dick/PTAPG_2nd_Edition/index.html&quot;&gt;
Grune &amp; Jacobs, Parsing Techniques: A Practical Guide - Second Edition&lt;/a&gt;.</description>
  </item>
  </channel>
</rss>
