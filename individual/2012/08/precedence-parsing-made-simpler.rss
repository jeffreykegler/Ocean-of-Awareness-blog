<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Precedence parsing made simpler</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/08/22#precedence-parsing-made-simpler</link>
    <description>&lt;p&gt;This post describes a new approach to precedence parsing,
one that makes it simpler and
more flexible.
Many programmers find precedence
is an intuitive way to
look at problems.
The traditional rules of arithmetic
are a familiar example:
&lt;tt&gt;&lt;pre&gt;
E ::= ( E )
E ::= n
E ::= E * E
E ::= E + E
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
Here, as in the rest of this post,
the rules are ranked from tightest (&quot;highest&quot;) precedence
to loosest (&quot;lowest&quot;).
The order in the above display indicates that multiplication
takes precedence over addition, and parentheses take precedence
over everything else.
&lt;h2&gt;The old way and the new way&lt;/h2&gt;
&lt;p&gt;The traditional way to deal with precedence
centers on symbols.
The symbols are divided sharply in two:
those that define structure
and those that carry information.
The structural symbols (often called &quot;operators&quot;)
are assigned associativities and precedence.
To help guide the parse,
symbols may be further classified as infix, prefix,
circumfix, etc.
&lt;p&gt;
Many rules, even those which intuitively seem part of
the precedence order,
do not fit into this symbol-oriented view of precedence.
Implied operators are ruled out,
as is any rule with two non-terminals in a row.
Rules with an arity of 3 or above, when not also impossible,
are a challenge.
&lt;p&gt;The approach of this post is 100% rule-based.
There is no attempt to identify operators or structural
symbols,
and no attempt to assign properties to them.
This rule-based approach allows
the convenient expression and
efficient implementation of
implied operators,
of rules of arity 3 or higher,
and of rules with any pattern of terminals or non-terminals.
&lt;h2&gt;Simpler&lt;/h2&gt;
&lt;p&gt;
Before getting into new features,
it is probably best to show the new approach as applied
to a grammar that
can be parsed with the traditional methods.
My notation is mostly standard or transparent,
but here are details:
&lt;tt&gt;&lt;pre&gt;
    ::=       separates the lhs of a rule from its rhs alternatives
    |         separates alteratives at the same precedence level
    ||        separates alteratives at different precedence levels
    :group    indicates 'grouping' associativity
    :left     indicates left associativity (the default)
    :right    indicates right associativity
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
Here is the grammar:
&lt;tt&gt;&lt;pre&gt;
e ::=
     NUM
   | VAR
   | :group '(' e ')'
  || '-' e
  || :right e '^' e
  || e '*' e
   | e '/' e
  || e '+' e
   | e '-' e
  || VAR '=' e
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
The above fully states the
precedence and associativity for the grammar's rules.
(As a reminder, the precedence follows the order of the rules,
from tightest to loosest.)
This is significantly simpler than what is required
to set up a traditional precedence parser.
On the other hand,
intuitively, it looks like all the required
information is there.
And, in fact, this is the source from which
Marpa::Demo::OP1 creates the grammar for a calculator.
The code is
&lt;a href=&quot;https://gist.github.com/3427294&quot;&gt;
a Github gist&lt;/a&gt;.
&lt;p&gt;In real life, users of a calculator grammar,
like the above,
will be interested
in a numeric result.
However, in this post we are not interested in double-checking
Perl's ability to do basic arithmetic,
so instead we capture
the syntactic structure that the calculator creates.
Here are sample outputs, with square brackets
added to show the parse.
&lt;tt&gt;&lt;pre&gt;
Input: &quot;4 * 3 + 42 / 1&quot;
  Parse: [[4*3]+[42/1]]
Input: &quot;4 * 3 / (a = b = 5) + 42 - 1&quot;
  Parse: [[[[4*3]/[([a=[b=5]])]]+42]-1]
Input: &quot;4 * 3 /  5 - - - 3 + 42 - 1&quot;
  Parse: [[[[[4*3]/5]-[-[-3]]]+42]-1]
Input: &quot;- a - b&quot;
  Parse: [[-a]-b]
Input: &quot;1 * 2 + 3 * 4 ^ 2 ^ 2 ^ 2 * 42 + 1&quot;
  Parse: [[[1*2]+[[3*[4^[2^[2^2]]]]*42]]+1]
&lt;/pre&gt;&lt;/tt&gt;
&lt;h2&gt;More flexible&lt;/h2&gt;
&lt;p&gt;
In the next grammar, I'll introduce an implied operator.
An implied operator is prominent among the features
that traditional precedence parsers
simply could not handle.
In the grammar that follows,
a missing operator will indicate multiplication,
just as in algebra.
&lt;p&gt;
Traditional precedence parsers also
were stymied by
rules with an arity of 3 or more.
For Marpa::Demo::OP1, these are no problem at all.
I'll introduce two ternary operations,
and a quaternary operation.
(New in the notation below is the &quot;&lt;tt&gt;=&gt; xyz&lt;/tt&gt;&quot;,
which specifies a non-default semantics,
in this case &quot;&lt;tt&gt;xyz()&lt;/tt&gt;&quot;.)
&lt;p&gt;
&lt;tt&gt;&lt;pre&gt;
e ::=
     NUM
   | VAR
   | :group '(' e ')'
  || '-' e
  || :right e '^' e
  || e '*' e
   | e e                                          =&gt; implied_multiply
   | e '/' e
  || e '+' e
   | e '-' e
  || VAR '=' e
  || :right e '?' e ':' e                         =&gt; spaced
   | :right e '??' e ':' e ':' e                  =&gt; spaced
  || 'payment' 'on' e 'over' e 'years' 'at' e '%' =&gt; spaced
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;The code for this second example is also
&lt;a href=&quot;https://gist.github.com/3427312&quot;&gt;
a Github gist&lt;/a&gt;.
And here is the output.
(To make it easy to spot them,
implied multiplications are shown with an &quot;&lt;code class=&quot;prettyprint&quot;&gt;x&lt;/code&gt;&quot;
instead of a &quot;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;&quot;.)
&lt;tt&gt;&lt;pre&gt;
Input: &quot;4 3 42 + 1&quot;
  Parse: [[[4 x 3] x 42]+1]
Input: &quot;e = m c^2&quot;
  Parse: [e=[m x [c^2]]]
Input: &quot;4 * 3 5 (6 7) 8 9 10&quot;
  Parse: [[[[[[4*3] x 5] x [([6 x 7])]] x 8] x 9] x 10]
Input: &quot;1 ? 42 : 2 ?? 3 : 4 : 5 ? 6 : 7&quot;
  Parse: [1 ? 42 : [2 ?? 3 : 4 : [5 ? 6 : 7]]]
Input: &quot;payment on 1000 + 1000 over months/12 years at 5 + 1 %&quot;
  Parse: [payment on [1000+1000] over [months/12] years at [5+1] %]
&lt;/pre&gt;&lt;/tt
&lt;h2&gt;How rule-based precedence works</description>
  </item>
  </channel>
</rss>
