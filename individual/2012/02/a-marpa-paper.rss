<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>A Marpa paper</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/02/14#a-marpa-paper</link>
    <description>&lt;p&gt;
I have just uploaded
&lt;a href=&quot;http://github.com/downloads/jeffreykegler/Marpa-theory/recce.pdf&quot;&gt;
a late stage draft
of a Theory of Computation paper on Marpa&lt;/a&gt; to github.
The paper contains pseudocode,
a correctness proof,
and proofs of my complexity claims.
(Marpa, for those unfamiliar,
is a new, powerful and fast parser and parsing algorithm.
To learn more,
check out &lt;a href=&quot;http://www.jeffreykegler.com/marpa&quot;&gt;its web page&lt;/a&gt;.)
&lt;/p&gt;
&lt;p&gt;
Progress in software follows two avenues --
implementation (aka &quot;running code&quot;)
and theory.
With Marpa, it was my intention to pursue both.
This is not the usual practice,
but it's a natural choice in Marpa's case,
because the two feed each other.
It would have been simply
impossible to write the code for Marpa
without a theory of WHY the code worked,
what kind of speed I expected in which cases,
and WHY the code I was writing would be able to deliver
that kind of speed.
&lt;/p&gt;
&lt;p&gt;
But if the example of Marpa and general parsing
shows the need for theory,
it also dramatically shows the need for running code.
In writing Marpa I built on a lot of excellent work by others,
work which has been largely,
and in some cases completely,
confined to the pages
of the journals and textbooks.
&lt;/p&gt;
&lt;p&gt;
Unfortunately,
even among its kind,
my Marpa paper is not an easy read.
It's a large and complex algorithm,
and its writeup
is large and complex.
Nor is it self-contained --
you need to be familiar with Jay Earley's algorithm,
and parts of the paper will be very hard to follow
if you've never looked at the work
done by Joop Leo
and by Aycock and Horspool.
One hint:
Even the experts read these papers
by skipping from section to section,
starting with the easy ones.
In particular, they often leave the proofs
for last or never.
&lt;/p&gt;</description>
  </item>
  </channel>
</rss>
