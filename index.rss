<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>A Marpa-based HTML reformatter</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/09/13#html_fmt</link>
    <description>    &lt;p&gt;
      &lt;!--
      perl ./marpa_r2_html_fmt
      --&gt;
      This post is about
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;,
      a
      &lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
        Marpa-&lt;/a&gt;based
      reformatter (&quot;tidier&quot;) for liberal HTML.
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      indents HTML according to the structure of the document,
      which makes the HTML a lot easier to read.
      In the process
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      adds missing start and end tags and identifies &quot;cruft&quot;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is ultra-liberal about its input.
      Like a browser's rendering engine,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      never rejects a file,
      no matter how defective it is as an HTML document.
      An interesting experiment would be to compare what your
      favorite browser does with a random text file feed to
      it directly,
      with what it does to the same file
      after it has been passed through
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is a by-product of moving
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/&quot;&gt;
        this blog to Github&lt;/a&gt;.
      In the course of bringing over
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/metapages/chronological.html&quot;&gt;
        my old posts&lt;/a&gt;,
      I wanted a filter that would tidy them up,
      so I turned to an old demo script I'd written.
      The old demo's usefulness was a pleasant surprise,
      but it lacked two features.
      First, it wouldn't read from standard input.
      Second, in formatting the HTML, it introduced new whitespace.
      The first problem was easy to fix.
      Fixing the second involved coming up with a
      &quot;lowest common denominator&quot; for whitespace treatment
      among browsers and HTML variants.
    &lt;/p&gt;
    &lt;p&gt;
      The result,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;,
      works very well as the first step in dealing with HTML
      that you are rewriting by hand.
      One quick pass-through and your file is much easier to read,
      has all the proper tags,
      and has comments pointing out any &quot;cruft&quot; that's there.
    &lt;/p&gt;
    &lt;p&gt;
      A production quality &quot;tidier&quot; would need to be something like
      &lt;tt&gt;
        gnuindent&lt;/tt&gt;
      --
      bristling with options.
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      so far has only two options,
      one dealing with whitespace before end tags,
      the other allowing
      a choice of strategies for avoiding added whitespace.
      (One strategy uses comments, while the other simply leaves
      the whitespace-sensitive locations as-is.)
      These two options are not nearly
      sufficient to deal with the full
      range of whitespace issues,
      never mind anything else.
    &lt;/p&gt;
    &lt;p&gt;
      But from a
      &lt;a href=&quot;http://blog.plover.com/oops/blosxom-sux.html&quot;&gt;
        &quot;Worse is Better&quot;&lt;/a&gt;
      point of view,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is a good start.
      It is 600 lines,
      short enough to find your
      way around in,
      particularly once you've deleted the parts you don't like.
      And its underlying Marpa-based interface is documented:
      &lt;a href=&quot;https://metacpan.org/module/Marpa::R2::HTML&quot;&gt;
        Marpa::R2::HTML&lt;/a&gt;.
      Marpa::R2::HTML is beta, but has been stable for some time.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is now available as a gist.
      In a future release of
      &lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
        Marpa::R2&lt;/a&gt;,
      it will be available as the
      &lt;tt&gt;
        marpa_r2_html_fmt&lt;/tt&gt;.
      But why wait until then to fork it?
    &lt;/p&gt;</description>
  </item>
  <item>
    <title>Marpa::R2 is beta</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/09/03#r2_is_beta</link>
    <description>&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;Marpa::R2&lt;/a&gt;
is now beta.
Marpa is a new parsing algorithm,
based on decades of prior art.
It is a practical and efficient solution
targeted at all parsing problems that are too
complex for regular expressions.
&lt;p&gt;
The
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;Marpa::R2&lt;/a&gt;
module is the most recent Marpa module.
Marpa is also available as the
&lt;a href=&quot;https://metacpan.org/release/Marpa-XS&quot;&gt;
Marpa::XS&lt;/a&gt;
module,
which is stable and bug-fix only.
Both Marpa modules:
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Parse everything you can write in BNF.
&lt;li&gt;&lt;p&gt;
Parse all
classes of grammar in practical use today in linear time.
&lt;li&gt;&lt;p&gt;Parse all BNF grammars
in times considered theoretically optimal.
For unambiguous grammars, Marpa is never worse than
O(n&lt;sup&gt;2&lt;/sup&gt;).
For ambiguous grammars, Marpa is never worse than
O(n&lt;sup&gt;3&lt;/sup&gt;).
Marpa never goes exponential.
&lt;li&gt;&lt;p&gt;
Are fully aware, at every point in the parse, of
all the rules they are parsing,
how far into them they have proceeded,
and of what tokens they expect next.
Especially with Marpa::R2,
this information is available
to the application
conveniently and efficiently.
&lt;li&gt;&lt;p&gt;
Do not need to be handwritten.
Marpa is available as a open-source library.
It is written in C,
and the C library can be used
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/libmarpa.html&quot;&gt;
directly&lt;/a&gt;
or via
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
a Perl interface&lt;/a&gt;.
&lt;li&gt;&lt;p&gt;
For general BNF parsing,
do not require
the user to craft
a lookahead or backtracking strategy -- Marpa
does not use lookahead and never backtracks.
&lt;li&gt;&lt;p&gt;
Come
with the traditional theoretical apparatus of
proofs based on prior literature.
&lt;/ol&gt;
&lt;p&gt;
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;Marpa::R2&lt;/a&gt;
is a major rewrite of the Marpa internals.
The most visible of these changes:
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Marpa::R2 is faster.
&lt;li&gt;&lt;p&gt;Marpa::R2 is easier to install.
In particular the dependency on Glib has been removed.
Marpa::R2 now has no non-core CPAN dependencies.
&lt;li&gt;&lt;p&gt;Marpa::R2's internal symbols are now invisible
to the user, even when tracing and debugging.
&lt;li&gt;&lt;p&gt;
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/libmarpa&quot;&gt;
Libmarpa, the C library which is at the core of Marpa&lt;/a&gt;,
is now documented
and separately installable.
(Libmarpa remains alpha at this point.)
&lt;li&gt;&lt;p&gt;Another new documented interface,
&lt;a href=&quot;https://metacpan.org/module/Marpa::R2::Advanced::Thin&quot;&gt;
Marpa::R2::Thin&lt;/a&gt;,
is a &quot;thin&quot; interface to Libmarpa from Perl.
(Marpa::R2::Thin remains alpha at this point.)
&lt;/ol&gt;</description>
  </item>
  <item>
    <title>Domain-Specific Languages made simpler</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/08/26#dsl</link>
    <description>&lt;h2&gt;Writing your own language&lt;/h2&gt;
&lt;p&gt;Creating your own language has been A Big Deal (tm).
What if you could create a simple language in hours or minutes?
There's been a serious obstacle up to now.
No practical parser &quot;just parsed&quot; BNF.
With
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;,
that restriction is lifted.
&lt;p&gt;
In this post, I will describe
a small, sample
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;
domain-specific language (DSL).
In designing it I am inspired by
&lt;a href=&quot;http://blog.plover.com/oops/blosxom-sux.html&quot;&gt;
Mark Dominus's description&lt;/a&gt;
of the
&lt;a href=&quot;http://en.wikipedia.org/wiki/Worse_is_better&quot;&gt;
&quot;Worse is Better&quot; philosophy&lt;/a&gt;,
and its implementation in the form of
&lt;a href=&quot;http://en.wikipedia.org/wiki/Blosxom&quot;&gt;
Blosxom&lt;/a&gt;.
This DSL is feature-poor,
but short, simple and extensible.
&lt;h2&gt;A calculator&lt;/h2&gt;
&lt;p&gt;
This DSL is a calculator.
Calculators are familiar and,
after all, whatever tool you build this
DSL into, it will probably be useful
to have a calculator as part of it.
What follows contains only the parts of the code
relevant to the discussion,
not necessarily in lexical order.
If you find the following interesting,
you'll almost certainly want the full code,
which is available as
&lt;a href=&quot;https://gist.github.com/3521836&quot;&gt;
a Github gist&lt;/a&gt;.
&lt;p&gt;
&lt;h2&gt;The grammar&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;
allows you to build your DSL as a clean modular
structure,
with a separate grammar, tokenizer and semantics.
If you're used to doing parsing with regexes or recursive descent,
you expect to see things mixed together,
and much as you might like modularity in other contexts,
this cleaner approach may make you uneasy.
And not without reason.
Traditionally, parsing tools that
took a modular approach
were painful to use and,
for practical grammars,
often rewarded the extra effort
they required by failing to work.
&lt;p&gt;Here's the grammar for our calculator.

&lt;div style=&quot;white-space:pre;overflow:auto;font-family:monospace;margin:0;padding:1em 0 1em 2.8em;&quot;&gt;
my $rules = Marpa::Demo::OP2::parse_rules(
    &lt;&lt;'END_OF_GRAMMAR'
reduce_op ::=
    '+'                   =&gt; do_arg0
  | '-'                   =&gt; do_arg0
  | '/'                   =&gt; do_arg0
  | '*'                   =&gt; do_arg0
script ::= e              =&gt; do_arg0
script ::= script ';' e   =&gt; do_arg2
e ::=
     NUM                  =&gt; do_arg0
   | VAR                  =&gt; do_is_var
   | :group '(' e ')'     =&gt; do_arg1
  || '-' e                =&gt; do_negate
  || :right e '^' e       =&gt; do_binop
  || e '*' e              =&gt; do_binop
   | e '/' e              =&gt; do_binop
  || e '+' e              =&gt; do_binop
   | e '-' e              =&gt; do_binop
  || e ',' e              =&gt; do_array
  || reduce_op 'reduce' e =&gt; do_reduce
  || VAR '=' e            =&gt; do_set_var
END_OF_GRAMMAR
);
&lt;/div&gt;

&lt;p&gt;This is a simple language, but it's already an advance over,
&lt;a href=&quot;http://blog.plover.com/prog/bash-expr.html&quot;&gt;
say, shell arithmetic&lt;/a&gt;.
And the &lt;tt&gt;reduce&lt;/tt&gt; operator is even a bit
of fanciness.
It's a second-order binary operator,
whose left operand is another operator.
&lt;p&gt;The grammar is written in another DSL, &lt;tt&gt;Marpa::Demo::OP2&lt;/tt&gt;,
which is bundled into the same file.
(OP2's grammar is defined directly in
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;.)
Together, these two quite useable DSL's require 600 lines,
self-testing included.
&lt;p&gt;
I'm using OP2 in this post, as it presents the &lt;strong&gt;idea&lt;/strong&gt;
of a grammar more clearly.
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;'s
lower level syntax, while more stable, flexible and efficient,
is more cluttered.
OP2 itself is interesting as an extension and generalization of
precedence parsing,
as I described in
&lt;a href=&quot;http://blogs.perl.org/users/jeffrey_kegler/2012/08/precedence-parsing-made-simpler.html&quot;&gt;
a previous post&lt;/a&gt;.
Here's its syntax:
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;::=&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;A BNF rule in LHS &lt;tt&gt;::=&lt;/tt&gt; RHS form
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;'abc'&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;A literal token.
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;|&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;Separates alternative RHS's at the &lt;strong&gt;same&lt;/strong&gt; precedence level
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;||&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;Separates alternative RHS's at the &lt;strong&gt;different&lt;/strong&gt; precedence levels.
  The tighter (&quot;higher&quot;) precedence alternative is first, the
  looser (&quot;lower&quot;) precedence alternative is second.
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;=&amp;gt;&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;&lt;tt&gt;rule =&amp;gt; semantics&lt;/tt&gt;, where &lt;tt&gt;semantics&lt;/tt&gt;
is a Perl closure.
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;:left&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;The alternative is left-associative (the default)
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;:right&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;The alternative is right-associative
&lt;dt&gt;&lt;strong&gt;&lt;tt&gt;:group&lt;/tt&gt;&lt;/strong&gt;&lt;dd&gt;The alternative is grouping-associative -- that is, its
operator(s), regardless of their own precedence,
group expressions of the loosest precedence
&lt;/dl&gt;

&lt;div style=&quot;white-space:pre;overflow:auto;font-family:monospace;margin:0;padding:1em 0 1em 2.8em;&quot;&gt;
my $grammar = Marpa::R2::Grammar-&gt;new(
    {   start          =&gt; 'script',
        actions        =&gt; __PACKAGE__,
        rules          =&gt; $rules,
    }
);
$grammar-&gt;precompute;
&lt;/div&gt;

&lt;p&gt;The code just above creates a new grammar from the OP2-generated rules.
The only other information needed to fully define
the grammar is the name of the start symbol
(&quot;&lt;tt&gt;script&lt;/tt&gt;&quot;) and the name of the package where
the semantics can be found
(the current one, &lt;tt&gt;__PACKAGE__&lt;/tt&gt;).
&lt;p&gt;
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;
does a lot of precomputation to its grammars.
Once a grammar is fully defined,
and before a recognizer can be created from it,
the &lt;tt&gt;precompute()&lt;/tt&gt; method must be called.
&lt;h2&gt;The semantics&lt;/h2&gt;
&lt;p&gt;
Those curious about the semantics of this calculator
can look at
&lt;a href=&quot;https://gist.github.com/3521836&quot;&gt;
the Github gist&lt;/a&gt;.
They are somewhat interesting.
But this post is about how to get &lt;strong&gt;your&lt;/strong&gt; interesting
semantics out easily and quickly,
in the form of a powerful
language specifically designed for them.
&lt;h2&gt;The lexer&lt;/h2&gt;
&lt;h3&gt;The token table&lt;/h3&gt;
&lt;p&gt;The calculator's lexer is table-driven.
The table is quite simple -- it's an array
of two element arrays.
In the inner arrays, the first element is the symbol name,
as specified in the grammar,
and the second is a regex which matches it.

&lt;div style=&quot;white-space:pre;overflow:auto;font-family:monospace;margin:0;padding:1em 0 1em 2.8em;&quot;&gt;
my @terminals = (
    [ q{'reduce'}, qr/reduce\b/xms ],
    [ 'NUM',       qr/\d+/xms ],
    [ 'VAR',       qr/\w+/xms ],
    [ q{'='},      qr/[=]/xms ],
    [ q{';'},      qr/[;]/xms ],
    [ q{'*'},      qr/[*]/xms ],
    [ q{'/'},      qr/[\/]/xms ],
    [ q{'+'},      qr/[+]/xms ],
    [ q{'-'},      qr/[-]/xms ],
    [ q{'^'},      qr/[\^]/xms ],
    [ q{'('},      qr/[(]/xms ],
    [ q{')'},      qr/[)]/xms ],
    [ q{','},      qr/[,]/xms ],
);
&lt;/div&gt;

&lt;p&gt;
Order in the above table matters when you have
terminals, one of which can prefix another.
An example would be the operators
&lt;tt&gt;==&lt;/tt&gt; and &lt;tt&gt;=&lt;/tt&gt;.
There is no such pair here,
however,
so that
in this application,
the order makes no difference.
&lt;p&gt;
As you can see,
I am one of those who specify &lt;tt&gt;xms&lt;/tt&gt; for every
regex.
The symbol names preserve the surrounding single quotes.
This is convenient for processing,
and it also makes diagnostic messages involving
those symbols more comprehensible.
Finally, note that the &lt;tt&gt;reduce&lt;/tt&gt; operator is required to end on a word boundary.
&lt;h3&gt;The tokenizing engine&lt;/h3&gt;

&lt;div style=&quot;white-space:pre;overflow:auto;font-family:monospace;margin:0;padding:1em 0 1em 2.8em;&quot;&gt;
    my $rec = Marpa::R2::Recognizer-&gt;new( { grammar =&gt; $grammar } );

    my $length = length $string;
    pos $string = 0;
    TOKEN: while ( pos $string &lt; $length ) {

        # skip whitespace
        next TOKEN if $string =~ m/\G\s+/gcxms;

        # read other tokens
        TOKEN_TYPE: for my $t (@terminals) {
            next TOKEN_TYPE if not $string =~ m/\G($t-&gt;[1])/gcxms;
            if ( not defined $rec-&gt;read( $t-&gt;[0], $1 ) ) {
                die_on_read_problem( $rec, $t, $1, $string, pos $string );
            }
            next TOKEN;
        } ## end TOKEN_TYPE: for my $t (@terminals)

        die q{No token at &quot;}, ( substr $string, pos $string, 40 ),
            q{&quot;, position }, pos $string;
    } ## end TOKEN: while ( pos $string &lt; $length )
&lt;/div&gt;
&lt;p&gt;The calculator's token engine creates a
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;
recognizer
with the &lt;tt&gt;new()&lt;/tt&gt; constructor,
and feeds it tokens with the &lt;tt&gt;read()&lt;/tt&gt; method.
In this token engine,
I use Perl's progressive matching capabilities:
the
&lt;tt&gt;g&lt;/tt&gt; and
&lt;tt&gt;c&lt;/tt&gt; modifiers, the
&lt;tt&gt;\G&lt;/tt&gt; assertion and the
&lt;tt&gt;pos&lt;/tt&gt; function.
When writing a token engine,
there is, as the expression goes, more than one way
to do it,
many of them somewhat easier than this approach.
But progressive matching is powerful, efficient,
very flexible,
and it has the advantage that
it leaves the original string intact.
&lt;p&gt;
Those who go on to look at the
&lt;a href=&quot;https://gist.github.com/3521836&quot;&gt;
code in the gist&lt;/a&gt;
may find
&lt;tt&gt;die_on_read_problem()&lt;/tt&gt;,
the DSL's function for handling &lt;tt&gt;read()&lt;/tt&gt; errors,
helpful.
It produces a very specific and comprehensive error message.
One of
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;'s
greatest improvements over previous
parsers is that, when a parse fails,
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;
can explain why in considerable detail.
It makes sense to take full advantage of that ability.

&lt;h2&gt;Evaluating the parse&lt;/h2&gt;
&lt;p&gt;
&lt;div style=&quot;white-space:pre;overflow:auto;font-family:monospace;margin:0;padding:1em 0 1em 2.8em;&quot;&gt;

    my $value_ref = $rec-&gt;value;

    if ( !defined $value_ref ) {
        say $rec-&gt;show_progress() or die &quot;say failed: $ERRNO&quot;;
        die 'Parse failed';
    }
    return ${$value_ref};

&lt;/div&gt;
&lt;p&gt;Evaluation of the parse is done with the &lt;tt&gt;value()&lt;/tt&gt; method.
This can return all the parse results of an ambiguous parse.
We want only one parse here,
so we call &lt;tt&gt;value()&lt;/tt&gt; only once.
&lt;tt&gt;value()&lt;/tt&gt; returns a reference to the value of the parse,
and a Perl &lt;tt&gt;undef&lt;/tt&gt; if the parse failed.
The error handling is worth noticing.
One of
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;'s
strengths is that it is fully aware of which rules
are being tried at any point,
and of how far into those rules recognition has progressed.
The &lt;tt&gt;show_progress()&lt;/tt&gt; method reports that information.

&lt;h2&gt;OP2&lt;/h2&gt;
&lt;p&gt;
This ends our description of the calculator code.
In
&lt;a href=&quot;https://gist.github.com/3521836&quot;&gt;
the Github gist&lt;/a&gt;
a second DSL immediately follows the
calculator DSL.
This second DSL is OP2,
which is used to define the grammar for the calculator.
OP2 is more complicated than the calculator,
but its design is similar,
and it can be used as a second DSL example.
&lt;h2&gt;Alernatives&lt;/h2&gt;
&lt;h3&gt;Marpa::R2 verus Marpa::XS&lt;/h3&gt;
&lt;p&gt;This calculator uses
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;.
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;
is beta,
while
&lt;a href=&quot;https://metacpan.org/module/Marpa::XS&quot;&gt;
Marpa::XS&lt;/a&gt;
is in a stable, bug-fix only release.
On the other hand
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;
is somewhat faster,
and its reporting of parse-time problems is better.
&lt;h3&gt;Specifying the grammar&lt;/h3&gt;
The grammar of the calculator is specified in OP2,
which is a clear and elegant way to do it.
But OP2 is an experimental DSL created just for this
one use.
&lt;p&gt;
A more robust way to 
specify grammars is to do it directly in
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;.
OP2's grammar is specified directly in
&lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
Marpa::R2&lt;/a&gt;.
A compromise between elegance and stability would be
to use OP2 (or a derivative)
to generate the rules (or some of them).
The OP2-generated rules can be used
as is, or edited to taste.
When you are happy with them,
Data::Dumper can turn the OP2-generated rules
into code,
which you can
then incorporate into your DSL program.
&lt;h3&gt;Error messages&lt;/h3&gt;
It is hard to compare
the quality of the
messages from these DSL's,
unfamiliar programs which explore new ground,
against, for example,
the comprehensibility of a C compiler's
error messages.
With the C compiler, I have the advantage of
over 40 years of Pavlovian training in guessing what
they really mean.
&lt;p&gt;
I believe that this DSL's error messages
are already, on average, up to the level
of typical production languages.
My main reason for this bold assertion is that
production parsers have set the bar,
frankly, extremely low.
I hasten to add,
this is often not because of lack of care or effort
by the implementers.
The traditional parsing technologies simply
do not provide enough information to support
accurate and helpful error reporting.
&lt;p&gt;
Much more could be done in error message handling
than is done by this calculator DSL.
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;'s
situational awareness
makes much easier to write usefully
accurate error messages than has been the case.
And I find better error messages often repay a high priority,
even in programs that are strictly for personal use.</description>
  </item>
  <item>
    <title>A new home for the Ocean of Awareness blog</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/08/26#announce</link>
    <description>The folks at &lt;a href=&quot;blogs.perl.org&quot;&gt;blogs.perl.org&lt;/a&gt;
has provided
my Ocean of Awareness blog
a wonderful home for some time.
But the call of static blogging is becoming impossible to resist.
A &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/&quot;&gt;
github based site&lt;/a&gt;
will, most likely, soon
become the new home
of the Ocean of Awareness blog.
&lt;p&gt;
One consideration still up in the air is comments on the blog.
For some bloggers, the loss of comments has been one of the
attractions of static blogging,
but comments have been valuable to me.
I've heard of Disqus being used for comments on static blogs,
and I'm looking into that.
&lt;p&gt;
For those who want to comment
in the meantime,
if the post is Marpa-related,
&lt;a href=&quot;https://groups.google.com/forum/?hl=en&amp;fromgroups#%21forum/marpa-parser&quot;&gt;
the Marpa mailing list&lt;/a&gt;
is a good place to comment.
Also,
I will continue to dual-post for some time,
and have not yet frozen comments on the versions of the
post at
&lt;a href=&quot;blogs.perl.org&quot;&gt;blogs.perl.org&lt;/a&gt;.</description>
  </item>
  <item>
    <title>Precedence parsing made simpler</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/2012/08/22#precedence-parsing-made-simpler</link>
    <description>&lt;p&gt;This post describes a new approach to precedence parsing,
one that makes it simpler and
more flexible.
Many programmers find precedence
is an intuitive way to
look at problems.
The traditional rules of arithmetic
are a familiar example:
&lt;tt&gt;&lt;pre&gt;
E ::= ( E )
E ::= n
E ::= E * E
E ::= E + E
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
Here, as in the rest of this post,
the rules are ranked from tightest (&quot;highest&quot;) precedence
to loosest (&quot;lowest&quot;).
The order in the above display indicates that multiplication
takes precedence over addition, and parentheses take precedence
over everything else.
&lt;h2&gt;The old way and the new way&lt;/h2&gt;
&lt;p&gt;The traditional way to deal with precedence
centers on symbols.
The symbols are divided sharply in two:
those that define structure
and those that carry information.
The structural symbols (often called &quot;operators&quot;)
are assigned associativities and precedence.
To help guide the parse,
symbols may be further classified as infix, prefix,
circumfix, etc.
&lt;p&gt;
Many rules, even those which intuitively seem part of
the precedence order,
do not fit into this symbol-oriented view of precedence.
Implied operators are ruled out,
as is any rule with two non-terminals in a row.
Rules with an arity of 3 or above, when not also impossible,
are a challenge.
&lt;p&gt;The approach of this post is 100% rule-based.
There is no attempt to identify operators or structural
symbols,
and no attempt to assign properties to them.
This rule-based approach allows
the convenient expression and
efficient implementation of
implied operators,
of rules of arity 3 or higher,
and of rules with any pattern of terminals or non-terminals.
&lt;h2&gt;Simpler&lt;/h2&gt;
&lt;p&gt;
Before getting into new features,
it is probably best to show the new approach as applied
to a grammar that
can be parsed with the traditional methods.
My notation is mostly standard or transparent,
but here are details:
&lt;tt&gt;&lt;pre&gt;
    ::=       separates the lhs of a rule from its rhs alternatives
    |         separates alteratives at the same precedence level
    ||        separates alteratives at different precedence levels
    :group    indicates 'grouping' associativity
    :left     indicates left associativity (the default)
    :right    indicates right associativity
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
Here is the grammar:
&lt;tt&gt;&lt;pre&gt;
e ::=
     NUM
   | VAR
   | :group '(' e ')'
  || '-' e
  || :right e '^' e
  || e '*' e
   | e '/' e
  || e '+' e
   | e '-' e
  || VAR '=' e
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;
The above fully states the
precedence and associativity for the grammar's rules.
(As a reminder, the precedence follows the order of the rules,
from tightest to loosest.)
This is significantly simpler than what is required
to set up a traditional precedence parser.
On the other hand,
intuitively, it looks like all the required
information is there.
And, in fact, this is the source from which
Marpa::Demo::OP1 creates the grammar for a calculator.
The code is
&lt;a href=&quot;https://gist.github.com/3427294&quot;&gt;
a Github gist&lt;/a&gt;.
&lt;p&gt;In real life, users of a calculator grammar,
like the above,
will be interested
in a numeric result.
However, in this post we are not interested in double-checking
Perl's ability to do basic arithmetic,
so instead we capture
the syntactic structure that the calculator creates.
Here are sample outputs, with square brackets
added to show the parse.
&lt;tt&gt;&lt;pre&gt;
Input: &quot;4 * 3 + 42 / 1&quot;
  Parse: [[4*3]+[42/1]]
Input: &quot;4 * 3 / (a = b = 5) + 42 - 1&quot;
  Parse: [[[[4*3]/[([a=[b=5]])]]+42]-1]
Input: &quot;4 * 3 /  5 - - - 3 + 42 - 1&quot;
  Parse: [[[[[4*3]/5]-[-[-3]]]+42]-1]
Input: &quot;- a - b&quot;
  Parse: [[-a]-b]
Input: &quot;1 * 2 + 3 * 4 ^ 2 ^ 2 ^ 2 * 42 + 1&quot;
  Parse: [[[1*2]+[[3*[4^[2^[2^2]]]]*42]]+1]
&lt;/pre&gt;&lt;/tt&gt;
&lt;h2&gt;More flexible&lt;/h2&gt;
&lt;p&gt;
In the next grammar, I'll introduce an implied operator.
An implied operator is prominent among the features
that traditional precedence parsers
simply could not handle.
In the grammar that follows,
a missing operator will indicate multiplication,
just as in algebra.
&lt;p&gt;
Traditional precedence parsers also
were stymied by
rules with an arity of 3 or more.
For Marpa::Demo::OP1, these are no problem at all.
I'll introduce two ternary operations,
and a quaternary operation.
(New in the notation below is the &quot;&lt;tt&gt;=&gt; xyz&lt;/tt&gt;&quot;,
which specifies a non-default semantics,
in this case &quot;&lt;tt&gt;xyz()&lt;/tt&gt;&quot;.)
&lt;p&gt;
&lt;tt&gt;&lt;pre&gt;
e ::=
     NUM
   | VAR
   | :group '(' e ')'
  || '-' e
  || :right e '^' e
  || e '*' e
   | e e                                          =&gt; implied_multiply
   | e '/' e
  || e '+' e
   | e '-' e
  || VAR '=' e
  || :right e '?' e ':' e                         =&gt; spaced
   | :right e '??' e ':' e ':' e                  =&gt; spaced
  || 'payment' 'on' e 'over' e 'years' 'at' e '%' =&gt; spaced
&lt;/pre&gt;&lt;/tt&gt;
&lt;p&gt;The code for this second example is also
&lt;a href=&quot;https://gist.github.com/3427312&quot;&gt;
a Github gist&lt;/a&gt;.
And here is the output.
(To make it easy to spot them,
implied multiplications are shown with an &quot;&lt;code class=&quot;prettyprint&quot;&gt;x&lt;/code&gt;&quot;
instead of a &quot;&lt;code class=&quot;prettyprint&quot;&gt;*&lt;/code&gt;&quot;.)
&lt;tt&gt;&lt;pre&gt;
Input: &quot;4 3 42 + 1&quot;
  Parse: [[[4 x 3] x 42]+1]
Input: &quot;e = m c^2&quot;
  Parse: [e=[m x [c^2]]]
Input: &quot;4 * 3 5 (6 7) 8 9 10&quot;
  Parse: [[[[[[4*3] x 5] x [([6 x 7])]] x 8] x 9] x 10]
Input: &quot;1 ? 42 : 2 ?? 3 : 4 : 5 ? 6 : 7&quot;
  Parse: [1 ? 42 : [2 ?? 3 : 4 : [5 ? 6 : 7]]]
Input: &quot;payment on 1000 + 1000 over months/12 years at 5 + 1 %&quot;
  Parse: [payment on [1000+1000] over [months/12] years at [5+1] %]
&lt;/pre&gt;&lt;/tt&gt;
&lt;h2&gt;How rule-based precedence works&lt;/h2&gt;
&lt;p&gt;
Rule-based precedence parsing uses
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;,
a new and efficient general BNF parsing algorithm.
With Marpa,
the rest is straightforward.
The grammars in the examples above are rewritten,
using the included precedence and associativity information,
into an &quot;order-explicit grammar&quot;.
The BNF of an order-explicit grammar
enforces the 
precedence and associativity of the original, source grammar.
Many textbooks on parsing describe
how to write order-explicit BNF
by hand.
&lt;p&gt;
Creating an algorithm to produce an order-explicit BNF grammar
required some careful thought,
but no flashes of brilliance.
Previously, the major obstacle to this approach would have been
the parse engine.
Traditional parsers did not &quot;just parse&quot; arbitrary BNF -- far from it.
Without (and often even with) programmer intervention,
there would be little reason to hope that
an LALR or LL parse engine would parse
an arbitrary order-explicit BNF grammar.
&lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
Marpa&lt;/a&gt;,
on the other hand, does &quot;just parse&quot; arbitrary BNF,
and a successful parse is guaranteed.
&lt;p&gt;
Any grammar which could have been parsed by yacc (LALR)
or an operator-precedence parser will be parsed by Marpa in linear
time.
LALR and operator precedence are subsets of LR(1), while
Marpa is linear for LR-regular,
and for LR(k) for all k.
This means that Marpa will stay linear for vast classes of grammars
that the traditional techniques
had no hope of ever parsing.
&lt;p&gt;
&lt;h2&gt;Acknowledgements&lt;/h2&gt;
&lt;p&gt;
This post is the outcome of a line of thinking started
by an exchange with Alberto Sim&amp;otilde;es,
begun when he graciously shared with me
a pre-release
copy of
&lt;a href=&quot;http://drops.dagstuhl.de/opus/volltexte/2012/3513/pdf/6.pdf&quot;&gt;
an article on lexical analysis&lt;/a&gt;,
which he authored jointly.
And, in creating the DSL used for the examples,
I benefited immensely from studying the approaches used by Peter Stuifzand.</description>
  </item>
  </channel>
</rss>
