<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Configuring the Ruby Slippers for HTML</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/config_html3.html</link>
    <description>  &lt;p&gt;
      &lt;!--
      perl ./marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
      This post is part of
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/metapages/annotated.html#PARSE_HTML&quot;&gt;
        a series&lt;/a&gt;
      describing Marpa::R2::HTML,
      a configurable HTML parser.
      The last two posts described how to change
      the context and contents of the HTML
      elements, both new and existing.
      This post describes how to configure
      optional start tags: how to change 
      which start tags
      are optional,
      and how to specify the circumstances
      in which they will be supplied.
    &lt;/p&gt;
    &lt;h3&gt;How the parser works&lt;/h3&gt;
    &lt;p&gt;
      In the first posts in this series I went into some detail describing
      my Marpa-based approach to HTML parsing.
      Briefly, it combines a parse engine using a &quot;wishful thinking&quot; grammar
      with a Ruby Slippers lexer.
      The &quot;wishful thinking&quot; grammar expects all elements,
      without exception,
      to have both start and end tags.
      This overstrict grammar demands tags even in cases
      where the
      &lt;a href=&quot;http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline&quot;&gt;
        HTML 4.01 Strict DTD&lt;/a&gt;
      mandates that they be treated as optional.
    &lt;/p&gt;
    &lt;p&gt;
      The overstrict grammar is liberalized by the Ruby Slippers.
      Marpa has an unusual property among parsers -- it is fully
      informed about the state of the parse at all points,
      and can conveniently and efficiently share that information
      with the application.
      In Marpa::R2::HTML, when the parse engine, with its
      overstrict grammar, grinds to a halt for lack
      of a tag that does not exist
      in the physical input,
      the lexer can ask the parse engine which tag it is looking for.
      It can then dummy one up, feed it to the parse engine,
      and start things back up.
      It's as simple as that.
    &lt;/p&gt;
    &lt;p&gt;
      For HTML end tags,
      the Ruby Slippers work stunningly well.
      Only one end tag will be expected at any point.
      In cases where a stack of elements must be properly terminated,
      the parse engine will request the end tags, one at a time,
      in proper order.
      The grammar can simplify life for itself by demanding a perfect
      world, and on the lexer's side, things are no harder -- it just
      has to do what it is told.
    &lt;/p&gt;
    &lt;p&gt;
      For the very few start tags
      that are optional according to the Strict HTML 4.01 DTD,
      things are just as simple -- they occur in places where only one
      at a time will be demanded, and the Ruby Slippers lexer need
      only do what it is told to.
      However, if you want to further liberalize HTML, there will be
      cases where there is a choice between start tags;
      or between
      starting one element and ending another.
    &lt;/p&gt;
    &lt;h3&gt;Configuring the Ruby Slippers&lt;/h3&gt;
    &lt;p&gt;
      In the last post,
      I showed how to configure Marpa::R2::HTML to allow or disallow
      text directly in the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      element.
      If Marpa::R2::HTML
      was configured to disallow 
      text directly in the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      element,
      and it encountered such text,
      Marpa::R2::HTML would start a block.
      The block was started
      by supplying a
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      start tag in front of the text.
      In other words, Marpa::R2::HTML treated
      the
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      start tag as optional.
    &lt;/p&gt;
      Let me give an example.
      Suppose the HTML document consisted of the string
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;Hello, world&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      and that, using the default configuration,
      we ran &lt;tt&gt;html_fmt&lt;/tt&gt; as  follows:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt --no-added-tag-comment&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      This would be our result:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;
      Hello, world
    &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      This was produced using the default configuration,
      which resides in
      &lt;a href=&quot;http://api.metacpan.org/source/JKEGL/Marpa-R2-2.022000/g/config/default.txt&quot;&gt;
        the
        &lt;tt&gt;g/config/default.txt&lt;/tt&gt;
        file&lt;/a&gt;.
      (All the examples is this post use version 2.022000 of Marpa::R2.)
    &lt;/p&gt;
    &lt;h3&gt;First, the results&lt;/h3&gt;
    &lt;p&gt;
      Let's change the behavior of 
      Marpa::R2::HTML so that,
      instead of starting a new
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      element,
      it will reject the text as cruft.
      We create a new configuration,
      putting it into a file named
      &lt;tt&gt;g/config/reject_text.txt&lt;/tt&gt;.
    &lt;p&gt;
      Creating the
      configuration will not be difficult,
      but it will perhaps be easiest to understand
      if we first see the result
      that we are aiming at.
      Again we run &lt;tt&gt;html_fmt&lt;/tt&gt;:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt \
  --compile reject_pcdata.txt  --no-added-tag-comment&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      And this is our new result:
    &lt;/p&gt;&lt;blockquote&gt;&lt;pre&gt;&lt;tt&gt;&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;!-- html_fmt: Next line is cruft --&amp;gt;
    Hello, world
&amp;lt;/body&amp;gt;
&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;Note that in this second example, there are no tags
      for the
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      element,
      and that the text is now labeled as &quot;cruft&quot;, as desired.
    &lt;/p&gt;
    &lt;h3&gt;How it was done&lt;/h3&gt;
    &lt;p&gt;
      How would we change the default configuration file to refuse to start a new
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      element in front of text?
      The three relevant lines are:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;@block_rubies  = &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;body&amp;gt;
@inline_rubies = @block_rubies &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;p&amp;gt;
PCDATA -&amp;gt; @inline_rubies
&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;The symbols with an &quot;&lt;tt&gt;@&lt;/tt&gt;&quot; sigil are lists,
      which the configuration file uses as a convenient shorthand for groups
      of symbols which occur frequently.
      For convenience in this discussion,
      let's expand them, so that relevant extract looks like this
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;PCDATA -&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt; &amp;lt;p&amp;gt;&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      In the configuration file,
      &lt;tt&gt;PCDATA&lt;/tt&gt;
      can be thought of as non-whitespace text,
      occurring in a context which is parsed
      for markup and entities.
      (Precisely, it is whatever
      HTML::Parser returns as text that is not whitespace
      and does not turn on the
      &lt;tt&gt;is_cdata&lt;/tt&gt;
      flag.)
      What this line says is that, whenever
      a &lt;tt&gt;PCDATA&lt;/tt&gt; token
      is rejected,
      Marpa::R2::HTML should try to fix the problem as follows:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;1. If possible, start an
        &lt;tt&gt;&amp;lt;html&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;2. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;head&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;3. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;4. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;tbody&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;5. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;tr&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;6. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;td&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;7. Otherwise, if possible, start a
        &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
        element.
      &lt;/li&gt;
      &lt;li&gt;8. Otherwise, if it is possible to end
        a non-structural or a 
        &lt;tt&gt;&amp;lt;head&amp;gt;&lt;/tt&gt;
	element at this point, do so.
	(At any point, it will be possible to end
	at most one element.)
      &lt;/li&gt;
      &lt;li&gt;9. Finally, if nothing else works, mark the &quot;PCDATA&quot; as cruft.
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Of these alternatives, the first three allow Marpa::R2::HTML to supply missing
      structural start tags, as required by the standards.
      Alternatives 4, 5 and 6 allow Marpa::R2::HTML to continue building a table
      if table-building is in progress.
      (But note that the line does not allow Marpa::R2::HTML
      to deal with rejected
      PCDATA by starting a new table.)
      Alternative 7 allows Marpa::R2::HTML to start a new
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      element if PCDATA is rejected.
      &lt;p&gt;
      Alternatives 8 and 9 are implicit.
      By default, after all the explicit Ruby Slippers
      alternatives have been tried,
      Marpa::R2::HTML will create a Ruby Slippers tags
      for any end tag that is allowed,
      with two exceptions:
      Marpa::R2::HTML will not create
      &lt;tt&gt;&amp;lt;/body&amp;gt;&lt;/tt&gt; and
      &lt;tt&gt;&amp;lt;/html&amp;gt;&lt;/tt&gt; end tags except at the end of file.
      And Marpa::R2::HTML always reserves the possibility of,
      as a last resort,
      labeling a token as &quot;cruft&quot; and moving on.
    &lt;/p&gt;
    &lt;p&gt;
      Once you understand how the Ruby Slippers configuration lines work,
      the fix in this case becomes obvious:
      In the expanded line,
      elminate the
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      as one of the alternatives considered for the Ruby Slippers.
      In terms of the expanded line,
      this means changing it to
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;PCDATA -&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      In terms of the original set of lines,
      this means changing the one for the
      &lt;tt&gt;@inline_rubies&lt;/tt&gt;
      list:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;@inline_rubies = @block_rubies &amp;lt;tbody&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td&amp;gt;&lt;/tt&gt;&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      In the Ruby Slippers configuration lines of
      the default configuration file,
      the &lt;tt&gt;@inline_rubies&lt;/tt&gt; list is the only place that
      the
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt; tag is mentioned.
      So changing
      &lt;tt&gt;@inline_rubies&lt;/tt&gt;
      has effect
      of eliminating
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      as an optional start tag.
      Only &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt; tags actually in the physical
      input will be recognized.
      This is what was actually done
      in
      &lt;a href=&quot;https://gist.github.com/3925571&quot;&gt;
        &lt;tt&gt;g/config/reject_text.txt&lt;/tt&gt;,
        the configuration file used in our example&lt;/a&gt;.
    &lt;/p&gt;
    &lt;h3&gt;Code and comments&lt;/h3&gt;
    &lt;p&gt;
      Comments on this post can be sent to the Marpa Google Group:
      &lt;code&gt;marpa-parser@googlegroups.com&lt;/code&gt;
    &lt;/p&gt;</description>
  </item>
  <item>
    <title>A configurable HTML parser, part 2</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/config_html2.html</link>
    <description>  &lt;p&gt;
      &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/config_html.html&quot;&gt;
        My last post&lt;/a&gt;
      introduced Marpa::R2::HTML,
      a configurable HTML parser.
      By editing
      &lt;a href=&quot;https://gist.github.com/3901637&quot;&gt;
        a configuration file&lt;/a&gt;,
      the user can change
      the variant of HTML
      being parsed.
      The changes allowed are very wide ranging.
      The previous post started with simple changes --
      the ability to specify the contents of new tags,
      and the context in which they can appear.
    &lt;/p&gt;
    &lt;p&gt;
      In this post the changes get more aggressive.
      I change the contents of an existing HTML element --
      and not just any element, but
      one of the HTML's three &quot;structural&quot; elements.
      Marpa::R2::HTML allows the configuration file to change
      the contents of all pre-existing
      elements, with the exception of the highest level of the three
      structural elements:
      the
      &lt;tt&gt;&amp;lt;html&amp;gt;&lt;/tt&gt;
      element itself.
    &lt;/p&gt;
    &lt;h3&gt;Can text appear directly in an HTML body?&lt;/h3&gt;
    &lt;p&gt;
      This post will discuss changing the contents of the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      element.
      Fundamental to the HTML document as this element is,
      the definition of its contents has been very much in play.
    &lt;/p&gt;
    &lt;p&gt;
      Let's start with the question posed in the title of this section:
      Can text appear directly in an HTML
      &lt;tt&gt;
        &amp;lt;body&amp;gt;&lt;/tt&gt;
      element?
      That is, must text inside an HTML
      &lt;tt&gt;
        &amp;lt;body&amp;gt;&lt;/tt&gt;
      be part of one of its child elements,
      or can it be directly part of the contents
      of the
      &lt;tt&gt;
        &amp;lt;body&amp;gt;&lt;/tt&gt;
      element?
    &lt;/p&gt;&lt;p&gt;
      If you want an
      answer strictly according to the standards,
      then you get your choice in the matter.
      According to the
      &lt;a href=&quot;http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline&quot;&gt;
        HTML 4.01 Strict DTD&lt;/a&gt;,
      the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      contains a &quot;block flow&quot;,
      which means that
      the answer is &quot;No, text must be in the contents of a child element&quot;.
      Implementations of HTML were encouraged to be liberal, however,
      and in practice a lot of the HTML &quot;out there&quot;
      has text directly
      in
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      elements.
      Users expect their browsers to render these pages
      in the way that the writer intended them to look.
    &lt;/p&gt;
    &lt;p&gt;
      Recognizing existing practice,
      HTML 5 changed to require conforming implementations to
      allow text to be interspersed with the block flow,
      in what I call a &quot;mixed flow&quot;.
      A mixed flow can directly contain blocks and text,
      as well as inline elements.
      (The inline vs. block element distinction is basic to HTML parsing.
      See my earlier post or
      &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML_element&quot;&gt;
        the well-organized Wikipedia page on HTML elements&lt;/a&gt;.)
    &lt;/p&gt;
    &lt;h3&gt;Block or mixed flow?&lt;/h3&gt;
    &lt;p&gt;
      When parsing HTML, do you want to the treat contents of the body
      as a block flow or a mixed flow?
      Here are some of the factors.
    &lt;/p&gt;&lt;ul&gt;
      &lt;li&gt;
        Common practice requires accepting a mixed flow.
      &lt;/li&gt;&lt;li&gt;
        Cautious practice suggests writing a block flow.
      &lt;/li&gt;&lt;li&gt;
        HTML 4.01 requires block, but suggests being liberal.
      &lt;/li&gt;&lt;li&gt;
        HTML 5 requires that a mixed flow be accepted.
      &lt;/li&gt;&lt;li&gt;
        But HTML 5 also requires that the mixed flow be displayed as if it was written
        in blocks and
        suggests that explicit blocking be used to eliminate
        ambiguities.
      &lt;/li&gt;&lt;/ul&gt;
    &lt;h3&gt;Examples&lt;/h3&gt;
    &lt;h4&gt;Body contains block flow&lt;/h4&gt;
    &lt;p&gt;
      In this first example,
      the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      contains a block flow.
      This is what is specified in
      &lt;a href=&quot;https://gist.github.com/3901637&quot;&gt;
        the default configuration file&lt;/a&gt;.
      Here is the pertinent line:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;
&amp;lt;body&amp;gt; is *block
&lt;/tt&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      This line says
      that the
      &lt;tt&gt;
        &amp;lt;body&amp;gt;&lt;/tt&gt;
      element contains a block flow (&lt;tt&gt;*block&lt;/tt&gt;).
      Here the star is a sigil which suggests the repetition operator
      of DTD's and regular expressions.
      (Readers of my last post will notice I've changed the configuration
      file syntax and will,
      I hope,
      find the new format an improvement.)
    &lt;/p&gt;&lt;p&gt;
      For the examples in this post,
      the HTML will be
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;
I cannot wait for a start tag&amp;lt;p&amp;gt;I can
&lt;/tt&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      We run this through the
      &lt;tt&gt;marpa_r2_html_fmt --no-added-tag-comment&lt;/tt&gt;.
      Here is the output:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;
      I cannot wait for a start tag&amp;lt;/p&amp;gt;&amp;lt;p&gt;
      I can&amp;lt;/p&amp;gt;&amp;lt;/body&gt;
&amp;lt;/html&amp;gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      The first thing the parser encounters is text,
      which in this example is not allowed
      to occur directly in the body.
      As part of being a highly liberal HTML parser,
      however, Marpa::R2::HTML will supply a start tag
      in these situations.
      (This behavior, by the way, is also configurable --
      a change to the configuration file can
      tell Marpa::R2::HTML not to do this.)
      With its two
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      start tags,
      one of them conjured up by the Ruby Slippers,
      Marpa::R2::HTML breezes through its input.
    &lt;/p&gt;
    &lt;h4&gt;Body contains mixed flow&lt;/h4&gt;
    &lt;p&gt;
      In the second example, we liberalize the contents of
      the
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      to allow a mixed flow:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;
&amp;lt;body&amp;gt; is *mixed
&lt;/tt&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      Here is the result:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;&lt;tt&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    I cannot wait for a start tag&amp;lt;p&amp;gt;
      I can&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      In a mixed flow, no
      second
      &lt;tt&gt;&amp;lt;p&amp;gt;&lt;/tt&gt;
      start tag
      is needed, and none is created.
      Its matching end tag
      (&lt;tt&gt;&amp;lt;/p&amp;gt;&lt;/tt&gt;) also does not
      have to be created.
      Otherwise, all is as before.
    &lt;/p&gt;
    &lt;h3&gt;What I decided&lt;/h3&gt;
    &lt;p&gt;
      Before I made my HTML parser configurable,
      I was forced to decide the issue of
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      contents one way or the other.
      My first
      implementation of the
      &lt;tt&gt;html_fmt&lt;/tt&gt;
      utility was based on Marpa::XS
      and
      its grammar specified a mixed flow.
    &lt;/p&gt;&lt;p&gt;
      When I started a new version
      of the utility
      based on Marpa::R2,
      I reopened the issue.
      I decided that a stricter grammar produced a more precise parse,
      and that it was best to leave it up
      to the Ruby Slippers to &quot;loosen things up&quot;
      when the grammar was too strict.
      This was close, I hoped, to the best of both worlds,
      So I changed the grammar to specify a block
      flow for the contents of
      &lt;tt&gt;&amp;lt;body&amp;gt;&lt;/tt&gt;
      element.
      This second choice -- strict block-flow-body grammar and liberal Ruby Slippers --
      remains the default in the configurable version.
    &lt;/p&gt;
    &lt;p&gt;
      In current developer's releases of Marpa::R2,
      and in its next indexed release,
      both the grammar and the Ruby Slippers are configurable.
      The true best of both worlds happens when
      the user gets to decide.
    &lt;/p&gt;
    &lt;h3&gt;Code and comments&lt;/h3&gt;
    &lt;p&gt;
      The examples here were run using Marpa::R2 release 2.021_010.
      They are part of its test suite and can be found in the
      &lt;tt&gt;html/t/cfg_fmt.t&lt;/tt&gt;
      file.
    &lt;/p&gt;
    &lt;p&gt;
      The configurable Marpa::R2::HTML does considerably more than
      can be comfortably described in a single post.
      This post is the second of a series.
      Comments on this post can be sent to the Marpa Google Group:
      &lt;code&gt;marpa-parser@googlegroups.com&lt;/code&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  <item>
    <title>A Configurable HTML Parser</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/config_html.html</link>
    <description>    &lt;p&gt;
      &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment
      --&gt;
      This post introduces an HTML parser which is both liberal and configurable.
      Currently available as a
      &lt;a href=&quot;https://metacpan.org/release/JKEGL/Marpa-R2-2.021_006&quot;&gt;
        part of a Marpa::R2 developer's release on CPAN&lt;/a&gt;,
      the new Marpa::R2::HTML allows detailed
      configuration of new tags
      and respecification of the behavior of existing tags.
    &lt;/p&gt;&lt;p&gt;
      To show how a configurable HTML parser works,
      I will start with a simple task.
      Let's suppose we have a new tag, call it
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;.
      The older, non-configurable version of Marpa, and most browsers,
      would recognize this tag.
      But they'd simply give it a default configuration,
      one which is usually very liberal --
      liberal meaning the tag is allowed to contain just about anything,
      and to go just about anywhere.
      A configurable parser allows us to specify the new tag's behavior
      more explicitly and strictly.
    &lt;/p&gt;&lt;h3&gt;
      Block vs. inline&lt;/h3&gt;&lt;p&gt;
      In this post
      I am going to assume that the reader knows,
      or will look up what he needs to know,
      about HTML.
      But block vs. inline is a essential HTML concept
      which is often ignored -- even
      &lt;a href=&quot;http://en.wikipedia.org/wiki/HTML&quot;&gt;
      the excellent Wikipedia page on HTML&lt;/a&gt;
      does not define &quot;inline&quot;, although it uses the term in the technical
      sense twice.
      Since the concept is also central to this post,
      let me briefly summarize it.
    &lt;/p&gt;&lt;p&gt;
      Quoting from the
      &lt;a href=&quot;http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline&quot;&gt;
        HTML 4.01 Strict DTD&lt;/a&gt;,
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
      HTML has two basic content models:

        %inline;     character level elements and text strings
        %block;      block-like elements e.g. paragraphs and lists
&lt;/pre&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;
      There is also what I will call a &quot;mixed flow&quot;,
      which can contain anything that
      can appear in either a block or inline flow.
      (What I call a mixed flow is
      simply called a &quot;flow&quot;
      in the HTML 4.01 DTD.)
    &lt;/p&gt;&lt;p&gt;
      Significant in the examples are
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;,
      which is a block element that contains an inline flow and
      &lt;code&gt;
        &amp;lt;span&amp;gt;&lt;/code&gt;,
      which is an inline element that contains an inline flow.
      The
      &lt;code&gt;
        &amp;lt;body&amp;gt;&lt;/code&gt;
      tag is an important structural tag,
      which contains an block flow.
    &lt;/p&gt;&lt;p&gt;
      For simplicity I am following HTML 4.01 DTD.
      HTML 5
      uses radically different terminology and is more liberal
      in what it allows.
      Differences among standards are an important reason for
      an HTML parser to be configurable.
    &lt;/p&gt;
    &lt;h3&gt;
      Controlling element context&lt;/h3&gt;
    &lt;h4&gt;
      An inline element containing an inline flow&lt;/h4&gt;
    &lt;p&gt;
      Let's define the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      tag
      to be an inline tag with inline contents.
      This is done by adding the following line to the
      Marpa::R2::HTML grammar configuration file:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_inline included in GRP_inline
&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      Let's take as our HTML, the following:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;acme&amp;gt;-during-&amp;lt;span&amp;gt;-more inline stuff-&amp;lt;p&amp;gt;-new block-
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      With the following shell commands,
      we add the new line to
      &lt;a href=&quot;https://gist.github.com/3869482&quot;&gt;
        &lt;code&gt;
          default.cfg&lt;/code&gt;,
        the default grammar configuration file&lt;/a&gt;.
      We then use the
      &lt;code&gt;
        marpa_r2_html_fmt&lt;/code&gt;
      utility
      that comes with Marpa::R2
      to parse the HTML.
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
cp default.cfg test.cfg
echo &quot;ELE_acme is a FLO_inline included in GRP_inline&quot; &amp;gt;&amp;gt; test.cfg
echo '&amp;lt;acme&amp;gt;-during-&amp;lt;span&amp;gt;-more inline stuff-&amp;lt;p&amp;gt;-new block-' |
  marpa_r2_html_fmt --no-added-tag --compile test.cfg
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
&lt;code&gt;marpa_r2_html_fmt&lt;/code&gt; indents the HTML and
      adds missing tags
This will show us the structure of our small HTML document.
      Here is what we get:
    &lt;/p&gt;
    &lt;!-- examples/acme-inline-inline.out --&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;p&amp;gt;
      &amp;lt;acme&amp;gt;
        -during-&amp;lt;span&amp;gt;
          -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;/acme&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;
      -new block-
    &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      We see from this that the configuration took proper effect.
      Since the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      tag was configured as an inline element,
      it cannot go directly inside the
      the
      &lt;code&gt;
        &amp;lt;body&amp;gt;&lt;/code&gt;.
      So a new
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;
      is created to contain the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element.
      (A Marpa::R2::HTML configuration can also change
      the contents that are acceptable inside the
      &lt;code&gt;
        &amp;lt;body&amp;gt;&lt;/code&gt;.
      For the moment, we'll keep it simple
      and accept as given that
      &lt;code&gt;
        &amp;lt;body&amp;gt;&lt;/code&gt;
      contains a block flow.)
    &lt;/p&gt;&lt;p&gt;
      Similarly,
      since the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      tag contains an inline flow,
      it must end before the next
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;
      tag.
      The parser supplies an
      end tag for the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element,
      and also
      closes the
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;
      paragraph that was
      started to hold the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element.
    &lt;/p&gt;
    &lt;h4&gt;
      A block element containing an inline flow&lt;/h4&gt;
    &lt;!-- examples/acme-block-inline.out --&gt;
    &lt;p&gt;
      Our new configuration line can also specify that
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      is a block element:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_inline included in GRP_block
&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      The code to test this is very similar to that displayed above.
      It, and the scripts for all of this post's other examples,
      can be found
      &lt;a href=&quot;https://gist.github.com/3870030&quot;&gt;
        as a gist&lt;/a&gt;.
      Here's the result:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;acme&amp;gt;
      -during-&amp;lt;span&amp;gt;
        -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;/acme&amp;gt;&amp;lt;p&amp;gt;
      -new block-
    &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      Here the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element is allowed in a block,
      so no new
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;
      element was needed to contain it.
      Since
      the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element's contents are inline,
      the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element still needed to be ended before
      the
      &lt;code&gt;
        &amp;lt;p&amp;gt;&lt;/code&gt;
      tag in the actual input.
    &lt;/p&gt;
    &lt;h3&gt;
      The grammar configuration file&lt;/h3&gt;
    &lt;p&gt;
      Those who click through to look at
      &lt;a href=&quot;https://gist.github.com/3869482&quot;&gt;
        the grammar configuration file&lt;/a&gt;
      may notice
      its length.
      Three pages.
      And almost half of those three pages
      are single-line descriptions of elements
      which are one or more of deprecated, obsolete
      or proprietary.
      Arguably the configuration file
      should be even shorter.
    &lt;/p&gt;&lt;p&gt;
      Other implementations of liberal HTML
      parsers spread the logic specifying the HTML
      variant across a considerably larger body of code,
      sometimes a vastly larger.
      This very much affects the cost of evolving and
      maintain the parser.
    &lt;/p&gt;&lt;p&gt;
      As for the configuration file's format at the moment:
      it is experimental.
      I can state from experience that it is
      quite serviceable,
      and fairly readable,
      but it could be more elegant.
    &lt;/p&gt;&lt;h3&gt;
      Controlling element content&lt;/h3&gt;
    &lt;h4&gt;
      A block element containing a mixed flow&lt;/h4&gt;
    &lt;!-- examples/acme-block-mixed.out --&gt;
    &lt;p&gt;
      We can also configure the contents of
      the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element.
      This configuration line specifies a mixed flow.
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_mixed included in GRP_block
&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;And here is what we get:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;acme&amp;gt;
      -during-&amp;lt;span&amp;gt;
        -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;p&amp;gt;
        -new block-
      &amp;lt;/p&amp;gt;&amp;lt;/acme&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      A mixed flow accepts any contents,
      so that the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element's contents expand to include the
      entire body of the html document.
    &lt;/p&gt;
    &lt;h4&gt;
      A block element containing a block flow&lt;/h4&gt;
    &lt;!-- examples/acme-block-block.out --&gt;
&lt;p&gt;With this configuration line, we request a block
        flow for the contents:
      &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_block included in GRP_block
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      The results:
    &lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;acme&amp;gt;
      &amp;lt;p&amp;gt;
        -during-&amp;lt;span&amp;gt;
          -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;
        -new block-
      &amp;lt;/p&amp;gt;&amp;lt;/acme&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      Here the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element also spans the entire body of the HTML
      element,
      but because block flows are less liberal than
      mixed flows,
      the contents of the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element have to be properly &quot;packaged&quot; inside
      block elements.
    &lt;/p&gt;
    &lt;h4&gt;
      A block element containing PCDATA&lt;/h4&gt;
    &lt;!-- examples/acme-block-pcdata.out --&gt;
    &lt;p&gt;
      We are getting progressively more restrictive with the contents
      of the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element.
      We've already seen the example
      of an
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      block element for inline contents.
      This configuration line specifies that the contents
      must be PCDATA.
      PCDATA allows text, but not child elements.
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_pcdata included in GRP_block
&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
      The result:
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;acme&amp;gt;
      -during-&amp;lt;/acme&amp;gt;&amp;lt;p&amp;gt;
      &amp;lt;span&amp;gt;
        -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;
      -new block-
    &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;p&gt;
      Note here that the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      tag ends as soon as another element is encountered.
    &lt;/p&gt;&lt;h4&gt;
      An empty block element&lt;/h4&gt;
    &lt;p&gt;
      The final restriction on the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element is the insistance that it be empty:
      &lt;!-- examples/acme-block-empty.out --&gt;
    &lt;/p&gt;&lt;blockquote&gt;
      &lt;pre&gt;
ELE_acme is a FLO_empty included in GRP_block
&lt;/pre&gt;&lt;/blockquote&gt;
      &lt;p&gt;
        And here is our result:&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;pre&gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;acme&amp;gt;
    &amp;lt;/acme&amp;gt;&amp;lt;p&amp;gt;
      -during-&amp;lt;span&amp;gt;
        -more inline stuff-&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;
      -new block-
    &amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/blockquote&gt;
    &lt;h3&gt;
      Displayed effects&lt;/h3&gt;
    &lt;p&gt;
      Any of these different configurations of
      the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      tag could have a dramatic effect on what is displayed,
      depending on your CSS file.
      Whether or not
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      is a block element also affects
      what is displayed.
      When
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      is a block element,
      its boundaries will typically display as paragraph breaks.
    &lt;/p&gt;
    &lt;p&gt;
      In the above examples,
      the case where
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      is configured as a block element containing PCDATA
      typically displays as three paragraphs:
    &lt;/p&gt;&lt;pre&gt;
-during-

-more inline stuff-

-new block-
&lt;/pre&gt;
    &lt;!-- html_fmt: Next line is cruft --&gt;
    &lt;/p&gt;
    &lt;p&gt;
      In the other cases, the end boundary of the
      &lt;code&gt;
        &amp;lt;acme&amp;gt;&lt;/code&gt;
      element varies,
      but always coincides with the beginning or
      end of other block elements,
      so that the visible display is as
      two paragraphs:
    &lt;/p&gt;&lt;pre&gt;
-during- -more inline stuff-

-new block-
&lt;/pre&gt;
    &lt;!-- html_fmt: Next line is cruft --&gt;
    &lt;/p&gt;
    &lt;h3&gt;
      Final remarks&lt;/h3&gt;&lt;p&gt;
      The configurable Marpa::R2::HTML does considerably more than
      could be mentioned in this post.
      I hope to say more about it soon.
      Comments on this post can be sent to the Marpa Google Group:
      &lt;code&gt;
        marpa-parser@googlegroups.com&lt;/code&gt;
    &lt;/p&gt;</description>
  </item>
  <item>
    <title>Parsing on your new hyper-quantum computer</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/quantum.html</link>
    <description>    &lt;blockquote&gt;
      &lt;!--
      perl ./marpa_r2_html_fmt
      --&gt;
      &lt;i&gt;
        If you want to build a ship, don't drum up the men to gather wood,
        divide the work and give orders. Instead, teach them to yearn for
        the vast and endless sea.&lt;/i&gt;
      -- Antoine de Saint-Exupery
    &lt;/blockquote&gt;
    &lt;p&gt;
      Imagine that, the day the new machine arrives,
      you are maintaining a parser.
      Your parser
      is the current state of the art
      -- hand-written recursive descent.
    &lt;/p&gt;&lt;p&gt;
    &lt;/p&gt;
    The new computer will
    replace your staid old von Neumann box is not
    just a quantum computer.
    It's fully non-deterministic.
    You can superposition any time you'd like,
    and then &quot;unsuperposition&quot; to restart.
    And when superpositioning, you can can examine
    &lt;strong&gt;
      all&lt;/strong&gt;
    the possibilities, not just one.
    &lt;p&gt;
      How would you rewrite your
      recursive descent logic to take advantage of this new hyper-quantum computer?
      Actually, this is exactly the same question that
      &lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
        Marpa&lt;/a&gt;
      poses
      to you today.
      Because for all classes of grammar in practical use, including
      the LL(k) grammars parseable by recursive descent,
      &lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
        Marpa&lt;/a&gt;
      is efficient non-determinism.
    &lt;/p&gt;
    &lt;p&gt;
      Your new hyper-quantum computer
      might seem at first to make your work as a programmer harder.
      On the hyper-quantum computer,
      many things are happening at once.
      On the deterministic box,
      you were dealing with a single procedural thread.
    &lt;/p&gt;
    &lt;p&gt;
      But as you get used to the new non-deterministic computer,
      you find ways in which it makes things easier.
      On the deterministic box,
      you only needed to follow a single thread,
      but you often needed to make that thread
      deal with multiple alternatives.
      To do this, you had to create
      state information and keep track of it yourself
      while backtracking.
      The complexity of dealing with
      all this roll-your-own state
      information severely limited the kinds of grammar that you could parse,
      and even the extent to which you understood exactly what your parser
      would and would not accept.
      Since much of the time on your old parser was spent
      backtracking,
      you no longer had a real handle on the
      time complexity in many sections of your code.
      In a couple of previous releases,
      minor changes had let the backtracking get out of hand.
    &lt;/p&gt;
    &lt;p&gt;
      The hyper-quantum computer
      now comes up with the parsing
      alternatives for you.
      True, you have to retrain yourself to think in terms of the alternatives
      available at any point.
      But you don't even have to know which alternatives are there --
      if you need to ask the hyper-quantum computer (or
      &lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
        Marpa&lt;/a&gt;),
      &lt;a href=&quot;https://metacpan.org/module/Marpa::R2::Progress&quot;&gt;
        it can tell you&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      You do have to learn to ask the right questions
      at the right places.
      Once you do this,
      you have a simpler and more cleanly written parser,
      running at comparable or faster speeds.
      And you begin to think about a few changes to
      the language,
      changes that will make your language more
      natural and expressive,
      but one which
      you could not have parsed before.
    &lt;/p&gt;</description>
  </item>
  <item>
    <title>A Marpa-based HTML reformatter</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/html_fmt.html</link>
    <description>    &lt;p&gt;
      &lt;!--
      perl ./marpa_r2_html_fmt
      --&gt;
      This post is about
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;,
      a
      &lt;a href=&quot;http://jeffreykegler.github.com/Marpa/&quot;&gt;
        Marpa-&lt;/a&gt;based
      reformatter (&quot;tidier&quot;) for liberal HTML.
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      indents HTML according to the structure of the document,
      which makes the HTML a lot easier to read.
      In the process
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      adds missing start and end tags and identifies &quot;cruft&quot;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is ultra-liberal about its input.
      Like a browser's rendering engine,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      never rejects a file,
      no matter how defective it is as an HTML document.
      An interesting experiment would be to compare what your
      favorite browser does with a random text file feed to
      it directly,
      with what it does to the same file
      after it has been passed through
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is a by-product of moving
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/&quot;&gt;
        this blog to Github&lt;/a&gt;.
      In the course of bringing over
      &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/metapages/chronological.html&quot;&gt;
        my old posts&lt;/a&gt;,
      I wanted a filter that would tidy them up,
      so I turned to an old demo script I'd written.
      The old demo's usefulness was a pleasant surprise,
      but it lacked two features.
      First, it wouldn't read from standard input.
      Second, in formatting the HTML, it introduced new whitespace.
      The first problem was easy to fix.
      Fixing the second involved coming up with a
      &quot;lowest common denominator&quot; for whitespace treatment
      among browsers and HTML variants.
    &lt;/p&gt;
    &lt;p&gt;
      The result,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;,
      works very well as the first step in dealing with HTML
      that you are rewriting by hand.
      One quick pass-through and your file is much easier to read,
      has all the proper tags,
      and has comments pointing out any &quot;cruft&quot; that's there.
    &lt;/p&gt;
    &lt;p&gt;
      A production quality &quot;tidier&quot; would need to be something like
      &lt;tt&gt;
        gnuindent&lt;/tt&gt;
      --
      bristling with options.
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      so far has only two options,
      one dealing with whitespace before end tags,
      the other allowing
      a choice of strategies for avoiding added whitespace.
      (One strategy uses comments, while the other simply leaves
      the whitespace-sensitive locations as-is.)
      These two options are not nearly
      sufficient to deal with the full
      range of whitespace issues,
      never mind anything else.
    &lt;/p&gt;
    &lt;p&gt;
      But from a
      &lt;a href=&quot;http://blog.plover.com/oops/blosxom-sux.html&quot;&gt;
        &quot;Worse is Better&quot;&lt;/a&gt;
      point of view,
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is a good start.
      It is 600 lines,
      short enough to find your
      way around in,
      particularly once you've deleted the parts you don't like.
      And its underlying Marpa-based interface is documented:
      &lt;a href=&quot;https://metacpan.org/module/Marpa::R2::HTML&quot;&gt;
        Marpa::R2::HTML&lt;/a&gt;.
      Marpa::R2::HTML is beta, but has been stable for some time.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;a href=&quot;https://gist.github.com/3725639&quot;&gt;
      &lt;tt&gt;
        html_fmt&lt;/tt&gt;
      is now available as a gist.&lt;/a&gt;
      In a future release of
      &lt;a href=&quot;https://metacpan.org/release/Marpa-R2&quot;&gt;
        Marpa::R2&lt;/a&gt;,
      it will be available as the
      &lt;tt&gt;
        marpa_r2_html_fmt&lt;/tt&gt; script.
      But why wait until then to fork it?
    &lt;/p&gt;</description>
  </item>
  </channel>
</rss>
