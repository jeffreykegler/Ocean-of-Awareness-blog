<?xml version="1.0"?>
<!-- name="generator" content="blosxom/2.0" -->
<!DOCTYPE rss PUBLIC "-//Netscape Communications//DTD RSS 0.91//EN" "http://my.netscape.com/publish/formats/rss-0.91.dtd">

<rss version="0.91">
  <channel>
    <title>Ocean of Awareness   </title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog</link>
    <description>Ocean of Awareness.</description>
    <language>en</language>

  <item>
    <title>Sherlock Holmes and the Case of the Missing Parsing Solution</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2019/03/methodology.html</link>
    <description>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
    &lt;blockquote&gt;Always approach a case with an absolutely blank mind.
      It is always an advantage.
      Form no theories, just simply observe and draw inferences from your observations.
      &amp;mdash;
      &lt;cite&gt;
        Sherlock Holmes, quoted in &quot;The Adventure of the Cardboard Box&quot;&lt;cite&gt;.
        &lt;/cite&gt;&lt;/cite&gt;&lt;/blockquote&gt;
    &lt;blockquote&gt;It is a capital mistake to theorize before one has data.
      &amp;mdash;
      &lt;cite&gt;
        Holmes, in &quot;A Scandal in Bohemia&quot;&lt;/cite&gt;.
    &lt;/blockquote&gt;
    &lt;blockquote&gt;I make a point of never having any prejudices, and of following docilely wherever fact may lead me.
      &amp;mdash;
      Holmes, in &lt;cite&gt;&quot;The Reigate Puzzle&quot;&lt;/cite&gt;.
    &lt;/blockquote&gt;
    &lt;blockquote&gt;When you have eliminated the impossible, whatever remains, no matter how improbable, must be the truth.
      &amp;mdash;
      Holmes, in &lt;cite&gt;&quot;The Sign of Four&quot;&lt;/cite&gt;.
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
      In imagination there
      exists the perfect
      mystery story.
      Such a story presents
      the essential clues, and compels us to form our own
      theory of the case.
      If we
      follow the plot carefully, we arrive at the complete
      solution for ourselves just before the author's disclosure
      at the end of the book. The solution itself, contrary to
      those of inferior mysteries, does not disappoint us;
      moreover, it appears at the very moment we expect it.
      Can we liken the reader of such a book to the scientists,
      who throughout successive generations continue to seek
      solutions of the mysteries in the book of nature? The
      comparison is false and will have to be abandoned later,
      but it has a modicum of justification which may be
      extended and modified to make it more appropriate to
      the endeavour of science to solve the mystery of the
      universe.
      &amp;mdash;
      &lt;cite&gt;Albert Einstein
        and Leopold Infeld&lt;/cite&gt;.&lt;a id=&quot;footnote-1-ref&quot; href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;h2&gt;The Sherlock Holmes approach&lt;/h2&gt;
    &lt;p&gt;I have written
    &lt;a href=&quot;https://jeffreykegler.github.io/personal/timeline_v3&quot;&gt;
    timeline history of parsing theory&lt;/a&gt;.
      It is my most popular writing, but
      it is not without its critics.
      Many of them accuse the timeline of lack of objectivity or of bias.
    &lt;/p&gt;
    &lt;p&gt;
      Einstein assumed his reader's idea of methods of proper investigation,
      in science as elsewhere,
      would be similar to those Conan Doyle's Sherlock Holmes.
      I will follow Einstein's lead in starting there.
    &lt;/p&gt;
    &lt;p&gt;
      The deductions recorded in the Holmes' canon
      often involve
      &lt;b&gt;a lot&lt;/b&gt;
      of theorizing.
      To make it a matter of significance what the dogs in &quot;Silver Blaze&quot; did in the night,
      Holmes needs a theory of canine behavior,
      and Holmes' theory sometimes outpaces its pack of facts by a considerable distance.
      Is it really true that only dangerous people own
      dangerous dogs?&lt;a id=&quot;footnote-2-ref&quot; href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;
      Holmes's methods, at least as stated in the Conan Doyle stories,
      are incapable of solving anything
      but the fictional problems he encounters.
      In real life, a &quot;blank mind&quot; can observe nothing.
      There is no &quot;data&quot; without theory, just white noise.
      Every &quot;fact&quot; gathered relies on many prejudgements about what is
      relevant and what is not.
      And you certainly cannot characterize anything as &quot;impossible&quot;,
      unless you have, in advance, a theory about what is possible.
    &lt;/p&gt;
    &lt;h2&gt;The Einstein approach&lt;/h2&gt;
    &lt;p&gt;Einstein, in his popular account
    of the evolution of physics,
      finds the Doyle stories &quot;admirable&quot;&lt;a id=&quot;footnote-3-ref&quot; href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;.
      But to solve real-life mysteries, more is needed.
      Einstein begins his description of his methods at the start
      of his Chapter II:
    &lt;/p&gt;&lt;blockquote&gt;
      The following pages contain a dull report of
      some very simple experiments.
      The account will be boring
      not only because the description of experiments is uninteresting
      in comparison with their actual performance,
      but also because the meaning of the experiments does
      not become apparent until theory makes it so. Our
      purpose is to furnish a striking example of the role of
      theory in physics.
      &lt;a id=&quot;footnote-4-ref&quot; href=&quot;#footnote-4&quot;&gt;[4]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;Einstein follows with a series of the kind of experiments
      that are performed in high school physics classes.
      One might imagine these experiments allowing an observer
      to deduce the basics of electromagnetism
      using materials and techniques available for centuries.
    &lt;/p&gt;
    &lt;p&gt;But, and this is Einstein's point,
      this is not how it happened.
      The theory came
      &lt;b&gt;first&lt;/b&gt;,
      and the experiments were devised afterwards.
    &lt;/p&gt;
    &lt;blockquote&gt;
      In the first pages
      of our book we compared the role
      of an investigator
      to that of a detective who, after
      gathering the requisite facts, finds the right solution
      by pure thinking. In one essential this comparison must
      be regarded as highly superficial. Both in life and in
      detective novels the crime is given. The detective must
      look for letters, fingerprints, bullets, guns, but at least
      he knows that a murder has been committed. This is
      not so for a scientist. It should not be difficult to
      imagine someone who knows absolutely nothing about
      electricity, since all the ancients lived happily enough
      without any knowledge of it. Let this man be given
      metal, gold foil, bottles, hard-rubber rod, flannel, in
      short, all the material required for performing our
      three experiments. He may be a very
      cultured person,
      but he will probably put wine into the bottles, use the
      flannel for cleaning, and never once entertain the idea
      of doing the things we have described.
      For the detective
      the crime is given, the problem formulated: who
      killed Cock Robin?
      The scientist must, at least in part,
      commit his own crime, as well as carry out the investigation.
      Moreover, his task is not to explain just one
      case, but all phenomena which have happened
      or may
      still happen. &amp;mdash; Einstein and Infeld &lt;a id=&quot;footnote-5-ref&quot; href=&quot;#footnote-5&quot;&gt;[5]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;h2&gt;Commiting our own crime&lt;/h2&gt;
    &lt;p&gt;If then,
      we must commit the crime of theorizing before the facts,
      where does out theory come from?
    &lt;/p&gt;
    &lt;blockquote&gt;
    Science is not just a collection of laws,
    a catalogue of unrelated facts.
    It is a creation of the human mind,
    with its freely invented ideas and concepts.
    Physical theories try to form a picture of reality
    and to establish its connection
    with the wide world of sense impressions.
    Thus the only justification for our mental structures
    is whether and in what way our theories form such
    a link. &amp;mdash; Einstein and Infeld &lt;a id=&quot;footnote-6-ref&quot; href=&quot;#footnote-6&quot;&gt;[6]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
      In the case of planets moving around the sun
      it is found that the system of mechanics works
      splendidly.
      Nevertheless we can well imagine that another system,
      based on different assumptions,
      might work just as well.
      &lt;br&gt;
      Physical concepts are free creations
      of the human mind, and are not,
      however, it may seem,
      uniquely determined by the external world.
      In our endeavor to understand reality
      we are somewhat like a man trying
      to understand the mechanism of a closed watch.
      He sees the face and the moving hands,
      even hears its ticking,
      but he has no way of opening the case.
      If he is ingenious
      he may form some picture of a mechanism
      which could be responsible
      for all the things he observes,
      but he may never be quite sure
      his picture is the only one
      which could explain his observations.
      He will never be able
      to compare his picture with the real mechanism
      and he cannot even imagine the possibility
      or the meaning of such a comparison.
      But he certainly believes that,
      as his knowledge increases,
      his picture of reality will become
      simpler and simpler
      and will explain a wider and wider range
      of his sensuous impressions.
      He may also be believe in the existence
      of the ideal limit of knowledge
      and that it is approached
      by the human mind.
      He may call this ideal limit
      the objective truth. -- Einstein and Infeld &lt;a id=&quot;footnote-7-ref&quot; href=&quot;#footnote-7&quot;&gt;[7]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;It may sound as if Einstein believed that the soundness of
    our theories is a matter of faith.
    In fact, Einstein was quite comfortable with putting it
    exactly that way:
    &lt;blockquote&gt;However, it must be admitted
    that our knowledge of these laws is only imperfect
    and fragmentary, so that,
    actually the belief
    in the existence of basic all-embracing laws
    in Nature also rests on a sort of faith.
    All the same this faith has been largely
    justified so far by the success of
    scientific research. &amp;mdash; Einstein &lt;a id=&quot;footnote-8-ref&quot; href=&quot;#footnote-8&quot;&gt;[8]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
    I believe that every true theorist
    is a kind of tamed metaphysicist,
    no matter how pure a &quot;positivist&quot; he may
    fancy himself.
    The metaphysicist believes that the logically
    simple is also the real.
    The tamed metaphysicist believes
    that not all that is logically simple
    is embodied in experienced reality,
    but that the totality of all sensory experience
    can be &quot;comprehended&quot; on the basis of a
    conceptual system built on premises of great
    simplicity.
    The skeptic will say this is a &quot;miracle creed.&quot;
    Admittedly so, but it is a miracle creed
    which has been borne out to an amazing extent by
    the development of science. &amp;mdash; Einstein &lt;a id=&quot;footnote-9-ref&quot; href=&quot;#footnote-9&quot;&gt;[9]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
    The liberty of choice, however,
    is of a special kind;
    it is not in any way similar to the liberty of a
    writer of fiction.
    Rather, it is similar to that of a man engaged
    in solving a well-designed puzzle.
    He may, it is true, propose
    any word as the solution;
    but, there is only &lt;i&gt;one&lt;/i&gt;
    word which really solves the puzzle in all its
    parts.
    It is a matter of faith that nature
    &amp;mdash;
    as she is perceptible to our five senses
    &amp;mdash;
    takes the character of such a
    well-formulated puzzle.
    The successes reaped up to now
    by science do,
    it is true,
    give a certain encouragement for this faith. --
    Einstein &lt;a id=&quot;footnote-10-ref&quot; href=&quot;#footnote-10&quot;&gt;[10]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;p&gt;The puzzle metaphor of the last quote is revealing.
    Einstein believes there is a single truth,
    but that we will never know what it is &amp;mdash;
    even its existence can only be taken as a matter of faith.
    Existence is a crossword puzzle whose answer we will never
    know.
    Even the existence of an answer must be taken as
    a matter of faith.
    &lt;/p&gt;
    &lt;blockquote&gt;
    The very fact that the totality of our sense experience
    is such that by means of thinking
    (operations with concepts,
    and the creation and use of definite functional relations
    between them,
    and the coordination of sense experiences to these concepts)
    it can be put in order,
    this fact is one which leaves us in awe,
    but which we shall never understand.
    One may say that
    &quot;the eternal mystery of the world
    is its comprehensibility&quot;. &amp;mdash; Einstein &lt;a id=&quot;footnote-11-ref&quot; href=&quot;#footnote-11&quot;&gt;[11]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
    In my opinion,
    nothing can be said &lt;i&gt;a priori&lt;/i&gt;
    concerning the manner in which the concepts
    are to be formed and connected,
    and how we are to coordinate them to sense experiences.
    In guiding us in the creation of such an order
    of sense experiences,
    success alone is the determining factor.
    All that is necessary is to fix a set of rules,
    since without such rules the acquisition
    of knowledge in the desired sense would be impossible.
    One may compare these rules with the rules of a game
    in which,
    while the rules themselves are arbitrary,
    it is their rigidity alone which
    makes the game possible.
    However, the fixation will never be final.
    It will have validity only for a special field
    of application. &amp;mdash; Einstein &lt;a id=&quot;footnote-12-ref&quot; href=&quot;#footnote-12&quot;&gt;[12]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
    There are no eternal theories in science.
    It always happens that some of the facts
    predicted by a theory
    are disproved by experiment.
    Every theory has its period of
    gradual development and triumph,
    after which it may experience a
    rapid decline. &amp;mdash; Einstein and Infeld
    &lt;a id=&quot;footnote-13-ref&quot; href=&quot;#footnote-13&quot;&gt;[13]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;/p&gt;
    &lt;blockquote&gt;
    In our great mystery story there are no problems
    wholly solved and settled for all time. &amp;mdash; Einstein and Infeld
    &lt;a id=&quot;footnote-14-ref&quot; href=&quot;#footnote-14&quot;&gt;[14]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;blockquote&gt;
      This great mystery story
      is still
      unsolved.
      We
      cannot
      even be sure that it has a final solution. &amp;mdash;
      Einstein and Infeld &lt;a id=&quot;footnote-15-ref&quot; href=&quot;#footnote-15&quot;&gt;[15]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;h2&gt;Choosing a &quot;highway&quot;&lt;/h2&gt;
    In most of the above,
    Einstein is focusing on his work in a &quot;hard&quot; science: physics.
    Are his methods relevant to &quot;softer&quot; fields of study?
    Einstein thinks so:
    &lt;blockquote&gt;
      The whole of science is nothing
      more than a refinement of everyday thinking.
      It is for this reason that the critical thinking
      of the physicist cannot possibly be restricted to
      the examination of the concepts of his own
      specific field.
      He cannot proceed without considering critically
      a much more difficult problem,
      the problem of analyzing the nature of everyday
      thinking. &amp;mdash; Einstein
      &lt;a id=&quot;footnote-16-ref&quot; href=&quot;#footnote-16&quot;&gt;[16]&lt;/a&gt;
    &lt;/blockquote&gt;
    Einstein's collaboration with Infeld was, like the &quot;Timeline&quot;,
    a description of the evolution of ideas,
    and in the Einstein&amp;ndash;Infeld book they describe their approach:
    &lt;blockquote&gt;
      Through the maze of
      facts and concepts we had to choose some highway
      which seemed to us most characteristic and significant.
      Facts and theories not reached by this road had to be
      omitted. We were forced, by our general aim, to make
      a definite choice of facts and ideas. The importance of a
      problem should not be judged by the number of pages
      devoted to it. Some essential lines of thought have been
      left out, not because they seemed to us unimportant,
      but because they do not lie along the road we have
      chosen. &amp;mdash; Einstein and Infeld &lt;a id=&quot;footnote-17-ref&quot; href=&quot;#footnote-17&quot;&gt;[17]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;h2&gt;Truth and success&lt;/h2&gt;
    &lt;p&gt;Einstein says that objective truth, while
    it exists, is not to be attained in the hard sciences,
    so it is not likely he thought that a historical
    account could outdo physics in this respect.
    For Einstein, as quoted above,
    &quot;success alone is the determining factor&quot;.
    &lt;/p&gt;
    &lt;p&gt;Success, of course, varies with what the audience
    for a theory wants.
    In a very real sense,
    I consider a theory that can predict the
    stock market more successful than
    one which can predict perturbations of planetary orbits
    invisible to the naked eye.
    But this is not a reasonable expectation when applied
    to the theory of general relativity.
    &lt;/p&gt;
    Among the expectations reasonable for a timeline of parsing
    might be these:
    &lt;ul&gt;
    &lt;li&gt;It helps choose the right parsing algoithm for practical
    applications.
    &lt;li&gt;It helps a reader to understand articles in the
    the literature of parsing.
    &lt;li&gt;It helps guide future research.
    &lt;li&gt;It predicts the outcome of future research.
    &lt;/ul&gt;
    &lt;/p&gt;When I wrote the first version of &lt;cite&gt;Timeline&lt;/cite&gt;,
    its goal was none of these.
    Instead I intended it to explain the sources behind my own
    research in the Earley/Leo lineage.
    &lt;/p&gt;
    &lt;p&gt;
    With such a criteria of &quot;success&quot;,
    I wondered if &lt;cite&gt;Timeline&lt;/cite&gt; would have an audience
    much larger than one,
    and was quite surprised when it started getting thousands of
    web hits a day.
      The large audience &lt;cite&gt;Timeline 1.0&lt;/cite&gt; drew
      was a sign that there is an large appetite
      out there for
      accounts of parsing theory,
      an appetite so strong that anything resembling
      a coherent account
      was quickly devoured.
    &lt;p&gt;In response to the unexpectedly large audience,
    later versions of the &lt;cite&gt;Timeline&lt;/cite&gt; widened
    their focus.
      &lt;cite&gt;Timeline 3.1&lt;/cite&gt;
      was broadened to give good coverage
      of mainstream parsing practice,
      including a lot of new material and original analysis.
      This brought in lot of material on topics
      which had little or no influence on my Earley/Leo work.
      The parsing of arithmetic expressions,
      for example,
      is trivial in the Earley/Leo context,
      and before my research for &lt;cite&gt;Timeline 3.0&lt;/cite&gt;
      I had devoted little attention to
      approaches that I felt amounted to
      needlessly doing things the hard way.
      But arithmetic expressions are at the borderline of power
      for traditional approaches
      and parsing arithmetic expressions was a central motivation
      for the authors of the algorithms that have so far
      been most influential on mainstream parsing.
      So in
      &lt;cite&gt;Timeline 3.1&lt;/cite&gt;
      arithmetic expresssions became a recurring theme,
      being brought back for detailed examination time and time again.
    &lt;/p&gt;
    &lt;h2&gt;Is the &quot;Timeline&quot; false?&lt;/h2&gt;
    &lt;p&gt;
      Is the &quot;Timeline&quot; false?
      The answer is yes, in three increasingly practical senses.
    &lt;/p&gt;
    &lt;p&gt;As Einstein makes clear,
    every theory that is about reality,
    will eventually proved be false.
    The best a theory can hope for is the fate of
    Newton's physics &amp;mdash;
    to be shown to be a subcase of a larger theory.
    &lt;/p&gt;
    &lt;p&gt;In a more specific sense,
    the truth of any theory of parsing history depends
    on its degree of success in explaining the facts.
    This means that the truth of the &quot;Timeline&quot; depends on which facts
    you require it to explain.
    If arbitrary choices of facts to be explained are allowed,
    the &quot;Timeline&quot; will certainly be seen to be false.
    &lt;/p&gt;But can the &quot;Timeline&quot; be shown to be false
    for criteria of success which are non-arbitrary?
    In the next section, I will describe four non-arbitrary
    criteria of success,
    all of which are of practical interest,
    and for all of which the &quot;Timeline&quot; is false.
    &lt;/p&gt;
    &lt;h2&gt;The Forever Five&lt;/h2&gt;
    &lt;p&gt;&quot;Success&quot; depends a lot on judgement,
    but my studies have led me to conclude that all but five algorithms
    are &quot;unsuccessful&quot; in the sense that,
    for everything that they do,
    at least one other algorithm does it better in practice.
    But this means there are five algorithms which &lt;b&gt;do&lt;/b&gt; solve
    some practical problems
    better than any other algorithm,
    including each of the other four.
    I call these the &quot;forever five&quot; because,
    if I am correct,
    these algorithms will be of permanent interest.
    &lt;/p&gt;
    &lt;p&gt;
      My &quot;Forever Five&quot; are regular expressions, recursive descent, PEG, Earley/Leo and Sakai's
      algorithm.&lt;a id=&quot;footnote-18-ref&quot; href=&quot;#footnote-18&quot;&gt;[18]&lt;/a&gt;
      Earley/Leo is the focus of my
      &lt;cite&gt;Timeline&lt;/cite&gt;, so that an effective
      critique of my &quot;Timeline&quot;
      could be a parsing historiography centering on any other of the other four.
    &lt;/p&gt;
    &lt;p&gt;For example, of the five, regular expressions are the most limited in parsing power.
      On the other hand, most of the parsing problems you encounter in practice,
      are handled quite nicely by regular expressions.&lt;a id=&quot;footnote-19-ref&quot; href=&quot;#footnote-19&quot;&gt;[19]&lt;/a&gt;
      Good implementations of regular expressions are widely available.
      And, for speed, they are literally unbeatable -- if a parsing problem is a
      regular expression, no other algorithm will beat a dedicated regular expression
      engine for parsing it.
    &lt;/p&gt;
    &lt;p&gt;Could a
      &lt;cite&gt;Timeline&lt;/cite&gt;
      competitor be written which
      centered on regular expressions?
      Certainly.
      And if immediate usefulness to the average programmer is the criterion
      (and it is a very good criterion),
      then the
      &lt;cite&gt;Regular Expressions Timeline&lt;/cite&gt;
      would certainly give
      my timeline a run for the money.
    &lt;/p&gt;
    &lt;h2&gt;What about a PEG Timeline?&lt;/h2&gt;
    &lt;p&gt;
      The immediate impetus for this article was
      &lt;a href=&quot;https://groups.google.com/d/msg/marpa-parser/8EEq92TjR4E/dIzCnsITBQAJ&quot;&gt;a very collegial inquiry&lt;/a&gt;
      from Nicolas Laurent, a researcher whose main interest is PEG.
      Could a
      &lt;cite&gt;PEG Timeline&lt;/cite&gt;
      challenge mine?
      Again, very certainly.
    &lt;/p&gt;
    &lt;p&gt;Because there are at least some
      problems for which PEG is superior to everything else,
      my own Earley/Leo approach included.
      As one example, PEG,
      could be an more powerful alternative to regular expressions.
    &lt;/p&gt;
    &lt;p&gt;That does not mean that I might not come back with
    a counter-critique.
    Among the questions that I might ask:
    &lt;ul&gt;
    &lt;li&gt;
      Is the PEG algorithm being proposed a future,
      or does it have an implementation?
    &lt;/li&gt;
    &lt;li&gt;What claims of speed and time complexity are made?
      Is there a way of determining in advance of runtime how fast
      your algorithm will run?
      Or is the expectation of practical speed
      on an &quot;implement and pray&quot; basis?
    &lt;/li&gt;
    &lt;li&gt;Does the proposed PEG algorithm match human parsing
      capabilities?
      If not, it is a claim for human exceptionalism,
      of a kind not usually accepted in modern computer science.
      How is exceptionalism justified in this case?
    &lt;/li&gt;
    &lt;/ul&gt;
    &lt;blockquote&gt;
    The search for truth is more precious
    than its possession. -- Einstein, quoting Lessing&lt;a id=&quot;footnote-20-ref&quot; href=&quot;#footnote-20&quot;&gt;[20]&lt;/a&gt;
    &lt;/blockquote&gt;
    &lt;h2&gt;Comments, etc.&lt;/h2&gt;
    &lt;p&gt;
      The background material for this post is in my
      &lt;a href=&quot;https://jeffreykegler.github.io/personal/timeline_v3&quot;&gt;
        Parsing: a timeline 3.0&lt;/a&gt;,
      and this post may be considered a supplement to &quot;Timelime&quot;.
      To learn about Marpa,
      my Earley/Leo-based parsing project,
      there is the
      &lt;a href=&quot;http://savage.net.au/Marpa.html&quot;&gt;semi-official web site, maintained by Ron Savage&lt;/a&gt;.
      The official, but more limited, Marpa website
      &lt;a href=&quot;http://jeffreykegler.github.io/Marpa-web-site/&quot;&gt;is my personal one&lt;/a&gt;.
      Comments on this post can be made in
      &lt;a href=&quot;http://groups.google.com/group/marpa-parser&quot;&gt;
        Marpa's Google group&lt;/a&gt;,
      or on our IRC channel: #marpa at freenode.net.
    &lt;/p&gt;
    &lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p id=&quot;footnote-1&quot;&gt;&lt;b&gt;1.&lt;/b&gt;
      Einstein, Albert and Infeld, Leopold,
        &lt;cite&gt;The Evolution of Physics&lt;/cite&gt;,
        Simon and Schuster, 2007, p. 3
 &lt;a href=&quot;#footnote-1-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-2&quot;&gt;&lt;b&gt;2.&lt;/b&gt;
        &quot;A dog reflects the family life.
        Whoever saw a frisky dog in a gloomy family, or a sad dog in a happy one?
        Snarling people have snarling dogs, dangerous people have dangerous ones.&quot;
        From &quot;The Adventure of the Creeping Man&quot;.
 &lt;a href=&quot;#footnote-2-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-3&quot;&gt;&lt;b&gt;3.&lt;/b&gt;
      Einstein and Infeld, p. 4.
 &lt;a href=&quot;#footnote-3-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-4&quot;&gt;&lt;b&gt;4.&lt;/b&gt;
      Einstein and Infeld, p. 71.
 &lt;a href=&quot;#footnote-4-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-5&quot;&gt;&lt;b&gt;5.&lt;/b&gt;
        Einstein and Infeld, p 78.
 &lt;a href=&quot;#footnote-5-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-6&quot;&gt;&lt;b&gt;6.&lt;/b&gt;
    Einstein and Infeld, p. 294.
 &lt;a href=&quot;#footnote-6-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-7&quot;&gt;&lt;b&gt;7.&lt;/b&gt;
      Einstein and Infeld, p. 31.
        See also Einstein,
	&quot;On the Method of Theoretical Physics&quot;,
        &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;,
	Wings Books, New York,
	no publication date, p. 272.
 &lt;a href=&quot;#footnote-7-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-8&quot;&gt;&lt;b&gt;8.&lt;/b&gt;
    Dukas and Hoffman,
    &lt;cite&gt;Albert Einstein: The Human Side&lt;/cite&gt;,
    Princeton University Press, 2013,
    pp 32-33.
 &lt;a href=&quot;#footnote-8-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-9&quot;&gt;&lt;b&gt;9.&lt;/b&gt;
    &quot;On the Generalized Theory of Gravitation&quot;, in
    &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;, p 342.
 &lt;a href=&quot;#footnote-9-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-10&quot;&gt;&lt;b&gt;10.&lt;/b&gt;
    &quot;Physics and Reality&quot;, in
    &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;, pp. 294-295.
 &lt;a href=&quot;#footnote-10-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-11&quot;&gt;&lt;b&gt;11.&lt;/b&gt;
    &quot;Physics and Reality&quot;, in
    &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;,
    p. 292.
 &lt;a href=&quot;#footnote-11-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-12&quot;&gt;&lt;b&gt;12.&lt;/b&gt;
    &quot;Physics and Reality&quot;, in
    &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;,
    p. 292.
 &lt;a href=&quot;#footnote-12-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-13&quot;&gt;&lt;b&gt;13.&lt;/b&gt;
    Einstein and Infeld, p. 75.
 &lt;a href=&quot;#footnote-13-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-14&quot;&gt;&lt;b&gt;14.&lt;/b&gt;
    Einstein and Infeld, p. 35.
 &lt;a href=&quot;#footnote-14-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-15&quot;&gt;&lt;b&gt;15.&lt;/b&gt;
      Einstein and Infeld, pp. 7-8
 &lt;a href=&quot;#footnote-15-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-16&quot;&gt;&lt;b&gt;16.&lt;/b&gt;
	&quot;Physics and Reality&quot;,
        &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;, p 290.
 &lt;a href=&quot;#footnote-16-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-17&quot;&gt;&lt;b&gt;17.&lt;/b&gt;
        Einstein and Infeld, p. 78.
 &lt;a href=&quot;#footnote-17-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-18&quot;&gt;&lt;b&gt;18.&lt;/b&gt;
        Three quibbles:
        Regular expressions do not find structure,
        so pedantically they are recognizers,
        not parsers.
        Recursive descent is technique for creating a family of algorithms,
        not an algorithm.
        The algorithm first described by Sakai is more commonly
        called CYK, from the initials of three other researchers who re-discovered
        it over the years.
 &lt;a href=&quot;#footnote-18-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-19&quot;&gt;&lt;b&gt;19.&lt;/b&gt;
      A lot of this is because programmers learn to formulate problems in
      ways which avoid complex parsing so that the alternatives are
      using regular expressions or rationalizing away the
      need for parsing.
 &lt;a href=&quot;#footnote-19-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-20&quot;&gt;&lt;b&gt;20.&lt;/b&gt;
    &quot;The Fundaments of Theoretical Physics&quot;, in
    &lt;cite&gt;Ideas and Opinions&lt;/cite&gt;, p. 335.
 &lt;a href=&quot;#footnote-20-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  <item>
    <title>Parsing Timeline 3.1</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/10/timeline_3_1.html</link>
    <description>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body style=&quot;max-width:850px&quot;&gt;
    &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
    &lt;p&gt;
    &lt;h2&gt;Announcing Timeline 3.1&lt;/h2&gt;
    &lt;p&gt;I have just released
    &lt;a href=
    &quot;https://jeffreykegler.github.io/personal/timeline_v3&quot;&gt;
    version 3.1 of my Parsing Timeline&lt;/a&gt;.
    It is a painless introduction to
    a fascinating and important story
    which is scattered among
    one of the most
    forbidding literatures in computer science.
    Previous versions of this timeline have been,
    by far,
    the most popular of my writings.
    &lt;/p&gt;
    &lt;p&gt;A third of Timeline 3.1 is new,
    added since the 3.0 version.
    Much of the new material is adapted from previous
    blog posts, both old and recent.
    Other material is completely new.
    The sections that are not new with 3.1
    has been carefully reviewed and
    heavily revised.
    &lt;/p&gt;
    &lt;h2&gt;Comments, etc.&lt;/h2&gt;
    &lt;p&gt;My interest in parsing stems from my 
    own approach to it -- a parser in the Earley/Leo
    lineage named Marpa.
    To learn more about Marpa,
      a good first stop is the
      &lt;a href=&quot;http://savage.net.au/Marpa.html&quot;&gt;semi-official web site, maintained by Ron Savage&lt;/a&gt;.
      The official, but more limited, Marpa website
      &lt;a href=&quot;http://jeffreykegler.github.io/Marpa-web-site/&quot;&gt;is my personal one&lt;/a&gt;.
      Comments on this post can be made in
      &lt;a href=&quot;http://groups.google.com/group/marpa-parser&quot;&gt;
        Marpa's Google group&lt;/a&gt;,
      or on our IRC channel: #marpa at freenode.net.
    &lt;/p&gt;
    &lt;!--
    No footnotes in this one !!!
    &lt;h2&gt;Footnotes&lt;/h2&gt;
    --&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  <item>
    <title>Measuring language popularity</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/10/popularity.html</link>
    <description>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body style=&quot;max-width:850px&quot;&gt;
    &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
    &lt;h2&gt;Language popularity&lt;/h2&gt;
    &lt;p&gt;
      &lt;a href=&quot;https://github.com/github/linguist&quot;&gt;Github's
        linguist&lt;/a&gt;
      is seen as the most trustworthy tool
      for estimating language popularity&lt;a id=&quot;footnote-1-ref&quot; href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;,
      in large part because it reports its result as
      the proportion of code in a very large dataset,
      instead of web hits or searches.&lt;a id=&quot;footnote-2-ref&quot; href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;
      It is ironic, in this context,
      that
      &lt;tt&gt;linguist&lt;/tt&gt;
      avoids looking at the code,
      preferring to use
      metadata -- file name and the vim and shebang lines.
      Scanning the actual code is &lt;tt&gt;linguist&lt;/tt&gt;'s last resort.&lt;a id=&quot;footnote-3-ref&quot; href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;How accurate is this?
      For files that are mostly in a single programming language,
      currently the majority of them,
      &lt;tt&gt;linguist&lt;/tt&gt;'s method are probably very accurate.
    &lt;/p&gt;
    &lt;p&gt;But literate programming often requires mixing languages.
      It is perhaps an extreme example,
      but much of the code used in this blog post
      comes from a Markdown file, which contains both C and Lua.
      This code is &quot;untangled&quot; from the Lua by ad-hoc scripts&lt;a id=&quot;footnote-4-ref&quot; href=&quot;#footnote-4&quot;&gt;[4]&lt;/a&gt;.
      In my codebase,
      &lt;tt&gt;linguist&lt;/tt&gt;
      indentifies this code simply
      as Markdown.&lt;a id=&quot;footnote-5-ref&quot; href=&quot;#footnote-5&quot;&gt;[5]&lt;/a&gt;
      &lt;tt&gt;linguist&lt;/tt&gt;
      then ignores it,
      as it does all documentation files.&lt;a id=&quot;footnote-6-ref&quot; href=&quot;#footnote-6&quot;&gt;[6]&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;Currently, this kind of homegrown
      literate programming may be so rare
      that it is not worth taking into account.
      But if literate programming becomes more popular,
      that trend might well slip under
      &lt;tt&gt;linguist&lt;/tt&gt;'s radar.
      And even those with a lot of faith in
      &lt;tt&gt;linguist&lt;/tt&gt;'s numbers should be happy to
      know they could be confirmed by more careful methods.
    &lt;/p&gt;
    &lt;h2&gt;Token-by-token versus line-by-line&lt;/h2&gt;
    &lt;p&gt;&lt;tt&gt;linguist&lt;/tt&gt; avoids reporting results based on looking at the code,
    because careful line counting for multiple languages
      cannot be done with traditional parsing methods.&lt;a id=&quot;footnote-7-ref&quot; href=&quot;#footnote-7&quot;&gt;[7]&lt;/a&gt;
      To do careful line counting,
      a parser must be able to handle ambiguity in several forms --
      ambiguous parses, ambiguous tokens, and overlapping variable-length tokens.
    &lt;/p&gt;
    &lt;p&gt;
      The ability to deal with
      &quot;overlapping variable-length tokens&quot; may sound like a bizarre requirement,
      but it is not.
      Line-by-line languages (BASIC, FORTRAN, JSON, .ini files, Markdown)
      and token-by-token languages (C, Java, Javascript, HTML)
      are both common,
      and even today commonly occur in the same file (POD and Perl,
      Haskell's Bird notation, Knuth's CWeb).
    &lt;/p&gt;
    &lt;p&gt;
      Deterministic parsing can switch back and forth,
      though at the cost of some very hack-ish code.
      But for careful line counting,
      you need to parse line-by-line and token-by-token
      simultaneously.
      Consider this example:
    &lt;/p&gt;
    &lt;pre&gt;&lt;tt&gt;
    int fn () { /* for later
\begin{code}
   */ int fn2(); int a = fn2();
   int b = 42;
   return  a + b; /* for later
\end{code}
*/ }
    &lt;/tt&gt;&lt;/pre&gt;
    &lt;p&gt;A reader can imagine that this code is part of a test case using code
      pulled from a LaTeX file.
      The programmer wanted to indicate the copied portion of code,
      and did so by commenting out its original LaTeX delimiters.
      GCC compiles this code without warnings.
    &lt;/p&gt;
    &lt;p&gt;It is not really the case that LaTeX is a line-by-line language.
      But in literate programming systems&lt;a id=&quot;footnote-8-ref&quot; href=&quot;#footnote-8&quot;&gt;[8]&lt;/a&gt;,
      it is usually required that the
      &lt;tt&gt;\begin{code}&lt;/tt&gt;
      and
      &lt;tt&gt;\end{code}&lt;/tt&gt;
      delimiters begin at column 0,
      and that the code block between them be a set of whole lines so,
      for our purposes in this post,
      we can treat LaTeX as line-by-line.
      For LaTeX, our parser finds
    &lt;/p&gt;&lt;pre&gt;&lt;tt&gt;
  L1c1-L1c29 LaTeX line: &quot;    int fn () { /* for later&quot;
  L2c1-L2c13 \begin{code}
  L3c1-L5c31 [A CODE BLOCK]
  L6c1-L6c10 \end{code}
  L7c1-L7c5 LaTeX line: &quot;*/ }&quot;&lt;a id=&quot;footnote-9-ref&quot; href=&quot;#footnote-9&quot;&gt;[9]&lt;/a&gt;
&lt;/tt&gt;&lt;/pre&gt;&lt;p&gt;
      Note that in the LaTeX parse, line alignment is respected perfectly:
      The first and last are ordinary LaTeX lines,
      the 2nd and 6th are commands bounding the code,
      and lines 3 through 5 are a code block.
    &lt;/p&gt;
    &lt;p&gt;
      The C tokenization, on the other hand,
      shows no respect for lines.
      Most tokens are a small part of their line,
      and the two comments start in the middle of
      a line and end in the middle of one.
      For example, the first comment starts at column 17
      of line 1 and ends at column 5 of line 3.&lt;a id=&quot;footnote-10-ref&quot; href=&quot;#footnote-10&quot;&gt;[10]&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;What language is our example in?
    Our example is long enough to justify classification,
    and it compiles as C code.
    So it seems best to classify this example as C code&lt;a id=&quot;footnote-11-ref&quot; href=&quot;#footnote-11&quot;&gt;[11]&lt;/a&gt;.
    Our parses give us enough data for a heuristic
    to make a decision capturing this intuition.&lt;a id=&quot;footnote-12-ref&quot; href=&quot;#footnote-12&quot;&gt;[12]&lt;/a&gt;
    &lt;/p&gt;
    &lt;h2&gt;Earley/Leo parsing and combinators&lt;/h2&gt;
    &lt;p&gt;In a series of previous posts&lt;a id=&quot;footnote-13-ref&quot; href=&quot;#footnote-13&quot;&gt;[13]&lt;/a&gt;,
      I have been developing a parsing method that
      integrates
      Earley/Leo parsing and combinator parsing.
      Everything in my previous posts is available
      in &lt;a href=
      &quot;https://metacpan.org/pod/distribution/Marpa-R2/pod/Marpa_R2.pod&quot;
      &gt;Marpa::R2&lt;/a&gt;,
      which was Debian stable as of jessie.
    &lt;/p&gt;
    &lt;p&gt;
      The final piece, added in this post, is the
      ability to use variable length subparsing&lt;a id=&quot;footnote-14-ref&quot; href=&quot;#footnote-14&quot;&gt;[14]&lt;/a&gt;,
      which I have just added to Marpa::R3,
      Marpa::R2's successor.
      Releases of &lt;a href=
      &quot;https://metacpan.org/pod/release/JKEGL/Marpa-R3-4.001_053/pod/Marpa_R3.pod&quot;
      &gt;Marpa::R3&lt;/a&gt;
      pass a full test suite,
      and the documentation is kept up to date,
      but R3 is alpha, and the usual cautions&lt;a id=&quot;footnote-15-ref&quot; href=&quot;#footnote-15&quot;&gt;[15]&lt;/a&gt;
      apply.
    &lt;/p&gt;
    &lt;p&gt;Earley/Leo parsing is linear for a superset
    of the LR-regular grammars,
    which includes all other grammar classes in practical use,
    and Earley/Leo allows the equivalent of infinite lookahead.&lt;a id=&quot;footnote-16-ref&quot; href=&quot;#footnote-16&quot;&gt;[16]&lt;/a&gt;
    When the power of Earley/Leo gives out,
    Marpa allows combinators (subparsers)
    to be invoked.
    The subparsers can be anything, including
    other Earley/Leo parsers,
    and they can be called recursively&lt;a id=&quot;footnote-17-ref&quot; href=&quot;#footnote-17&quot;&gt;[17]&lt;/a&gt;.
    Rare will be the grammar of practical interest that
    cannot be parsed with this combination of methods.
    &lt;/p&gt;
    &lt;h2&gt;The example&lt;/h2&gt;
    &lt;p&gt;The code that ran this example is &lt;a href=
    &quot;https://github.com/jeffreykegler/Marpa--R3/tree/08fa873687130fcfbe199a5f573375ad11322f3a/pub/varlex&quot;
    &gt;available on Github&lt;/a&gt;.
      In previous posts,
      we gave larger examples&lt;a id=&quot;footnote-18-ref&quot; href=&quot;#footnote-18&quot;&gt;[18]&lt;/a&gt;,
      and our tools and techniques have scaled.
      We expect that the variable-length subparsing
      feature will also scale -- while it was not available in
      Marpa::R2, it is not in itself new.
      Variable-length tokens have been available in other Marpa interfaces for
      years and they were described in Marpa's theory paper.&lt;a id=&quot;footnote-19-ref&quot; href=&quot;#footnote-19&quot;&gt;[19]&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      The grammars used in the example of this post are minimal.
      Only enough LaTex is implemented
      to recognize code blocks; and
      only enough C syntax is implemented to recognize comments.
    &lt;/p&gt;
    &lt;h2&gt;The code, comments, etc.&lt;/h2&gt;
    &lt;p&gt;To learn more about Marpa,
      a good first stop is the
      &lt;a href=&quot;http://savage.net.au/Marpa.html&quot;&gt;semi-official web site, maintained by Ron Savage&lt;/a&gt;.
      The official, but more limited, Marpa website
      &lt;a href=&quot;http://jeffreykegler.github.io/Marpa-web-site/&quot;&gt;is my personal one&lt;/a&gt;.
      Comments on this post can be made in
      &lt;a href=&quot;http://groups.google.com/group/marpa-parser&quot;&gt;
        Marpa's Google group&lt;/a&gt;,
      or on our IRC channel: #marpa at freenode.net.
    &lt;/p&gt;
    &lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p id=&quot;footnote-1&quot;&gt;&lt;b&gt;1.&lt;/b&gt;
	This github repo for &lt;tt&gt;linguist&lt;/tt&gt; is &lt;a href=
	&quot;https://github.com/github/linguist/&quot;
	&gt;https://github.com/github/linguist/&lt;/a&gt;.
 &lt;a href=&quot;#footnote-1-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-2&quot;&gt;&lt;b&gt;2.&lt;/b&gt;
	Their methodology is often left vague,
	but it seems safe to say the careful line-by-line counting
	discussed in this post
	goes well beyond the techniques used in
	the widely-publicized lists of &quot;most popular programming
	languages&quot;. 
	&lt;br&gt;&lt;br&gt;
	In fact, it seems likely these measures do not use line
	counts at all,
	but instead report the sum of blob sizes.
	Github's &lt;tt&gt;linguist&lt;/tt&gt; does give a line count but
	Github does not vouch for its accuracy:
&quot;if you really need to know the lines of code of an entire repo, there are much better tools for this than Linguist.&quot;
        (Quoted from
        &lt;a href=
	&quot;https://github.com/github/linguist/issues/3131&quot;
	&gt;the resolution of
	Github linguist issue #1331&lt;/a&gt;.)
	The Github API's &lt;tt&gt;list-languages&lt;/tt&gt; command reports language sizes
	in bytes.
	The &lt;a href=
	  &quot;https://developer.github.com/v3/repos/#list-languages&quot;
	&gt;API documentation&lt;/a&gt;
	is vague, but it seems the counts are the
	sum of blob sizes,
	with each blob classed as one and only one language.
	&lt;br&gt;&lt;br&gt;
	Some tallies seem even more coarsely grained than this --
	they are not even blob-by-blob,
	but assign entire repos to the &quot;primary language&quot;.
	For more, see
        &lt;a href=&quot;https://techcrunch.com/2018/09/30/what-the-heck-is-going-on-with-measures-of-programming-language-popularity/&quot;&gt;
          Jon Evan's
          &lt;cite&gt;Techcrunch&lt;/cite&gt;
          article&lt;/a&gt;;
	  and &lt;a href=
	  &quot;https://www.benfrederickson.com/ranking-programming-languages-by-github-users/&quot;
	  &gt;Ben Frederickson's project&lt;/a&gt;.
 &lt;a href=&quot;#footnote-2-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-3&quot;&gt;&lt;b&gt;3.&lt;/b&gt;
        &lt;tt&gt;linguist&lt;/tt&gt;'s methodology is described in its README.md
	(&lt;a href=
	&quot;https://github.com/github/linguist/blob/8cd9d744caa7bd3920c0cb8f9ca494ce7d8dc206/README.md&quot;
	&gt;permalink as of 30 September 2018&lt;/a&gt;).
 &lt;a href=&quot;#footnote-3-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-4&quot;&gt;&lt;b&gt;4.&lt;/b&gt;
        This custom literate programming system is not documented or packaged,
	but those who cannot resist taking a look can find the Markdown
	file it processes &lt;a href=
	&quot;https://github.com/jeffreykegler/Marpa--R3/blob/f16ef5798986da69fa8b437edc3930ce2cebd498/cpan/kollos/kollos.md&quot;
	&gt;here&lt;/a&gt;,
	and its own code &lt;a href=
	&quot;https://github.com/jeffreykegler/Marpa--R3/blob/f16ef5798986da69fa8b437edc3930ce2cebd498/cpan/kollos/miranda&quot;&gt;
	here&lt;/a&gt;
	(permalinks accessed 2 October 2018).
 &lt;a href=&quot;#footnote-4-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-5&quot;&gt;&lt;b&gt;5.&lt;/b&gt;
        For those who care about getting
        &lt;tt&gt;linguist&lt;/tt&gt;
        as
        accurate as possible.
        there is a workaround:
        the
        &lt;tt&gt;linguist-language&lt;/tt&gt;
        git attribute.
        This still requires that each blob be 
	reported as containing lines of only one language.
 &lt;a href=&quot;#footnote-5-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-6&quot;&gt;&lt;b&gt;6.&lt;/b&gt;
        For the treatment of Markdown, see
        &lt;tt&gt;linguist&lt;/tt&gt;
        &lt;a href=&quot;https://github.com/github/linguist/blob/8cd9d744caa7bd3920c0cb8f9ca494ce7d8dc206/README.md#my-repository-isnt-showing-my-language&quot;&gt;README.md&lt;/a&gt;
        (permalink accessed as of 30 September 2018).
 &lt;a href=&quot;#footnote-6-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-7&quot;&gt;&lt;b&gt;7.&lt;/b&gt;
        Another possibility is a multi-scan approach -- one
        pass per language.
        But that is likely to be expensive.
        At last count there were 381 langauges in
        &lt;tt&gt;linguist&lt;/tt&gt;'s
        database.
        Worse, it won't solve the problem:
        &quot;liberal&quot; recognition even of a single language
        requires more power than available from
        traditional parsers.
 &lt;a href=&quot;#footnote-7-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-8&quot;&gt;&lt;b&gt;8.&lt;/b&gt;
      For example, these line-alignment requirements match 
      those in
      &lt;a href=
      &quot;https://www.haskell.org/onlinereport/haskell2010/haskellch10.html&quot;
      &gt;Section 10.4&lt;/a&gt; of the 2010 Haskell Language Report.
 &lt;a href=&quot;#footnote-8-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-9&quot;&gt;&lt;b&gt;9.&lt;/b&gt;
  Adapted from
  &lt;a href=
  &quot;https://github.com/jeffreykegler/Marpa--R3/blob/08fa873687130fcfbe199a5f573375ad11322f3a/pub/varlex/idlit_ex2.t#L83&quot;
  &gt;test code in Github repo&lt;/a&gt;, permalink accessed 2 October 2018.
 &lt;a href=&quot;#footnote-9-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-10&quot;&gt;&lt;b&gt;10.&lt;/b&gt;
      See the &lt;a href=
      &quot;https://github.com/jeffreykegler/Marpa--R3/blob/08fa873687130fcfbe199a5f573375ad11322f3a/pub/varlex/idlit_ex2.t#L44&quot;
      &gt;test file&lt;/a&gt;
      on Gihub.
 &lt;a href=&quot;#footnote-10-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-11&quot;&gt;&lt;b&gt;11.&lt;/b&gt;
    Some might think the two LaTex lines should be counted as LaTex and,
    using subparsing of comments, that heuristic can be implemented.
 &lt;a href=&quot;#footnote-11-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-12&quot;&gt;&lt;b&gt;12.&lt;/b&gt;
    To be sure, a useful tool would want to include considerably more of
    C's syntax.
    It is perhaps not necessary to be sure that a file compiles
    before concluding it is C.
    And we might want to class a file as C in spite of a
    fleeting failure to compile.
    But we do want to lower the probably of a false positive.
 &lt;a href=&quot;#footnote-12-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-13&quot;&gt;&lt;b&gt;13.&lt;/b&gt;
    &lt;a href=
    &quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/csg.html&quot;
    &gt;Marpa and procedural parsing&lt;/a&gt;;
    &lt;a href=
    &quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator.html&quot;
    &gt;Marpa and combinator parsing&lt;/a&gt;;
    and &lt;a href=
    &quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html&quot;
    &gt;Marpa and combinator parsing 2&lt;/a&gt;
 &lt;a href=&quot;#footnote-13-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-14&quot;&gt;&lt;b&gt;14.&lt;/b&gt;
      There is &lt;a href=
      &quot;https://metacpan.org/pod/distribution/Marpa-R2/pod/Marpa_R2.pod&quot;
      &gt;documentation of the interface&lt;/a&gt;,
      but it is not a good starting point
      for a reader who has just started to look at the Marpa::R3 project.
      Once a user is familiar with Marpa::R3 standard DSL-based
      interface,
      they can start to learn about its alternatives &lt;a href=
      &quot;https://metacpan.org/pod/release/JKEGL/Marpa-R3-4.001_053/pod/External/Basic.pod&quot;
      &gt;here&lt;/a&gt;.
 &lt;a href=&quot;#footnote-14-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-15&quot;&gt;&lt;b&gt;15.&lt;/b&gt;
        Specifically,
	since Marpa::R3 is alpha,
	its features are subject
        to change without notice, even between micro releases,
        and changes are made without concern for backward compatibility.
        This makes R3 unsuitable for a production application.
        Add to this that,
	while R3 is tested, it has seen much less
        usage and testing than R2, which has been very stable for
        some time.
 &lt;a href=&quot;#footnote-15-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-16&quot;&gt;&lt;b&gt;16.&lt;/b&gt;
    Technically, a grammar is LR-regular if it can be parsed
    deterministically using a regular set as its lookahead.
    A &quot;regular set&quot; is a set of regular expressions.
    The regular set itself must be finite,
    but the regular expressions it contains
    can match lookaheads of arbitrary length.
 &lt;a href=&quot;#footnote-16-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-17&quot;&gt;&lt;b&gt;17.&lt;/b&gt;
    See &lt;a href=
    &quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html&quot;
    &gt;Marpa and combinator parsing 2&lt;/a&gt;
 &lt;a href=&quot;#footnote-17-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-18&quot;&gt;&lt;b&gt;18.&lt;/b&gt;
    The largest example is in &lt;a href=
    &quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html&quot;
    &gt;Marpa and combinator parsing 2&lt;/a&gt;
 &lt;a href=&quot;#footnote-18-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-19&quot;&gt;&lt;b&gt;19.&lt;/b&gt;
 Kegler, Jeffrey. &lt;cite&gt;Marpa, A Practical General Parser: The Recognizer&lt;/cite&gt;.
 &lt;a href=
 &quot;http://dinhe.net/~aredridel/.notmine/PDFs/Parsing/KEGLER,%20Jeffrey%20-%20Marpa,%20a%20practical%20general%20parser:%20the%20recognizer.pdf&quot;
&gt;Online version accessed of 24 April 2018&lt;/a&gt;.
The link is to the 19 June 2013 revision of the 2012 original.
 &lt;a href=&quot;#footnote-19-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  <item>
    <title>A Haskell challenge</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/08/rntz.html</link>
    <description>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body style=&quot;max-width:850px&quot;&gt;
    &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
    &lt;h2&gt;The challenge&lt;/h2&gt;
    &lt;p&gt;
    A &lt;a href=&quot;http://www.rntz.net/post/2018-07-10-parsing-list-comprehensions.html&quot;&gt;recent
    blog post by Michael Arntzenius&lt;/a&gt; ended with a friendly challenge to Marpa.
    Haskell list comprehensions are something that
    Haskell's own parser handles only with difficulty.
    A point of Michael's critique of Haskell's parsing was
    that Haskell's list comprehension could be even more powerful if not
    for these syntactic limits.
    &lt;/p&gt;
    Michael wondered aloud if Marpa could do better.
    It can.
    &lt;/p&gt;
    &lt;p&gt;The problem syntax occurs with the &quot;guards&quot;,
    a very powerful facility of
    Haskell's list comprehension.
    Haskell allows several kinds of &quot;guards&quot;.
    Two of these &quot;guards&quot; can have the same prefix,
    and these ambiguous prefixes can
    be of arbitrary length.
    In other words,
    parsing Haskell's list comprehension requires
    either lookahead of arbitrary length,
    or its equivalent.
    &lt;p&gt;
    &lt;p&gt;To answer Michael's challenge,
    I extended my Haskell subset parser to deal with
    list comprehension.
    That parser, with its test examples, is online.&lt;a id=&quot;footnote-1-ref&quot; href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;
    I have run it for examples thousands of tokens long and,
    more to the point,
    have checked the Earley sets to ensure that Marpa
    will stay linear,
    no matter how long the ambiguous prefix gets.&lt;a id=&quot;footnote-2-ref&quot; href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;
    &lt;/p&gt;
    Earley parsing, which Marpa uses,
    accomplishes the seemingly impossible here.
    It does the equivalent of infinite lookahead efficiently,
    without actually doing any lookahead or
    backtracking.
    That Earley's algorithm can do this has been a settled
    fact in the literature for some time.
    But today Earley's algorithm is little known even
    among those well acquainted with parsing,
    and to many claiming the equivalent of infinite lookahead,
    without actually doing any lookahead at all,
    sounds like a boast of magical powers.
    &lt;/p&gt;
    &lt;p&gt;
    In the rest of this blog post,
    I hope to indicate how Earley parsing follows more than
    one potential parse at a time.
    I will not describe Earley's algorithm in full.&lt;a id=&quot;footnote-3-ref&quot; href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;
    But I will show that no magic is involved,
    and that in fact the basic ideas behind Earley's method
    are intuitive and reasonable.
    &lt;/p&gt;
    &lt;h2&gt;A quick cheat sheet on list comprehension&lt;/h2&gt;
    &lt;p&gt;
    List comprehension in Haskell is impressive.
    Haskell allows
    you to build a list using a series of &quot;guards&quot;,
    which can be of several kinds.
    The parsing issue arises because two of the guard types --
    generators and boolean expressions --
    must be treated quite differently,
    but can look the same over an arbitrarily long prefix.
    &lt;/p&gt;
    &lt;h3&gt;Generators&lt;/h3&gt;
    &lt;p&gt;Here is one example of a Haskell generator,
    from the test case for this blog post:
    &lt;/p&gt;
    &lt;pre&gt;&lt;tt&gt;
          list = [ x | [x, 1729,
		      -- insert more here
		      99
		   ] &lt;- xss ] &lt;/tt&gt;&lt;a id=&quot;footnote-4-ref&quot; href=&quot;#footnote-4&quot;&gt;[4]&lt;/a&gt;&lt;/pre&gt;
    &lt;p&gt;
    This says to build a lists of &lt;tt&gt;x&lt;/tt&gt;'s
    such that the guard
    &lt;tt&gt;[x, 1729, 99 ] &amp;lt;- xss&lt;/tt&gt;
    holds.
    The clue that this guard is a generator is the
    &lt;tt&gt;&amp;lt;-&lt;/tt&gt; operator.
    The &lt;tt&gt;&amp;lt;-&lt;/tt&gt; operator
    will appear in every generator,
    and means &quot;draw from&quot;.
    &lt;/p&gt;
    &lt;p&gt;
    The LHS of the &lt;tt&gt;&amp;lt;-&lt;/tt&gt; operator is a pattern
    and the RHS is an expression.
    This generator draws all the elements from &lt;tt&gt;xss&lt;/tt&gt;
    which match the pattern &lt;tt&gt;[x, 1729, 99 ]&lt;/tt&gt;.
    In other words, it draws out
    all the elements of &lt;tt&gt;xss&lt;/tt&gt;,
    and tests that they
    are lists of length 3
    whose last two subelements are 1729 and 99.
    &lt;/p&gt;
    &lt;p&gt;The variable &lt;tt&gt;x&lt;/tt&gt; is set to the 1st subelement.
    &lt;tt&gt;list&lt;/tt&gt; will be a list of all those &lt;tt&gt;x&lt;/tt&gt;'s.
    In the test suite, we have
    &lt;pre&gt;&lt;tt&gt;
    xss = [ [ 42, 1729, 99 ] ] &lt;/tt&gt;&lt;a id=&quot;footnote-5-ref&quot; href=&quot;#footnote-5&quot;&gt;[5]&lt;/a&gt;&lt;/pre&gt;
    &lt;/p&gt;
    so that list becomes &lt;tt&gt;[42]&lt;/tt&gt; -- a list
    of one element whose value is 42.
    &lt;/p&gt;
    &lt;h3&gt;Boolean guards&lt;/h3&gt;
    &lt;p&gt;Generators can share very long prefixes with Boolean guards.
    &lt;pre&gt;&lt;tt&gt;
	list2 = [ x | [x, 1729, 99] &amp;lt;- xss,
               [x, 1729,
                  -- insert more here
                  99
               ] == ys,
             [ 42, 1729, 99 ] &amp;lt;- xss
             ] &lt;/tt&gt;&lt;a id=&quot;footnote-6-ref&quot; href=&quot;#footnote-6&quot;&gt;[6]&lt;/a&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;The expression defining &lt;tt&gt;list2&lt;/tt&gt;
    has 3 comma-separated guards:
    The first guard is a generator,
    the same one as in the previous example.
    The last guard is also a generator.
    &lt;/p&gt;
    &lt;p&gt;
    The middle guard is of a new type: it is a Boolean:
    &lt;tt&gt;[x, 1729, 99 ] == ys&lt;/tt&gt;.
    This guard insists that &lt;tt&gt;x&lt;/tt&gt; be such that the triple
    &lt;tt&gt;[x, 1729, 99 ]&lt;/tt&gt; is equal to &lt;tt&gt;ys&lt;/tt&gt;.
    &lt;/p&gt;
    &lt;p&gt;
    In the test suite, we have
    &lt;pre&gt;&lt;tt&gt;
    ys = [ 42, 1729, 99 ] &lt;/tt&gt;&lt;a id=&quot;footnote-7-ref&quot; href=&quot;#footnote-7&quot;&gt;[7]&lt;/a&gt;&lt;/pre&gt;
    so that &lt;tt&gt;list2&lt;/tt&gt; is also
    &lt;tt&gt;[42]&lt;/tt&gt;.
    &lt;/p&gt;
    &lt;h2&gt;Boolean guards versus generators&lt;/h2&gt;
    &lt;p&gt;From the parser's point of view, Boolean guards
    and generators start out looking the same --
    in the examples above, three of our guards start out
    the same -- with the string &lt;tt&gt;[x, 1729, 99 ]&lt;/tt&gt;,
    but
    &lt;ul&gt;
    &lt;li&gt;in one case (the Boolean guard),
    &lt;tt&gt;[x, 1729, 99 ]&lt;/tt&gt; is the beginning of an expression; and &lt;/li&gt;
    &lt;li&gt;in the other two cases (the generators),
    &lt;tt&gt;[x, 1729, 99 ]&lt;/tt&gt; is a pattern.&lt;/li&gt;
    &lt;/ul&gt;
    Clearly patterns and expressions can look identical.
    And they can look identical for an arbitrarily long time --
    I tested the &lt;a href=&quot;https://www.haskell.org/ghc/&quot;&gt;Glasgow Haskell Compiler&lt;/a&gt;
    (GHC)
    with identical expression/pattern prefixes
    thousands of tokens in length.
    My virtual memory eventually gives out,
    but GHC itself never complains.&lt;a id=&quot;footnote-8-ref&quot; href=&quot;#footnote-8&quot;&gt;[8]&lt;/a&gt;
    (The comments &quot;&lt;tt&gt;insert more here&lt;/tt&gt;&quot; show the points at which the
    comma-separated lists of integers can be extended.)
    &lt;/p&gt;
    &lt;h2&gt;The problem for parsers&lt;/h2&gt;
    &lt;p&gt;So Haskell list comprehension presents a problem for parsers.
    A parser must determine whether it is parsing an expression or
    a pattern, but it cannot know this for an arbitrarily long time.
    A parser must keep track of two possibilities at once --
    something traditional parsing has refused to do.
    As I have pointed out&lt;a id=&quot;footnote-9-ref&quot; href=&quot;#footnote-9&quot;&gt;[9]&lt;/a&gt;,
    belief that traditional parsing &quot;solves&quot; the parsing problem is
    belief in human exceptionalism --
    that human have calculating abilities that Turing machines do not.
    Keeping two possibilites in mind for a long time is trivial for
    human beings -- in one form we call it worrying,
    and try to prevent ourselves from doing it obsessively.
    But it has been the orthodoxy that practical parsing algorithms
    cannot do this.
    &lt;/footnote&gt;
    &lt;/p&gt;
    &lt;p&gt;Arntzenius has a nice summary of the attempts to parse this
    construct while only allowing one possibility at a time --
    that is, determistically.
    Lookahead clearly cannot work -- it would have to be arbitrarily
    long.
    Backtracking can work, but can be very costly
    and is a major obstacle to quality error reporting.
    &lt;/p&gt;
    &lt;p&gt;
    GHC avoids the problems with backtracking by using post-processing.
    At parsing time, GHC treats an ambiguous guard as a
    Boolean.
    Then, if it turns out that is a generator,
    it rewrites it in post-processing.
    This inelegance incurs some real technical debt --
    either a pattern must &lt;b&gt;always&lt;/b&gt; be a valid expression,
    or even more trickery must be resorted to.&lt;a id=&quot;footnote-10-ref&quot; href=&quot;#footnote-10&quot;&gt;[10]&lt;/a&gt;
    &lt;h2&gt;The Earley solution&lt;/h2&gt;
    &lt;/p&gt;
    &lt;p&gt;Earley parsing deals with this issue by doing what 
    a human would do --
    keeping both possibilities in mind at once.
    Jay Earley's innovation was to discover a way for a computer
    to track multiple possible parses
    that is compact,
    efficient to create,
    and efficient to read.
    &lt;/p&gt;
    &lt;p&gt;
    Earley's algorithm maintains an &quot;Earley table&quot;
    which contains &quot;Earley sets&quot;,
    one for each token.
    Each Earley set contains &quot;Earley items&quot;.
    Here are some Earley items from Earley set 25 
    in one of our test cases:&lt;br&gt;
    &lt;pre&gt;&lt;tt&gt;
	origin = 22; &amp;lt;atomic expression&amp;gt; ::=   '[' &amp;ltexpression&amp;gt; '|' . &amp;ltguards&amp;gt; ']'
	origin = 25; &amp;lt;guards&amp;gt; ::= . &amp;lt;guard&lt;&amp;gt;
	origin = 25; &amp;lt;guards&amp;gt; ::= . &amp;lt;guards&amp;gt; ',' &amp;lt;guard&lt;&amp;gt;
	origin = 25; &amp;lt;guard&lt;&amp;gt;  ::= . &amp;lt;pattern&amp;gt; '&amp;lt; &amp;lt;expression&amp;gt;
	origin = 25; &amp;lt;guard&lt;&amp;gt;  ::= . &amp;lt;expression&amp;gt; &lt;/tt&gt;&lt;a id=&quot;footnote-11-ref&quot; href=&quot;#footnote-11&quot;&gt;[11]&lt;/a&gt;&lt;/pre&gt;
     &lt;p&gt;
     In the code, these represent the state of the parse just after
     the pipe symbol (&quot;&lt;tt&gt;|&lt;/tt&gt;&quot;) on line 4 of our test code.
    &lt;/p&gt;
    Each Earley item describes progress in one rule of the grammar.
    There is a dot (&quot;&lt;tt&gt;.&lt;/tt&gt;&quot;) in each rule,
    which indicates how far the parse
    has progressed inside the rule.
    One of the rules has the dot just after the pipe symbol,
    as you would expect, since we have just seen a pipe symbol.
    &lt;/p&gt;
    &lt;p&gt;
    The other four rules have the dot at the beginning of the RHS.
    These four rules are &quot;predictions&quot; -- none of their symbols
    have been parsed yet, but we know that these rules might occur,
    starting at the location of this Earley set.
    &lt;/p&gt;
    &lt;p&gt;
    Each item also records an &quot;origin&quot;: the location in the input where
    the rule described in the item began.
    For predictions the origin is always the same as the Earley set.
    For the first Earley item, the origin is 3 tokens earlier,
    in Earley set 22.
    &lt;/p&gt;
    &lt;p&gt;
    &lt;h2&gt;The &quot;secret&quot; of non-determinism&lt;/h2&gt;
    &lt;p&gt;
    And now we have come to the secret of efficient non-deterministic parsing --
    a &quot;secret&quot;
    which I hope to convince the reader is not magic,
    or even much of a mystery.
    Here, again, are two of the items from Earley set 25:&lt;/p&gt;
    &lt;pre&gt;&lt;tt&gt;
	origin = 25; &amp;lt;guard&lt;&amp;gt;  ::= . &amp;lt;pattern&amp;gt; '&amp;lt; &amp;lt;expression&amp;gt;
	origin = 25; &amp;lt;guard&lt;&amp;gt;  ::= . &amp;lt;expression&amp;gt; &lt;/tt&gt; &lt;a id=&quot;footnote-12-ref&quot; href=&quot;#footnote-12&quot;&gt;[12]&lt;/a&gt;&lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;At this point there are two possibilities going forward --
    a generator guard or a Boolean expression guard.
    And there is an Earley item for each of these possibilities in the Earley set.
    &lt;/p&gt;
    &lt;p&gt;
    That is the basic idea -- that is all there is to it.
    Going forward in the parse, for as long as both possibilities stay
    live, Earley items for both will appear in the Earley sets.
    &lt;/p&gt;
    &lt;p&gt;From this point of view,
    it should now be clear why the Earley algorithm can keep track
    of several possibilities without lookahead or backtracking.
    No lookahead is needed because all possibilities are in the
    Earley set, and selection among them will take place as the
    rest of the input is read.
    And no backtracking is needed because every possibility
    was already recorded -- there is nothing new to be found
    by backtracking.
    &lt;/p&gt;
    &lt;p&gt;It may also be clearer why I claim that Marpa is left-eidetic,
    and how the Ruby Slippers work.&lt;a id=&quot;footnote-13-ref&quot; href=&quot;#footnote-13&quot;&gt;[13]&lt;/a&gt;
    Marpa has perfect knowledge of everything in the parse so far,
    because it is all in the Earley tables.
    And, given left-eidetic knowledge, Marpa also knows what
    terminals are expected at the current location,
    and can &quot;wish&quot; them into existence as necessary.
    &lt;/p&gt;
    &lt;h2&gt;The code, comments, etc.&lt;/h2&gt;
    &lt;p&gt;A permalink to the
    full code and a test suite for this prototype,
    as described in this blog post,
    is
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell&quot;&gt;
    on Github&lt;/a&gt;.
    In particular,
    the permalink of the
    the test suite file for list comprehension is
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp.t&quot;&gt;
    here&lt;/a&gt;.
    I expect to update this code,
    and the latest commit can be found
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/gh-pages/code/haskell&quot;&gt;
    here&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      To learn more about Marpa,
      a good first stop is the
      &lt;a href=&quot;http://savage.net.au/Marpa.html&quot;&gt;semi-official web site, maintained by Ron Savage&lt;/a&gt;.
      The official, but more limited, Marpa website
      &lt;a href=&quot;http://jeffreykegler.github.io/Marpa-web-site/&quot;&gt;is my personal one&lt;/a&gt;.
      Comments on this post can be made in
      &lt;a href=&quot;http://groups.google.com/group/marpa-parser&quot;&gt;
        Marpa's Google group&lt;/a&gt;,
      or on our IRC channel: #marpa at freenode.net.
    &lt;/p&gt;
    &lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p id=&quot;footnote-1&quot;&gt;&lt;b&gt;1.&lt;/b&gt;
    If you are interested in my Marpa-driven Haskell subset parser,
    &lt;a href=&quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html&quot;&gt;
    this blog post&lt;/a&gt;
    may be the best introduction.
    The code is
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/gh-pages/code/haskell&quot;&gt;
    on Github&lt;/a&gt;.
 &lt;a href=&quot;#footnote-1-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-2&quot;&gt;&lt;b&gt;2.&lt;/b&gt;
    The Earley sets for the ambigious prefix immediately reach a size
    of 46 items, and then stay at that level.
    This is experimental evidence that the Earley set
    sizes stay constant.
    &lt;br&gt;&lt;br&gt;
    And, if the Earley items are examined,
    and their derivations traced,
    it can be seen that
    they must repeat the same Earley item count
    for as long as the ambiguous prefix continues.
    The traces I examined are
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp_trace.out&quot;&gt;here&lt;/a&gt;,
    and the code which generated them is
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp_ex.pl&quot;&gt;here&lt;/a&gt;,
    for the
    reader who wants to convince himself.
    &lt;br&gt;&lt;br&gt;
    The guard prefixes of Haskell are ambiguous,
    but (modulo mistakes in the standards)
    the overall Haskell grammar is not.
    In the literature on Earley's,
    it has been shown that for an unambiguous grammar,
    each Earley item has an constant amortized cost in time.
    Therefore,
    if a parse produces
    a Earley sets that are all of less than a constant size,
    it must have linear time complexity.
 &lt;a href=&quot;#footnote-2-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-3&quot;&gt;&lt;b&gt;3.&lt;/b&gt;
    There are many descriptions of Earley's algorithm out there.
    &lt;a href=&quot;https://en.wikipedia.org/wiki/Earley_parser&quot;&gt;The
    Wikipedia page on Earley's algorithm&lt;/a&gt;
    (accessed 27 August 2018)
    is one good place to start.
    I did
    another very simple introduction to Earley's in
    &lt;a href=&quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2010/06/jay-earleys-idea.html&quot;&gt;an
    earlier blog post&lt;/a&gt;,
    which may be worth looking at.
    Note that Marpa contains
    &lt;a href=&quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2011/11/what-is-the-marpa-algorithm.html&quot;&gt;
    improvements to Earley's algorithm&lt;/a&gt;.
    Particularly, to fulfill Marpa's claim of linear time for all
    LR-regular grammars, Marpa uses Joop Leo's speed-up.
    But Joop's improvement is &lt;b&gt;not&lt;/b&gt; necessary or useful
    for parsing
    Haskell list comprehension,
    is not used in this example,
    and will not be described in this post.
 &lt;a href=&quot;#footnote-3-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-4&quot;&gt;&lt;b&gt;4.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp.t#L30&quot;&gt;
    Permalink to this code&lt;/a&gt;,
    accessed 27 August 2018.
 &lt;a href=&quot;#footnote-4-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-5&quot;&gt;&lt;b&gt;5.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp.t#L25&quot;&gt;
    Permalink to this code&lt;/a&gt;,
    accessed 27 August 2018.
 &lt;a href=&quot;#footnote-5-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-6&quot;&gt;&lt;b&gt;6.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp.t#L35&quot;&gt;
    Permalink to this code&lt;/a&gt;,
    accessed 27 August 2018.
 &lt;a href=&quot;#footnote-6-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-7&quot;&gt;&lt;b&gt;7.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp.t#L28&quot;&gt;
    Permalink to this code&lt;/a&gt;,
    accessed 27 August 2018.
 &lt;a href=&quot;#footnote-7-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-8&quot;&gt;&lt;b&gt;8.&lt;/b&gt;
    Note that if the list is extended, the patterns matches and Boolean
    tests fail, so that 42 is no longer the answer.
    From the parsing point of view, this is immaterial.
 &lt;a href=&quot;#footnote-8-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-9&quot;&gt;&lt;b&gt;9.&lt;/b&gt;
    In several places, including
    &lt;a href=&quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/07/knuth_1965_2.html&quot;&gt;
    this blog post&lt;/a&gt;.
 &lt;a href=&quot;#footnote-9-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-10&quot;&gt;&lt;b&gt;10.&lt;/b&gt;
    This account of the state of the art summarizes
    &lt;a href=&quot;http://www.rntz.net/post/2018-07-10-parsing-list-comprehensions.html&quot;&gt;
    Arntzenius's recent post&lt;/a&gt;,
    which should be consulted for the details.
 &lt;a href=&quot;#footnote-10-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-11&quot;&gt;&lt;b&gt;11.&lt;/b&gt;
     Adapted from
     &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp_trace.out#L811&quot;&gt;
     this trace output&lt;/a&gt;,
     accessed 27 August 2018.
 &lt;a href=&quot;#footnote-11-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-12&quot;&gt;&lt;b&gt;12.&lt;/b&gt;
     Adapted from
     &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/0df0aef7d6cb8590d3a33f857619e75f84786dd7/code/haskell/listcomp_trace.out#L811&quot;&gt;
     this trace output&lt;/a&gt;,
     accessed 27 August 2018.
 &lt;a href=&quot;#footnote-12-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-13&quot;&gt;&lt;b&gt;13.&lt;/b&gt;
    For more on the Ruby Slippers see
    my &lt;a href=&quot;http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html&quot;&gt;
    just previous blog post&lt;/a&gt;,
 &lt;a href=&quot;#footnote-13-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  <item>
    <title>Marpa and combinator parsing 2</title>
    <link>http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/05/combinator2.html</link>
    <description>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body style=&quot;max-width:850px&quot;&gt;
    &lt;!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      --&gt;
    &lt;p&gt;
    In
    &lt;a href=&quot;http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/05/combinator.html&quot;&gt;
    a previous post&lt;/a&gt;,
    I outlined a method for using the Marpa algorithm as the basis for
    better combinator parsing.
    This post follows up
    with a trial implementation.
    &lt;/p&gt;
    &lt;p&gt;For this trial,
    I choose the most complex example from the classic 1996 tutorial
    on combinator parsing by 
    Hutton and Meijer&lt;a id=&quot;footnote-1-ref&quot; href=&quot;#footnote-1&quot;&gt;[1]&lt;/a&gt;.
    Their example implements the offside-rule parsing of a functional language --
    parsing where whitespace is part of the syntax.&lt;a id=&quot;footnote-2-ref&quot; href=&quot;#footnote-2&quot;&gt;[2]&lt;/a&gt;
    The Hutton and Meijer example is for Gofer,
    a now obsolete implementation of Haskell.
    To make the example more relevant,
    I wrote a parser for Haskell layout
    according to the Haskell 2010 Language Report&lt;a id=&quot;footnote-3-ref&quot; href=&quot;#footnote-3&quot;&gt;[3]&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;For tests,
    I used the five examples (2 long, 3 short) provided
    in the 2010 Report&lt;a id=&quot;footnote-4-ref&quot; href=&quot;#footnote-4&quot;&gt;[4]&lt;/a&gt;,
    and the four examples given in the &quot;Gentle Introduction&quot; to Haskell&lt;a id=&quot;footnote-5-ref&quot; href=&quot;#footnote-5&quot;&gt;[5]&lt;/a&gt;.
    I implemented only enough of the Haskell syntax to run
    these examples,
    but this was enough to include a substantial subset of Haskell's
    syntax.
    &lt;/p&gt;
    &lt;p&gt;This description of the implementation includes many extracts from
    the code.
    For those looking for more detail,
    the full code and test suite for this example are
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/gh-pages/code/haskell&quot;&gt;
    on Github&lt;/a&gt;.
    While the comments in the code do not amount to a tutorial, they are
    extensive.
    Readers who like to &quot;peek ahead&quot; are encouraged to do so.
    &lt;/p&gt;
    &lt;h2&gt;Layout parsing and the off-side rule&lt;/h2&gt;
    &lt;p&gt;It won't be necessary to know Haskell to follow this post.
    This section will describe Haskell's layout informally.
    Briefly, these two code snippets should have the same effect:
    &lt;pre&gt;&lt;tt&gt;
       let y   = a*b
	   f x = (x+y)/y
       in f c + f d &lt;/tt&gt;&lt;a id=&quot;footnote-6-ref&quot; href=&quot;#footnote-6&quot;&gt;[6]&lt;/a&gt;
     &lt;/pre&gt;
    &lt;pre&gt;&lt;tt&gt;
       let { y   = a*b
	   ; f x = (x+y)/y
	   } &lt;/tt&gt;&lt;a id=&quot;footnote-7-ref&quot; href=&quot;#footnote-7&quot;&gt;[7]&lt;/a&gt;
    &lt;/pre&gt;
    &lt;p&gt;
    In my test suite, both code snippets produce the same AST.
    The first code display uses Haskell's implicit layout parsing,
    and the second code display uses explicit layout.
    In each, the &quot;&lt;tt&gt;let&lt;/tt&gt;&quot; is followed by a block
    of declarations
    (symbol &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt;).
    Each decls contains one or more 
    declarations
    (symbol &lt;tt&gt;&amp;lt;decl&amp;gt;&lt;/tt&gt;).
    For the purposes of determining layout,
    Haskell regards
    &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt; as a &quot;block&quot;,
    and each
    &lt;tt&gt;&amp;lt;decl&amp;gt;&lt;/tt&gt; as a block &quot;item&quot;.
    In both displays, there are two items in
    the block.
    The first item is
    &lt;tt&gt;y = a*b&lt;/tt&gt;,
    and the second
    &lt;tt&gt;&amp;lt;decl&amp;gt;&lt;/tt&gt; item
    is &lt;tt&gt;f x = (x+y)/y&lt;/tt&gt;.
    &lt;/p&gt;
    &lt;p&gt;
    In explicit layout, curly braces surround the block,
    and semicolons separate each
    item.
    Implicit layout follows the &quot;offside rule&quot;:
    The first element of the laid out block
    determines the &quot;block indent&quot;.
    The first non-whitespace character of every subsequent non-empty line
    determines the line indent.
    The line indent is compared to the block indent.
    &lt;ul&gt;
    &lt;li&gt;If the line indent is deeper than the block indent,
    then the line continues the current block item.
    &lt;/li&gt;
    &lt;li&gt;If the line indent is equal to the block indent,
    then the line starts a new block item.
    &lt;/li&gt;
    &lt;li&gt;If the line indent is less than the block indent
    (an &quot;outdent&quot;),
    then the line ends the block.
    An end of file also ends the block.
    &lt;/li&gt;
    &lt;/ul&gt;
    Lines containing only whitespace are ignored.
    Comments count as whitespace.
    &lt;/p&gt;
    &lt;p&gt;
    Explicit semicolons can be used
    in implicit layout:
    If a semicolon occurs in implicit layout,
    it separates block items.
    In our test suite,
    the example
    &lt;pre&gt;&lt;tt&gt;
       let y   = a*b;  z = a/b
	   f x = (x+y)/z
       in f c + f d &lt;/tt&gt;&lt;a id=&quot;footnote-8-ref&quot; href=&quot;#footnote-8&quot;&gt;[8]&lt;/a&gt;
    &lt;/pre&gt;
    contains three 
    &lt;tt&gt;&amp;lt;decl&amp;gt;&lt;/tt&gt; items.
    &lt;/p&gt;
    &lt;p&gt;The examples in the displays above are simple.
    The two long examples from the 2010 Report are
    more complicated:
    6 blocks of 4 different kinds,
    with nesting twice reaching
    a depth of 4.
    The two long examples in the 2010 Report are the same,
    except that one uses implicit layout and the other uses
    explicit layout.
    In the test of my Haskell subset parser,
    both examples produce identical ASTs.
    &lt;/p&gt;
    &lt;p&gt;There are additional rules,
    including for tabs, Unicode characters and
    multi-line comments.
    These rules are not relevant in the examples I took from the Haskell literature;
    they present no theoretical challenge to this parsing method;
    and they are not implemented in this prototype Haskell parser.
    &lt;/p&gt;
    &lt;h2&gt;The strategy&lt;/h2&gt;
    &lt;p&gt;To tackle Haskell layout parsing, I use a separate
    combinator for each layout block.
    Every combinator, therefore, has its own block and item symbols,
    and its own block indent;
    and each combinator implements exactly one method of layout -- explicit or implicit.
    &lt;/p&gt;
    &lt;p&gt;From the point of view of its parent combinator,
    a child combinator is a lexeme,
    and the parse tree it produces is the
    value of the lexeme.
    Marpa can automatically produce an AST,
    and it adds lexeme values to the AST as leaves.
    The effect is that Marpa automatically assembles
    a parse tree for us from the tree segments returned by the
    combinators.
    &lt;/p&gt;
    &lt;h2&gt;Ruby Slippers semicolons&lt;/h2&gt;
    &lt;p&gt;In outlining this algorithm, I will start by explaining
    where the &quot;missing&quot; semicolons come from in the implicit layout.
    Marpa allows various kinds of &quot;events&quot;,
    including on discarded tokens.
    (&quot;Discards&quot; are tokens thrown away, and not used in the parse.
    The typical use of token discarding in Marpa is for the handling of whitespace
    and comments.)
    &lt;/p&gt;
    The following code sets an event named 'indent', which
    happens when Marpa finds a newline followed by zero or more
    whitespace characters.&lt;a id=&quot;footnote-9-ref&quot; href=&quot;#footnote-9&quot;&gt;[9]&lt;/a&gt;
    This does not capture the indent of the first line of a file,
    but that is not an issue --
    the 2010 Report requires that the first indent be treated as a
    special case anyway.
    &lt;pre&gt;&lt;tt&gt;
      :discard ~ indent event =&gt; indent=off
      indent ~ newline whitechars &lt;/tt&gt;&lt;a id=&quot;footnote-10-ref&quot; href=&quot;#footnote-10&quot;&gt;[10]&lt;/a&gt;
      &lt;/pre&gt;
    &lt;p&gt;
    Indent events, like others, occur in the main read loop
    of each combinator.  Outdents and EOFs are dealt with by terminating
    the read loop.&lt;a id=&quot;footnote-11-ref&quot; href=&quot;#footnote-11&quot;&gt;[11]&lt;/a&gt;
    Line indents deeper than the current block indent are dealt with by
    resuming the read loop.  &lt;a id=&quot;footnote-12-ref&quot; href=&quot;#footnote-12&quot;&gt;[12]&lt;/a&gt;
    Line indents equal to the block indent trigger the reading of a
    Ruby Slippers semicolon as shown in the following:
    &lt;pre&gt;&lt;tt&gt;
	$recce-&gt;lexeme_read( 'ruby_semicolon', $indent_start,
	    $indent_length, ';' ) &lt;/tt&gt;&lt;a id=&quot;footnote-13-ref&quot; href=&quot;#footnote-13&quot;&gt;[13]&lt;/a&gt;
    &lt;/footnote&gt;
    &lt;/pre&gt;
    &lt;/p&gt;
    &lt;h2&gt;Ruby Slippers&lt;/h2&gt;
    &lt;p&gt;
    In Marpa, a &quot;Ruby Slippers&quot; symbol is one which does not actually occur
    in the input.
    Ruby Slippers parsing is new with Marpa,
    and made possible because Marpa is left-eidetic.
    By left-eidetic, I mean that Marpa knows, in full
    detail, about the parse to the left of its current position,
    and can provide that information to the parsing app.
    This implies that Marpa also knows which tokens are acceptable
    to the parser at the current location,
    and which are not.
    &lt;/p&gt;
    Ruby Slippers parsing enables a very important trick which
    is useful in &quot;liberal&quot;
    parsing -- parsing where certain elements might be in some sense
    &quot;missing&quot;.
    With the Ruby Slippers you can design a &quot;liberal&quot; parser with
    a &quot;fascist&quot; grammar.
    This is, in fact, how the Haskell 2010 Report's
    context-free grammar is designed --
    the official syntax requires explicit layout,
    but Haskell programmers are encouraged to omit most of the explicit
    layout symbols,
    and Haskell implementations are required to &quot;dummy up&quot; those
    symbols in some way.
    Marpa's method for doing this is left-eideticism and Ruby Slippers
    parsing.
    &lt;p&gt;The term &quot;Ruby Slippers&quot; refers to a widely-known scene in the &quot;Wizard of Oz&quot; movie.
    Dorothy is in the fantasy world of Oz, desperate to return to Kansas.
    But, particularly after a shocking incident in which orthodox Oz wizardry
    is exposed as an affable fakery,
    she is completely at a loss as to how to escape.
    The &quot;good witch&quot; Glenda appears and tells Dorothy that in fact she's always
    had what she's been wishing for.
    The Ruby Slippers, which she had been wearing all through the movie,
    can return her to Kansas.
    All Dorothy needs to do is wish.
    &lt;/p&gt;
    &lt;p&gt;In Ruby Slippers parsing,
    the &quot;fascist&quot; grammar &quot;wishes&quot; for lots of things that may not be in
    the actual input.
    Procedural logic here plays the part of a &quot;good witch&quot; -- it tells
    the &quot;fascist&quot; grammar that what it wants has been there all along,
    and supplies it.
    To do this,
    the procedural logic has to have a reliable way of knowing what the parser
    wants.
    Marpa's left-eideticism provides this.
    &lt;/p&gt;
    &lt;h2&gt;Ruby Slippers combinators&lt;/h2&gt;
    &lt;p&gt;This brings us to a question
    I've postponed -- how do we know which combinator
    to call when?
    The answer is Ruby Slippers parsing.
    First, here are some lexer rules for &quot;unicorn&quot; symbols.
    We use unicorns when symbols need to appear in Marpa's lexer,
    but must never be found in actual input.
    &lt;/p&gt;
    &lt;pre&gt;&lt;tt&gt;
      :lexeme ~ L0_unicorn
      L0_unicorn ~ unicorn
      unicorn ~ [^\d\D]
      ruby_i_decls ~ unicorn
      ruby_x_decls ~ unicorn &lt;/tt&gt;&lt;a id=&quot;footnote-14-ref&quot; href=&quot;#footnote-14&quot;&gt;[14]&lt;/a&gt;
    &lt;/footnote&gt;
    &lt;/pre&gt;
    &lt;p&gt;
    &lt;tt&gt;&amp;lt;unicorn&amp;gt;&lt;/tt&gt; is defined to match 
    &lt;tt&gt;[^\d\D]&lt;/tt&gt;.
    This pattern is all the symbols which are not digits
    and not non-digits -- in other words, it's impossible that this
    pattern will ever match any character.
    The rest of the statements declare other unicorn lexemes
    that we will need.
    &lt;tt&gt;&amp;lt;unicorn&amp;gt;&lt;/tt&gt; and
    &lt;tt&gt;&amp;lt;L0_unicorn&amp;gt;&lt;/tt&gt; are separate,
    because we need to use
    &lt;tt&gt;&amp;lt;unicorn&amp;gt;&lt;/tt&gt; on the RHS of some lexer rules,
    and a Marpa lexeme can never occur
    on the RHS of a lexer rule.&lt;a id=&quot;footnote-15-ref&quot; href=&quot;#footnote-15&quot;&gt;[15]&lt;/a&gt;
    &lt;/p&gt;
    &lt;p&gt;In the above Marpa rule,
    &lt;ul&gt;
    &lt;li&gt;
    &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt; is the symbol from the 2010 Report;
    &lt;/li&gt;
    &lt;li&gt;
    &lt;tt&gt;&amp;lt;ruby_i_decls&amp;gt;&lt;/tt&gt; is a Ruby Slippers symbol for
    a block of declarations with implicit layout.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;tt&gt;&amp;lt;ruby_x_decls&amp;gt;&lt;/tt&gt; is a Ruby Slippers symbol for
    a block of declarations with explicit layout.
    &lt;/li&gt;
    &lt;li&gt;
    &lt;tt&gt;&amp;lt;laidout_decls&amp;gt;&lt;/tt&gt; is a symbol (not in the 2010 Report)
    for a block of declarations covering all the possibilities for
    a block of declarations.
    &lt;/li&gt;
    &lt;/ul&gt;
    &lt;pre&gt;&lt;tt&gt;
      laidout_decls ::= ('{') ruby_x_decls ('}')
	       | ruby_i_decls
	       | L0_unicorn decls L0_unicorn &lt;/tt&gt;&lt;a id=&quot;footnote-16-ref&quot; href=&quot;#footnote-16&quot;&gt;[16]&lt;/a&gt;
    &lt;/pre&gt;
    &lt;/p&gt;
    &lt;p&gt;It is the expectation of a 
    &lt;tt&gt;&amp;lt;laidout_decls&amp;gt;&lt;/tt&gt; symbol that causes child
    combinators to be invoked.
    Because &lt;tt&gt;&amp;lt;L0_unicorn&amp;gt;&lt;/tt&gt; will never be found
    in the input,
    the 
    &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt; alternative will never match --
    it is there for documentation and debugging reasons.&lt;a id=&quot;footnote-17-ref&quot; href=&quot;#footnote-17&quot;&gt;[17]&lt;/a&gt;
    Therefore Marpa, when it wants a
    &lt;tt&gt;&amp;lt;laidout_decls&amp;gt;&lt;/tt&gt;,
    will look for a
    &lt;tt&gt;&amp;lt;ruby_x_decls&amp;gt;&lt;/tt&gt; 
    if a open curly brace is read;
    and a
    &lt;tt&gt;&amp;lt;ruby_i_decls&amp;gt;&lt;/tt&gt; otherwise.
    Neither &lt;tt&gt;&amp;lt;ruby_x_decls&amp;gt;&lt;/tt&gt; 
    or
    &lt;tt&gt;&amp;lt;ruby_i_decls&amp;gt;&lt;/tt&gt; will ever be found in the
    input,
    and Marpa will reject the input,
    causing a &quot;rejected&quot; event.
    &lt;h2&gt;Rejected events&lt;/h2&gt;
    &lt;p&gt;In this code, as often,
    the &quot;good witch&quot; of Ruby Slippers does her work through
    &quot;rejected&quot; events.
    These events can be set up to happen when, at some parse
    location, none of the tokens that Marpa's internal lexer
    finds are acceptable.
    &lt;/p&gt;
    &lt;p&gt;
    In the &quot;rejected&quot; event handler,
    we can use Marpa's left eideticism to find out what
    lexemes Marpa &lt;b&gt;would&lt;/b&gt; consider acceptable.
    Specifically, there is a &lt;tt&gt;terminals_expected()&lt;/tt&gt;
    method which returns a list of the symbols acceptable
    at the current location.
    &lt;/p&gt;
    &lt;pre&gt;&lt;tt&gt;
            my @expected =
              grep { /^ruby_/xms; } @{ $recce-&gt;terminals_expected() }; &lt;/tt&gt;&lt;a id=&quot;footnote-18-ref&quot; href=&quot;#footnote-18&quot;&gt;[18]&lt;/a&gt;
    &lt;/footnote&gt;&lt;/pre&gt;
    &lt;p&gt;Once we &quot;grep&quot; out all but the symbols with the &quot;&lt;tt&gt;ruby_&lt;/tt&gt;&quot; prefix,
    there are only 4 non-overlapping possibilities:
    &lt;/p&gt;
    &lt;ul&gt;
    &lt;li&gt;Marpa expects a 
    &lt;tt&gt;&amp;lt;ruby_i_decls&amp;gt;&lt;/tt&gt;
    lexeme;
    &lt;/li&gt;
    &lt;li&gt;Marpa expects a 
    &lt;tt&gt;&amp;lt;ruby_x_decls&amp;gt;&lt;/tt&gt;
    lexeme;
    &lt;/li&gt;
    &lt;li&gt;Marpa expects a 
    &lt;tt&gt;&amp;lt;ruby_semicolon&amp;gt;&lt;/tt&gt;
    lexeme;
    &lt;/li&gt;
    &lt;li&gt;Marpa does not expect
    any of the Ruby Slippers lexemes;
    &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;If Marpa does not expect any of the Ruby Slippers
    lexemes, there was a syntax error in the Haskell code.&lt;a id=&quot;footnote-19-ref&quot; href=&quot;#footnote-19&quot;&gt;[19]&lt;/a&gt;
    &lt;p&gt;If a &lt;tt&gt;&amp;lt;ruby_i_decls&amp;gt;&lt;/tt&gt;
    or a &lt;tt&gt;&amp;lt;ruby_x_decls&amp;gt;&lt;/tt&gt;
    lexeme is expected, a child combinator is invoked.
    The Ruby Slippers symbol determines
    whether the child combinator looks for implicit
    or explicit layout.
    In the case of implicit layout, the location of
    the rejection determines the block indent.&lt;a id=&quot;footnote-20-ref&quot; href=&quot;#footnote-20&quot;&gt;[20]&lt;/a&gt;
    &lt;/footnote&gt;
    &lt;/p&gt;
    &lt;p&gt;If a 
    &lt;tt&gt;&amp;lt;ruby_semicolon&amp;gt;&lt;/tt&gt;
    is expected, then the parser is at the point where a
    new block item could start,
    but none was found.
    Whether the block was implicit or explicit,
    this indicates we have reached the end of the block,
    and should return control to the parent combinator.&lt;a id=&quot;footnote-21-ref&quot; href=&quot;#footnote-21&quot;&gt;[21]&lt;/a&gt;
    &lt;/footnote&gt;
    &lt;/p&gt;
    &lt;p&gt;
    To explain why
    &lt;tt&gt;&amp;lt;ruby_semicolon&amp;gt;&lt;/tt&gt;
    indicates end-of-block,
    we look at both cases.
    In the case of an explicit layout combinator,
    the rejection should have been caused by a closing
    curly brace, and
    we return to the parent combinator
    and retry it.
    In the parent combinator, the closing curly brace
    will be acceptable.
    &lt;/p&gt;
    &lt;p&gt;If we experience a &quot;rejected&quot; event while
    expecting a
    &lt;tt&gt;&amp;lt;ruby_semicolon&amp;gt;&lt;/tt&gt; in an implicit layout
    combinator,
    it means we did not find an explicit semicolon;
    and we also never found the right indent for creating a Ruby semicolon.
    In other words, the indentation is telling us that we are at the end
    of the block.
    We therefore return control to the parent combinator.
    &lt;/p&gt;
    &lt;h2&gt;Conclusion&lt;/h2&gt;
    &lt;p&gt;
    With this, we've covered the major points of this Haskell prototype
    parser.
    It produces an AST whose structure and node names are those of
    the 2010 Report.
    (The Marpa grammar introduces non-standard node names and rules,
    but these are pruned from the AST in post-processing.)
    &lt;/p&gt;
    &lt;p&gt;
    In the code, the grammars from the 2010 Report are included for
    comparison, so a reader can easily determine what syntax we left out.
    It might be tedious to add the rest,
    but I believe it would be unproblematic, with one interesting exception:
    fixity.
    To deal with fixity, we may haul out the Ruby Slippers again.
    &lt;/p&gt;
    &lt;h2&gt;The code, comments, etc.&lt;/h2&gt;
    &lt;p&gt;A permalink to the
    full code and a test suite for this prototype,
    as described in this blog post,
    is
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell&quot;&gt;
    on Github&lt;/a&gt;.
    I expect to update this code,
    and the latest commit can be found
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/tree/gh-pages/code/haskell&quot;&gt;
    here&lt;/a&gt;.
    Links for specific lines of code in this post are usually
    static permalinks to earlier commits.
    &lt;/p&gt;
    &lt;p&gt;
      To learn more about Marpa,
      a good first stop is the
      &lt;a href=&quot;http://savage.net.au/Marpa.html&quot;&gt;semi-official web site, maintained by Ron Savage&lt;/a&gt;.
      The official, but more limited, Marpa website
      &lt;a href=&quot;http://jeffreykegler.github.io/Marpa-web-site/&quot;&gt;is my personal one&lt;/a&gt;.
      Comments on this post can be made in
      &lt;a href=&quot;http://groups.google.com/group/marpa-parser&quot;&gt;
        Marpa's Google group&lt;/a&gt;,
      or on our IRC channel: #marpa at freenode.net.
    &lt;/p&gt;
    &lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;p id=&quot;footnote-1&quot;&gt;&lt;b&gt;1.&lt;/b&gt;
    Graham Hutton and Erik Meijer,
    &lt;cite&gt;Monadic parser combinators&lt;/cite&gt;, Technical Report NOTTCS-TR-96-4.
    Department of Computer Science, University of Nottingham, 1996,
    pp 30-35.
    &lt;a href=&quot;http://eprints.nottingham.ac.uk/237/1/monparsing.pdf&quot;&gt;
    http://eprints.nottingham.ac.uk/237/1/monparsing.pdf&lt;/a&gt;.
    Accessed 19 August 2018.
 &lt;a href=&quot;#footnote-1-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-2&quot;&gt;&lt;b&gt;2.&lt;/b&gt;
    I use
    whitespace-significant parsing as a convenient example
    for this post,
    for historical reasons and
    for reasons of level of complexity.
    This should not be taken to indicate that I recommend it
    as a language feature.
 &lt;a href=&quot;#footnote-2-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-3&quot;&gt;&lt;b&gt;3.&lt;/b&gt;
    Simon Marlow,
    &lt;cite&gt;Haskell 2010 Language Report&lt;/cite&gt;,
    2010.
    &lt;a href=&quot;https://www.haskell.org/onlinereport/haskell2010/haskell.html#haskellpa1.html&quot;&gt;
    Online version accessed
    21 August 2018.&lt;/a&gt;
    For layout, see in particular
    section 2.7 (pp. 12-14)
    and section 10.3 (pp. 131-134).
 &lt;a href=&quot;#footnote-3-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-4&quot;&gt;&lt;b&gt;4.&lt;/b&gt;
    2010 Report.
    The short examples are on p. 13 and p. 134.
    The long examples are on p. 14.
 &lt;a href=&quot;#footnote-4-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-5&quot;&gt;&lt;b&gt;5.&lt;/b&gt;
    Paul Hudak, John Peterson and Joseph Fasel
    &lt;cite&gt;Gentle Introduction To Haskell&lt;/cite&gt;, version 98.
    Revised June, 2000 by Reuben Thomas.
    &lt;a href=&quot;https://www.haskell.org/tutorial/index.html&quot;&gt;
    Online version accessed
    21 August 2018.&lt;/a&gt;
    The examples are in section 4.6,
    which is on pp. 20-21 of
    &lt;a href=&quot;https://www.haskell.org/tutorial/haskell-98-tutorial.pdf&quot;&gt;
    the October 1999 PDF&lt;/a&gt;.
 &lt;a href=&quot;#footnote-5-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-6&quot;&gt;&lt;b&gt;6.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/short.t#L21&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-6-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-7&quot;&gt;&lt;b&gt;7.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/short.t#L28&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-7-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-8&quot;&gt;&lt;b&gt;8.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/short.t#L43&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-8-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-9&quot;&gt;&lt;b&gt;9.&lt;/b&gt;
    Single-line comments are dealt with properly by lexing them
    as a different token and discarding them separately.
    Handling multi-line comments is not yet implemented --
    it is easy in principle but
    tedious in practice and the examples drawn from the
    Haskell literature did not provide any test cases.
 &lt;a href=&quot;#footnote-9-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-10&quot;&gt;&lt;b&gt;10.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L608&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-10-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-11&quot;&gt;&lt;b&gt;11.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1007&quot;&gt;
    Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-11-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-12&quot;&gt;&lt;b&gt;12.&lt;/b&gt;
    &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1028&quot;&gt;
    Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-12-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-13&quot;&gt;&lt;b&gt;13.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1101&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-13-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-14&quot;&gt;&lt;b&gt;14.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L550&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-14-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-15&quot;&gt;&lt;b&gt;15.&lt;/b&gt;
    The reason for this is that by default a Marpa grammar determines
    which of its symbols are lexemes using the presence of those
    symbol on the LHS and RHS
    of the rules
    in its lexical and context-free grammars.
    A typical Marpa grammar
    requires a minimum of explicit lexeme declarations.
    (Lexeme declarations are statements with the &lt;tt&gt;:lexeme&lt;/tt&gt;
    pseudo-symbol on their LHS.)
    As an aside,
    the Haskell 2010 Report is not always careful about the lexer/context-free
    boundary,
    and adopting its grammar
    required more use of Marpa's explicit lexeme declarations
    than usual.
 &lt;a href=&quot;#footnote-15-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-16&quot;&gt;&lt;b&gt;16.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L361&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-16-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-17&quot;&gt;&lt;b&gt;17.&lt;/b&gt;
    Specifically, the presense of a 
    &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt; alternative silences the usual warnings about
    symbols inaccessible from the start symbol.
    These warnings can be silenced in other ways,
    but at the prototype stage it is convenient to check that
    all symbols supposed to be accessible through
    &lt;tt&gt;&amp;lt;decls&amp;gt;&lt;/tt&gt; are in fact accessible.
    There is a small startup cost to allowing the extra symbols
    in the grammars,
    but the runtime cost is probably not measureable.
 &lt;a href=&quot;#footnote-17-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-18&quot;&gt;&lt;b&gt;18.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1055&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-18-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-19&quot;&gt;&lt;b&gt;19.&lt;/b&gt;
    Currently the handling of these is simplistic.
    A practical implementation of this method would want better reporting.
    In fact, Marpa's left eideticism allows some interesting things
    to be done in this respect.
 &lt;a href=&quot;#footnote-19-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-20&quot;&gt;&lt;b&gt;20.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1081&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-20-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;p id=&quot;footnote-21&quot;&gt;&lt;b&gt;21.&lt;/b&gt;
      &lt;a href=&quot;https://github.com/jeffreykegler/Ocean-of-Awareness-blog/blob/6c76ffc791d24f4515edea376ac31ad7264a420c/code/haskell/haskell.pm#L1072&quot;&gt;
      Github Permalink.&lt;/a&gt;
 &lt;a href=&quot;#footnote-21-ref&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;</description>
  </item>
  </channel>
</rss>
