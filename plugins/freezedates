
package freezedates;
use Fcntl ':flock';
use Errno;

my $datefile = "$blosxom::plugin_state_dir/dates";
my $datefile_tmp = "$blosxom::plugin_state_dir/.dates";

sub start { 1 }

sub filter {
  my ($pkg, $f) = @_;
  my $d = load_dates($datefile);
  my $write;

  # Items in %d override the values supplied by Blosxom in %f
  # But if there's a new file, it is in %f and not %d, so we
  # copy it from %f to %d and set the $write flag to indicate that 
  # the modified $d should be saved
  for my $k (keys %$f) {
    if (exists $d->{$k}) {
      $f->{$k} = $d->{$k};
    } else {
      $d->{$k} = $f->{$k};
      $write = 1;
    }
  }

  if ($write) {
    save_dates($datefile, $datefile_tmp, $d);
  }

  return 1;
}

sub load_dates {
  my $F;
  my $write;
  unless (open $F, "<", $_[0]) {
#    return {} if $!{ENOENT};
    die "Couldn't open $_[0]: $!; aborting";
  }
  local $_;
  my %d;
  while (<$F>) {
    chomp;
    my ($date, $file) = split /\s+/, $_, 2;
    if (my ($y, $m, $d) = $date =~ /^(\d\d\d\d)-?(\d\d)-?(\d\d)$/) {
      require Time::Local;
      my $q = Time::Local::timelocal(0, 0, 0, $d, $m-1, $y-1900);
      $date = $q if $q != -1;
      $write = 1;
    }
    $d{$file} = $date;
    save_dates($_[0], $datefile_tmp, \%d) if $write;
  }
  \%d;
}

sub save_dates {
  require POSIX;
  my ($df, $tmp, $dates) = @_;
  my $today = POSIX::strftime("%Y%m%d", localtime());
  my $backup_file = "$blosxom::plugin_state_dir/date_bkp/$today.dates";

  unless (-e $backup_file) {
    require File::Copy;
    File::Copy::copy($df, $backup_file);
  }

  open my($F), ">", $tmp or die "Couldn't write $tmp: $!; aborting";
  chmod 0777, $tmp;
  for my $k (sort {lc($a) cmp lc($b) } keys %$dates) {
    print $F "$dates->{$k} $k\n" or die "Write error: $!; aborting";
  }
  close $F or die "Write error: $!; aborting";
  rename $tmp, $df or die "rename $tmp => $df: $!; aborting";
}
