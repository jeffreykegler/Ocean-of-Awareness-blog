Announcing Marpa::XS
<p>
I have released
<a href="http://search.cpan.org/~jkegl/Marpa-XS-0.002000/">
the first non-developer's version of Marpa::XS:
0.002000</a>.
Marpa::XS is the XS-accelerated version of
<a href="http://search.cpan.org/dist/Marpa/">
Marpa</a>.
Marpa is a parser generator -- it parses from any
grammar that you can write in BNF.
If that grammar is one of the kinds in practical use
(<kbd>yacc</kbd>, LALR, recursive descent, LR(k), LL(k), regular expressions, etc.),
Marpa and Marpa::XS parse from it in linear (O(n)) time.
<ul>
<li>The parts of Marpa::XS that were rewritten in C run 100 times faster than
the original Pure Perl.
<li>Typical applications run approximately 10 times faster.
<li>There is a new, simplified, interface for reading input.
<li>The documentation has been improved.

<li>Error reporting and tracing of grammars with right recursion has
been simplified and
is much improved.
</ul>
<p>Users should keep in mind the following:
<ul>
<li>Marpa::XS is alpha software.
<li>Use of Marpa::XS for production, or anything mission-critical,
would be unwise.
<li>The interface, while I hope it is rapidly stabilizing,
remains subject to change.
<li>The previous interface for reading input, based
on the <kbd>tokens()</kbd> method, is now strongly deprecated.
It is no longer documented and will be eliminated.
<li>Marpa::XS does not install on a minority of Unix platforms.
The failures all involve either Freebsd's 8.0-release (though Marpa::XS <strong>does</strong> install on
Freebsd's 8.1-release)
or Linux for the i686-linux architecture (though Marpa::XS
<strong>does</strong> install
on i686-linux-gnu-thread-multi, as well as every other Linux tested).
Where Marpa does not install, the problem

<a href="#NOTE1">lies in dynamically linking with the two Marpa::XS shared
libraries</a>.
</ul>
<p>In a future post, I'll talk about my roadmap for Marpa
and Marpa::XS.  So far I have converted Marpa's grammar pre-processing
and parsing to C.
The only part that remains is Marpa's evaluator.
While an afterthought for the theories,
the evaluator is very important in practical use,
and for getting the full benefit of the other speedups.
Conversion of Marpa's evaluator to C will
probably be my next focus.
<h2>Notes</h2>
<p><a name="NOTE1">Note 1: </a>
Marpa::XS comes with two shared libraries:
an XS library, which contains Marpa-to-Perl glue,
and <kbd>libmarpa.a</kbd>, which contains Marpa's core algorithm.
<kbd>libmarpa.a</kbd> is a standalone shared
library, suitable for linking with other environments
besides Perl XS.
<p>For Marpa::XS to be dynamically linked, three things must happen:
<ul>
<li>First, the Marpa::XS dynamic library must be loaded.
This seems to work just fine everywhere.

<li>Second, to resolve symbols in Marpa::XS,
<kbd>libmarpa.a</kbd> must be found and linked in.
This also seems to work just fine everywhere.
<li>Third, <kbd>libmarpa.a</kbd> uses GNU's glib,
so that to resolve symbols in <kbd>libmarpa.a</kbd>
the glib library must be found and linked in.
In fact, because Marpa::XS uses CPAN's Glib,
GNU's glib should already have been loaded,
so that it is simply a matter of ensuring that
it is used to resolve references in <kbd>libmarpa.a</kbd>.
It is this step that is failing on a minority of platforms.
</ul>
<p>With regard to Windows, I believe there is no major obstacle
to porting Marpa::XS to any of the various Perl's for Windows.
The GNU glib that I mentioned is <strong>NOT</strong>

glibc -- nothing about Marpa::XS requires a POSIX environment.
However, I know of only one attempt to install Marpa::XS on Windows
and no successes.
</p>
