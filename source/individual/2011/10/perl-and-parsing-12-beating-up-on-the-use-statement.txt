Perl and Parsing 12: Beating up on the "use" statement
<p>
If you have been following the Perl blogosphere recently,
you may have noticed that it has been a bad few weeks
for Perl's <code class="prettyprint">use</code> statement.
I have been
<a href="http://blogs.perl.org/users/jeffrey_kegler/2011/10/perl-and-parsing-10-use-the-easier-way.html">
picking it apart</a>
in this series,
and chromatic, on his blog,
<a href="http://www.modernperlbooks.com/mt/2011/10/what-perl-5s-use-really-does.html">
recently pointed out a documentation issue</a>.
Unlike chromatic, who focuses on user concerns,
I use Perl as a way to implement and to illustrate parsing.
Though, to be sure,
one of the points I try to make
is that the choice of parsing strategy
is ultimately very much a user concern.
</p>
<p>
I find
Perl's <code class="prettyprint">use</code> statement
especially interesting because it is a good example of
a natural syntax that you would like to be easy to parse,
but which proves problematic with current parsing technology.
With a general BNF parser, like Marpa, 
Perl's <code class="prettyprint">use</code> statement is easy to parse.
But the <code class="prettyprint">use</code> statement strains
Perl's parser LALR parse engine to the limits.
Indeed, as I will show next, even a bit beyond.

</p>
<h2>Reversed use statements</h2>
<p>
Consider this statement
<pre><code class="prettyprint">use 2 Fatal;</code>
</pre>
Perl accepts this without error or warning, and interprets it as
a request of at least version 2 of the <code class="prettyprint">Fatal</code>
module.
But there's a problem.
If you missed it,
look carefully -- module name and version are reversed
from the documented order.
As documented, the statement should be
<pre><code class="prettyprint">use Fatal 2;</code>
</pre>
</p>
<p>

What happens if we try to include an argument list with a reversed
use statement?
If we keep things simple,
we are still fine:
<pre><code class="prettyprint">use 2 Fatal qw(open close);
</code></pre>
is equivalent to
<pre><code class="prettyprint">use Fatal 2 qw(open close);
</code></pre>
</p>
<h2>The real problem</h2>
<p>
If reversed 
<code class="prettyprint">use</code> statements were orthogonal --
that is, if they treated argument
lists in the same way as their documented brethren --
one could argue
that they were a misfeature or even
a feature.
But, alas,
reversed <code class="prettyprint">use</code> statements
are not orthogonal.
Perl complains about reversed
<code class="prettyprint">use</code> statements with some lists,
but not with others.
As examples,
the following statements are all
reported as syntax errors:
<pre><code class="prettyprint">use 2 Fatal +"open", "close";
</pre></code>
<pre><code class="prettyprint">use 2 Fatal "open", "close";
</pre></code>
<pre><code class="prettyprint">use 2 Fatal +qw(open close)
</pre></code>
<pre><code class="prettyprint">use 2 Fatal ("open", "close")
</pre></code>

<pre><code class="prettyprint">use 2 Fatal +("open", "close")
</pre></code>
</p>
<p>
The argument lists in the above statements are all syntactically correct.
To see this,
tranpose module name and version number
into their documented order and try the "un-reversed" statements out.
Perl will accept them,
and will interpret their lists as argument lists.
</p>
<h2>Back it out?</h2>
Is backing out the reversed
<code class="prettyprint">use</code> statement an option?
My guess is no.
Almost certainly,
in production environments somewhere out there,
Perl scripts contain reversed <code class="prettyprint">use</code> statements.
Most of these, I would expect, came about by accident.
No diagnostic identifies
reversed <code class="prettyprint">use</code> statements
and the most common ones
will perform just fine under testing.
Even a careful desk-checking of the code
could miss them,
and

<a href="http://dictionary.die.net/desk%20check">
a jargon file entry from back in 1996</a>
mockingly informs me that desk checks
went out of style some time prior to that.
</p>
<h2>Keep it?</h2>
<p>
Let's suppose, then, that the
reversed <code class="prettyprint">use</code> statement
is kept on as a misfeature, documented or undocumented.
That implies that it should continue to handle all the arguments
lists it currently handles.
After all, we don't want to break any scripts --
that is the whole
point of keeping it.
</p>
<p>
But what of those arguments lists that the
reversed <code class="prettyprint">use</code> statement does not handle?
If you look at the code
for the <code class="prettyprint">use</code> statement
you will see it is extremely complicated.
It would be very difficult
to keep
the reversed <code class="prettyprint">use</code> statement's
behavior
perfectly stable
with respect to argument lists.
So difficult that it would make the code for
the <code class="prettyprint">use</code> statement almost untouchable.

</p>
<p>
One candidate for the least bad solution is to
allow changes to the list-handling
behavior of the
reversed <code class="prettyprint">use</code> statement,
but only in the direction of expanding the 
syntaxes allowed.
It may not be desirable to document
the reversed <code class="prettyprint">use</code> statement,
but it should probably should be added to the test suite.
The reversed <code class="prettyprint">use</code> statement would then live on,
a deprecated but permanent part of Perl.
</p>
