Reporting mismatched delimiters
<html>
  <head>
  </head>
  <body><p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
    </p>
    <p>A modern computer language divides
      its texts into pieces.
      One very direct way to demarcate a piece,
      is to mark its boundaries with a pair of delimiters,
      where one delimiter marks the start and the other marks the end.
    </p><p>
      Delimiters can take many forms.
      Quote marks, parentheses, curly braces and square brackets,
      and XML and HTML tags
      are all delimiters.
    </p>
    <p>
      Mismatching delimiters is easy to do and
      traditional parsers are often poor at reporting these errors:
      hopeless after the first mismatch,
      and for that matter none too precise about the first one.
      This post outlines a scaleable method for the accurate
      reporting of mismatched delimiters.
      I will illustrate the method with an example of a simple
      but useful tool --
      a utility which reports mismatched brackets.
    </p>
    <h3>The example script</h3>
    <p>The example script,
      <tt>bracket.pl</tt>,
      is a utility that reports mismatched brackets in the set:
    </p><blockquote><pre>
      () {} []
      </pre></blockquote><p>
      They are expected to nest in the usual way.
      Other text is treated as filler, so that
      <tt>bracket.pl</tt>
      will not be smart about things
      like strings or comments.
      This does have the advantage of making
      <tt>bracket.pl</tt>
      mostly language-agnostic.
    </p>
    <p>
      Because it's intended primarily to be read
      as an illustration of the technique,
      <tt>bracket.pl</tt>
      is relatively simple.
      It's simple enough that a recursive descent parser, for
      example, could emulate it for this specific grammar.
      I hope the reader who goes on to look at the details
      will see that this technique scales to more
      complex situations,
      in a way in which a solution based on a traditional parser
      will not.
    </p>
    <h3>Error reports</h3>
    <p>The description of how the method works will make more
      sense after we've looked at some examples of the diagnostics
      <tt>bracket.pl</tt>
      produces.
      To be truly useful,
      <tt>bracket.pl</tt>
      must report mismatches that span
      many lines,
      and it can do this.
      But single-line examples are easier to follow.
      All the examples in this post will be contained in a one line.
      Consider the string '((([))':
      <tt>bracket.pl</tt>'s diagnostics are:
    </p><blockquote><pre>
* Line 1, column 1: Opening '(' never closed, problem detected at end of string
((([))
^
====================
* Line 1, column 4: Missing close ], problem detected at line 1, column 5
((([))
   ^^
</pre></blockquote>
    <p>
      In the next example
      <tt>bracket.pl</tt>
      realizes that it
      cannot accept the ')' at column 16, without first closing the set of curly braces started at column 5.
      It identifies the problem, along with both of the locations involved.
    </p>
    <blockquote><pre>
* Line 1, column 5: Missing close }, problem detected at line 1, column 16
[({({x[]x{}x()x)})]
    ^          ^
</pre></blockquote>
    <p>
      So far, so good.
      But an important advantage of
      <tt>bracket.pl</tt>
      has yet to be seen.
      The error messages of
      most compilers, after they report a mismatched delimiter,
      are so unreliable that they are in practice useless.
      <tt>bracket.pl</tt>
      attempts to repair the damage fixing the unmatched brackets,
      and it usually succeeds well enough to accurately report
      the subsequent issues.
      Consider the text
      <tt>'({]-[(}-[{)'</tt>.
      The output of
      <tt>bracket.pl</tt>
      is
    </p><blockquote><pre>
* Line 1, column 1: Missing close ), problem detected at line 1, column 3
({]-[(}-[{)
^ ^
====================
* Line 1, column 2: Missing close }, problem detected at line 1, column 3
({]-[(}-[{)
 ^^
====================
* Line 1, column 3: Missing open [
({]-[(}-[{)
  ^
====================
* Line 1, column 5: Missing close ], problem detected at line 1, column 7
({]-[(}-[{)
    ^ ^
====================
* Line 1, column 6: Missing close ), problem detected at line 1, column 7
({]-[(}-[{)
     ^^
====================
* Line 1, column 7: Missing open {
({]-[(}-[{)
      ^
====================
* Line 1, column 9: Missing close ], problem detected at line 1, column 11
({]-[(}-[{)
        ^ ^
====================
* Line 1, column 10: Missing close }, problem detected at line 1, column 11
({]-[(}-[{)
         ^^
====================
* Line 1, column 11: Missing open (
({]-[(}-[{)
          ^
</pre></blockquote>
    <p>Each time,
      <tt>bracket.pl</tt>
      corrects itself,
      and accurately reports the next set of problems.
    </p><h3>A difficult error report</h3>
    <p>
      To be 100% accurate,
      <tt>bracket.pl</tt>
      would have to guess the programmer's intent.
      This is, of course, not possible.
      Let's look at a text where
      <tt>bracket.pl</tt>'s guesses are not so good:
      <tt>{{]}</tt>.
      Here we will assume the closing square bracket is a typo for a closing parenthesis.
      Here's the result:
    </p><blockquote><pre>
* Line 1, column 1: Missing close }, problem detected at line 1, column 3
{{]}
^ ^
====================
* Line 1, column 2: Missing close }, problem detected at line 1, column 3
{{]}
 ^^
====================
* Line 1, column 3: Missing open [
{{]}
  ^
====================
* Line 1, column 4: Missing open {
{{]}
   ^
</pre></blockquote><p>
      Instead of one error,
      <tt>bracket.pl</tt>
      finds four.
    </p><p>
      But even in this case, the method is fairly good, especially when
      compared with current practice.
      The problem is at line 1, column 3,
      and the first three messages all identify this as one of their
      potential problem locations.
      It is reasonable to believe that a programmer, especially once
      he becomes used to this kind of mismatch reporting,
      will quickly find the first mismatch and fix it.
      This may not be much better than the state of the art,
      but it is certainly no worse.
    </p>
    <h3>How it works</h3>
    <p>
      For full details of the workings of
      <tt>bracket.pl</tt>
      there is
      <a href="https://gist.github.com/jeffreykegler/b6bfeeadfcedeade6519">the code</a>,
      which is heavily commented.
      This section provides a conceptual overview.
    </p><p>
      <tt>bracket.pl</tt>
      uses two features of Marpa:
      left-eideticism and the Ruby Slippers.
      By left-eidetic, I mean that Marpa knows everything there is to know
      about the parse at, and to left of, the current position.
      As a consequence,
      Marpa
      also knows exactly which of its input symbols
      can lead to a successful parse,
      and is able to stop as soon as it knows that the parse cannot succeed.
    </p>
    <p>
      In the Ruby Slippers technique, we arrange for parsing to stop
      whenever we encounter an input which
      would cause parsing to fail.
      The application then
      asks Marpa, "OK.  What input would allow the
      parse to continue?"
      The application takes Marpa's answer to this
      question, and uses it to concoct
      an input that Marpa will accept.
    </p>
    <p>
      In this case,
      <tt>bracket.pl</tt>
      creates a virtual token which fixes the mismatch
      of brackets.
      Whatever the missing bracket may be,
      <tt>bracket.pl</tt>
      invents a bracket of that kind,
      and adds it to the virtual input.
      This done,
      parsing and error detection
      can proceed as if there was no problem.
      Of course,
      the error which made the Ruby Slippers token necessary
      is recorded, and those records are the source of the
      error reports we saw above.
    </p>
    <p>
      To make its error messages as informative as possible
      in the case of missing closing brackets,
      <tt>bracket.pl</tt>
      needs to report the exact location of
      the opening bracket.
      Left-eideticism again comes in handy here.
      Once the virtual closing bracket is supplied to Marpa,
      <tt>bracket.pl</tt>
      asks, "That bracketed text that I just closed -- where did it begin?"
      The Marpa parser tracks the start location
      of all symbol and rule instances,
      so it is able to provide the application
      with the exact location of
      the starting bracket.
    </p><p>
      Finally, but importantly,
      when
      <tt>bracket.pl</tt>
      encounters a problem at a point where there are unclosed opening
      brackets, it has two choices.
      It can be optimistic or it can be pessimistic.
      "Optimistic" means it can hope that something later in the input will close
      the opening bracket.
      "Pessimistic" means it can decide that "all bets are off" and use
      Ruby Slippers tokens to close all the currently active open brackets.
    </p>
    <p>
      <tt>bracket.pl</tt>
      uses the pessimistic strategy.
      While the optimistic strategy sounds better, in practice
      the pessimistic one seems to provide better diagnostics.
      The pessimistic strategy does report some fixable problems
      as errors.
      But the optmistic one can introduce spurious fixes.
      These hide the real errors,
      and missing errors is worse than overreporting them.
      Even when the pessimistic strategy overreports,
      its first error messages will always accurately identify a
      a problem location.
    </p>
    <h3>Implications</h3>
    <p>
      While this utility is already useable,
      I think of it as a prototype for what could be done.
      This problem -- matching delimiters --
      is in fact very general, and I believe these techniques have very wide application.
    </p>
    <h3>For more</h3>
    <p>
      The example script of this post is
      <a href="https://gist.github.com/jeffreykegler/b6bfeeadfcedeade6519">a Github gist</a>.
      For more about Marpa,
      there's
      <a href=http://savage.net.au/Marpa.html">the
        official web site maintained by Ron Savage</a>.
      I also have
      <a href="http://jeffreykegler.github.io/Marpa-web-site/">a Marpa web site</a>.
      Comments on this post can be made in
      <a href="http://groups.google.com/group/marpa-parser">
        Marpa's Google group</a>.
    </p>
  </body>
</html>
