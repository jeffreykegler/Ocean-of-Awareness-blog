Left Parsing
<html>
  <head>
  </head>
  <body><p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
    </p>
    <p>Parsing has a reputation of being an esoteric
        mathematical discipline -- which it can be,
        and that it is how it is usually presented.
        But its basic concepts, especially those in widespread use,
        are not especially difficult.
        </p>
        <p>Left parsing's basic idea is as simple as they come --
        you look at the next symbol and make your parsing decision
        based on it.
        This is simple but limited, so left parsing is almost
        combined with with lookahead.
        Lookahead of one character helps a lot, but for lookahead
        of more than one character
        the size of the parser grows exponentially, and its
        usefulness plummets.
        <p>It's straightforward to see that this approach will have
        problems with left recursion.
        If you have an expression like
        <blockquote><pre>
        a + b + c + d + e + f + [....]
        </pre></blockquote>
        where the plus signs continue off to the right,
        you cannot make the parsing decision at the first '+' unless
        you know how many more to come.
        And, without doing a lot of looking to the right,
        you cannot know.
        There are a lot of approaches to dealing with this difficulty,
        but all of them involve trying to make left parsing into
        something it is not.
    <h3>Advantages of left parsing</h3>
    <p>It is hard to believe that an approach
    as myopic as left parsing is as good as we can do.
    But before looking at alternative,
    I should point out that in left parsing's brutish simplicity
    lies its greatest strength -- because it does next to nothing,
    it is very easy to figure out what it is doing.
    And easy to figure out,
    means easy to customize.
    <p>
    Take another of the many constructs incomprehensible to
    a left parser:
    <blockquote><pre>
    2 * 3 * 4 + 5 * 6
    </pre></blockquote>
    How do left parser languages handle this?
    Simple: as soon as they realize they are faced
    an expression, they away from the left
    parser to a specialized parser.
    <p>These two properties have catapulted left parsing
    to the top of the heap.
    Behind their different presentations,
    combinator parsing, PEG, and recursive descent are
    all left parsers.
    <h3>Right parsing</h3>
    <p>Few theoreticians of the 1970's imagined that left parsing would
    be the end of the story.
    That there is no some systematic way of using anything to the right
    of the current location for making parse decisons did not seem
    likely.
    <h3>Comments</h3>
    <p>Comments on this post can be made in
      <a href="http://groups.google.com/group/marpa-parser">
        Marpa's Google group</a>,
      or on our IRC channel: #marpa at freenode.net.
      To learn more about Marpa,
      there's
      <a href=http://savage.net.au/Marpa.html">the
        official web site maintained by Ron Savage</a>.
      I also have
      <a href="http://jeffreykegler.github.io/Marpa-web-site/">a Marpa web site</a>.
    </p>
  </body>
</html>
