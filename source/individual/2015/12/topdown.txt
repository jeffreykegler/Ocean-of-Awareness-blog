What is top-down parsing?
<html>
  <head>
  </head>
  <body><p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
    </p>
    Top-down parsing is guessing.  Literally.
    Bottom-up parsing is looking.
    </p>
    <p>The way you'll often hear that phrased is that top-down parsing is
    looking, starting at the top,
    and bottom-up parsing is looking, starting at the bottom.
    But that is misleading, because the input is at the bottom --
    at the top there is nothing to look at.
    <p>A more generous, but still accurate, way to describe the top-down
    component of parsers is "prediction".
    And prediction is, indeed, a very useful component of a parser,
    when used in combination with other techniques.
    <h2>OK, but why bring this up?</h2>
    <p>If someone finds it necessary to use striking language to make a point,
    it is often a sign that the point itself is not all that striking.
    But I <b>do</b> think it is helpful to be clear about the basis of top-down
    parsing.
    <p>
    More importantly, I think a clearer understanding of what top-down parsing
    is can help us assess the odds that it can be the platform for
    futures such as language-oriented parsing.
    And 
    <h2>So why does top-down parsing work?</h2>
    <p>Of course, if a parser does nothing but guess, it can only parse
    exactly one input.
    So top-down parsing, in practice, is always combined with a bottom-up
    component.
    This bottom-up component may be as modest as lookahead, but it <b>must</b>
    be there or else top-down parsing is really not parsing at all.
    <p>The big advantage of the top-down structure is its flexibility.
    You can write a top-down parser as a series of subroutine calls --
    a technique called recursive descent --
    and this allows you to hook in custom-written bottom-up logic at every
    top-down choice point.
    <p>A major advantage of the recursive descent approach is that it is
    completely understandable for ordinary programmers.
    To be sure, recursive descent parsers get very large and confusing,
    but the size and confusion are of a kind where the mathematician has
    no advantage over the seasoned, far-thinking programmer.
    <h2>Switching grammars</h2>
    <p>You can even use the flexibility of top-down to switch
    away from top-down to another parser.
    For example, you could claim that a top-down parser could do anything my
    own parser (Marpa) could do, because a recursive descent parser can call
    a Marpa parser.
    <p>A less dramatic switchoff is very common -- in fact, it's present
    in just about every recursive descent parser for a computer language,
    because one of the many things beyond the power of top-down are arithmetic
    and other expressions.
    Recursive descent parsers handle these by handing control over to an operator
    precedence parser.
    The top-down is not extremely smart about the hand-over and hand-back
    -- it is up to the programmer to make sure the two play together nicely.
    But experienced language designers know that not to adventurous
    with expressions,
    and used with caution, this approach works.
    <h2>Perl 6 Grammars</h2>
    <p>Perl 6 grammars are PEG with extensions,
    including backtracking, backtracking control,
    a new style of tie-breaking and lots of opportunity
    for the programmer to intervene and customize everything.
    <p>As one example, the parsing of expressions using operator precedence
    is automated in Perl 6 grammars.
    <p>I'm a fan of the Perl 6 effort.
      I certainly
      <b>should</b>
      be a supporter, after the many favors they've done for me
      and the Marpa community over the years.
      The considerations of this post
      will disappoint some of the
      hopes for applications of the native Perl 6 parser.
      But these applications have not been central to the Perl 6 effort,
      of which I will be an eager student over the coming months.
    </p>
    <h2>Comments</h2>
    <p>
      To learn more about Marpa,
      there's
      <a href="http://savage.net.au/Marpa.html">the
        official web site maintained by Ron Savage</a>.
      I also have
      <a href="http://jeffreykegler.github.io/Marpa-web-site/">a Marpa web site</a>.
      Comments on this post can be made in
      <a href="http://groups.google.com/group/marpa-parser">
        Marpa's Google group</a>,
      or on our IRC channel: #marpa at freenode.net.
    </p>
  </body>
</html>
