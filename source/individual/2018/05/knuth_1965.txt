Why is parsing considered solved?
<html>
  <head>
  <style type="text/css">
      body {
      max-width:900px;
      font-size: large
      }
  </style>
  </head>
  <body>
    <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
    <p>It is often said that parsing is a "solved problem".
    Given the level of frustration with the state of the art,
    the underuse of the very powerful technique of
    Language-Oriented Programming due to problematic tools<a id="footnote-1-ref" href="#footnote-1">[1]</a>,
    and the vast superiority of human parsing ability
    over computers,
    this requires explanation.
    </p>
    <p>
    On what grounds can someone say that parsing is "solved"?
    To understand this,
    we need to look at the history of Parsing Theory.<a id="footnote-2-ref" href="#footnote-2">[2]</a>
    In fact, we'll have to start decades before computer Parsing Theory
    exists,
    with a now nearly-extinct school of linguistics,
    and its desire to put the field on strictly
    scientific basis.
    </p>
    <h2>"Language" as of 1929</h2>
    <p>In 1929 Leonard Bloomfield,
      as part of his effort to create a linguistics that
      would be taken seriously as a science,
      published his "Postulates".<a id="footnote-3-ref" href="#footnote-3">[3]</a>
      The "Postulates" include his definition of language:
    </p><blockquote>
      The totality of utterances that can be made in a speech
      community is the
      <b>language</b>
      of that speech-community.<a id="footnote-4-ref" href="#footnote-4">[4]</a>
    </blockquote><p>
      There is no reference in this definition to the usual view,
      that the utterances of a language "mean" something.
      This omission is not accidental:
    </p><blockquote>
      The statement of meanings is therefore the weak point in
      language-study, and will remain so until human knowledge
      advances very far beyond its present state. In practice, we define the
      meaning of a linguistic form, wherever we can, in terms of some
      other science.<a id="footnote-5-ref" href="#footnote-5">[5]</a>
    </blockquote><p>
      Bloomfield is passing the buck in this way,
      because the behaviorist science of his time rejects
      any claims about mental states as
      unverifiable statements -- essentially,
      as a claim to be able to read minds.
      "Hard" sciences like physics, chemistry and even
      biology avoid dealing with unverifiable mental states.
      Bloomfield and the behaviorists want to make the methods of linguistics
      as close to hard science as possible.
    </p>
    <p>
      Draconian as Bloomfield's exclusion of meaning is,
      it is a big success.
      Known as structural linguistics,
      Bloomfield's approach dominates lingustics for
      the next couple of decades.
    </p>
    <h2>1955: Noam Chomsky graduates</h2>
    <p>
      Noam Chomsky earns his PhD at the Universtity of Pennsylvania.
      His teacher, Zelig Harris, is a prominent Bloomfieldian,
      and Chomsky's early work is thought to be in the Bloomfield school.<a id="footnote-6-ref" href="#footnote-6">[6]</a>
      Chomsky becomes a professor at MIT.
      MIT does not have a linguistics department,
      and Chomsky is free to teach his own approach to the subject.
    </p>
    <h2>The term "language" as of 1956</h2>
    <p>Chomsky publishes his "Three models" paper,
      one of the most important papers of all time.
      His definition of language now uses the terminology
      of set theory,
      but its substance comes from Bloomfield:
    </p><blockquote>
      By a language then, we shall mean a set (finite or infinite) of
      sentences, each of finite length, all constructed from a finite
      alphabet of sysbols.  If A is an alphabet, we shall say that
      anything formed by concatenating the symbols of A is a string in
      A. By a grammar of the language L we mean a device of some sort that
      produces all of the strings that are sentences of L and only these.<a id="footnote-7-ref" href="#footnote-7">[7]</a>
    </blockquote><p>
      Chomsky does not intend to
      follow in the Bloomfieldian tradition of avoiding considerations
      of meaning, aka semantics:
    </p><blockquote>
      [...] it would be absurd to develop
      a general syntactic theory
      without assigning an absolutely
      crucial role to semantic considerations,
      since obviously the necessity to support
      semantic interpretation is one of the primary
      requirements
      that the structures
      generated by the syntactic component of a grammar
      must meet.<a id="footnote-8-ref" href="#footnote-8">[8]</a>
    </blockquote><p>
      Already in "Three Models",
      Chomsky readily brings in semantics,
      when it serves his purposes.
      For a semantically ambiguous utterance,
      Chomsky's new model produces multiple syntactic derivations.
      Each of these syntactic derivations
      "look" like the natural representation
      of one of the meanings,
      and Chomsky points out that this is a very
      desirable property for a model to have.<a id="footnote-9-ref" href="#footnote-9">[9]</a>
    </p>
    <h2>Chomsky 1959</h2>
    <p>In 1959, Chomsky reviews a book by B.F. Skinner's on linguistics.<a id="footnote-10-ref" href="#footnote-10">[10]</a>
    Skinner is the most prominent behaviorist of the time.
    </p>
    <p>
    Chomsky's review removes all doubt about where he stands
    on behaviorism
    or on the relevance of linguistics to the study of meaning.<a id="footnote-11-ref" href="#footnote-11">[11]</a>
    His review galvanizes the opposition to behaviorism, and
    Chomsky establishes himself as behavorism's most
    prominent and effective critic.
    </p>
    <h2>Oettinger 1961</h2>
    <p>
      While the stack itself goes back to Turing<a id="footnote-12-ref" href="#footnote-12">[12]</a>,
      its significance for parsing becomes an object
      of interest in itself with
      Samuelson and Bauer's 1959 paper<a id="footnote-13-ref" href="#footnote-13">[13]</a>.
      Mathematical study of stacks as models of computing begins with Anthony Oettinger's 1961 paper.<a id="footnote-14-ref" href="#footnote-14">[14]</a></p>
    <p>Oettinger 1961 is full of evidence that stacks
      (which he calls "pushdown stores") are very new.
      Oettinger, for example, does not use the terms "push" or "pop",
      but instead describes operations on his pushdown stores using
      a set of vector operations which will later form the basis
      of the APL language.
      As of 1961, all algorithms with acceptable speed are using
      stacks with various modifications.
      Oettinger express a hope:
    </p>
    <blockquote>
      The development of a theory of pushdown algorithms should
      hopefully lead to systematic techniques for generating
      algorithms satisfying given requirements to replace
      the ad hoc invention of each new algorithm.<a id="footnote-15-ref" href="#footnote-15">[15]</a>
    </blockquote><p>
      Oettinger hopes his pushdown store model of computing --
      what will eventually be called
      deterministic pushdown automata (DPDA's) --
      will become the basis of a theory of language
      computing encompassing both natural language
      (including the Russian which is the object of his own research)
      and computing languages like ALGOL.
      For natural language translation,
      DPDA's will prove totally inadequate.
      But DPDA's will continute to be the basis
      of hopes for a theory of computer language parsing.
      And the quote above more than hints at an expectation
      of One Stack Parsing Algorithm to Rule Them All.
    </p>
    <h2>Knuth 1965</h2>
    <p>In a pivotal LR(k) paper.
      that Donald Knuth sets out a theory that explains
      all the "tricks"<a id="footnote-16-ref" href="#footnote-16">[16]</a>
      used for efficient parsing up to that time.
      Knuth sets out a comprehensive theory of stack-based
      parsing algorithms.
    </p>
    <p>
      For a start, Knuth shows that stack-based parsing is
      equivalent to a new and unexpected class of grammars
      LR(k), and he provides with a parsing algorithm for them.
      This algorithm might be expected to be "the one to rule
      them all".
      Unfortunately Knuth's LR(k), while deterministic and linear,
      is not practical -- it requires huge tables well beyond
      the memory capabilities of the time.
    </p>
    <p>
      Knuth, in his program for further research<a id="footnote-17-ref" href="#footnote-17">[17]</a>,
      suggests using grammars rewrites or table manipulations
      to streamline parsers for LR(k) or
      LR(k) subclasses.
      Knuth also suggests investigation of parsers for superclasses
      of and even describes a class of parsers with more aggressive lookahead -- LR(k,t).
      But he is clearly skeptical about LR(k,t)<a id="footnote-18-ref" href="#footnote-18">[18]</a>
      and, we may assume,
      even more skeptical about more general approaches.<a id="footnote-19-ref" href="#footnote-19">[19]</a>
    </p>
    <p>
      Knuth is certainly aware that DPDA determinism and
      linear time behavior are not the same thing.<a id="footnote-20-ref" href="#footnote-20">[20]</a>
      An algorithm can be more powerful than a DPDA,
      while still being linear.
      But linearity is a stand-in for "practical",
      and, with his discovery that even DPDA-based
      algorithms can be impractical,
      Knuth, and the research community,
      decide that it is extremely unlikely than more
      powerful computing models will also be faster in
      practice.
    </p>
    <p>
       Why was such a powerful skepticism based on the results for one
       computing model of computing?
       Stacks, as we now call them, are a natural model of computing,
       so it is reasonable to think they form a step on the hierarchy
       of tradeoffs of power against practical speed.
       But a very important was the proof that LR(k) grammars were
       "equivalent" to DPDA's.
       And central to the acceptance of this proof as relevant
       was a confusion about the use of the term "language".
    </p>
    <h2>The term "language" as of 1965</h2>
    <p>
    Knuth defines language as follows:
    </p>
    <blockquote>
    The language defined by G is<br>
    &nbsp;&nbsp;&nbsp;&nbsp;
    { &alpha; | S => &alpha; and &alpha is a string over T }<br>
    namely, the set of all terminal string derivable from S by using
    the productions of G as substitution rules.<a id="footnote-21-ref" href="#footnote-21">[21]</a>
    </blockquote>
    (Here G is a grammar whose start symbol is S and whose set
    of terminals is T.)
    This is clearly the behavorist definition of language
    translated into set-theoretic terms.
    <p>
    <h2>Comments, etc.</h2>
    <p>
      The background material for this post is in my
      <a href="https://jeffreykegler.github.io/personal/timeline_v3>
    Parsing: a timeline 3.0</a>,
    and this post may be considered a supplement to "Timelime".
      To learn about Marpa,
      my Earley/Leo-based parsing project,
      there is the
      <a href="http://savage.net.au/Marpa.html">semi-official web site, maintained by Ron Savage</a>.
      The official, but more limited, Marpa website
      <a href="http://jeffreykegler.github.io/Marpa-web-site/">is my personal one</a>.
      Comments on this post can be made in
      <a href="http://groups.google.com/group/marpa-parser">
        Marpa's Google group</a>,
      or on our IRC channel: #marpa at freenode.net.
    </p>
    <h2>Footnotes</h2>
<p id="footnote-1">1.
    The well-known <a href="https://en.wikipedia.org/wiki/Design_Patterns">
    <cite>Design Patterns</cite> book</a>
    (aka "the Gang of 4 book")
    has a section on this which call Language-oriented programmer
    its "Interpreter pattern".
    This amply illustrates the main obstacle to use
    of the pattern -- lack of adequate parsing tools.
    I talk much more about this in my two blog posts on 
    the Interpreter pattern:
    <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2013/03/bnf_to_ast.html">
    BNF to AST</a>
    and 
    <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2013/03/interpreter.html">
    The Interpreter Design Pattern</a>.
 <a href="#footnote-1-ref">&#8617;</a></p>
<p id="footnote-2">2.
      This post takes the form of a timeline, and
      is intended to be incorporated in my
      <a href="https://jeffreykegler.github.io/personal/timeline_v3>.
      Parsing: a timeline</a>.
      The earlier entires in this post borrow heavily from
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2018/05/chomsky_1956.html">
	    a previous blog post</a>.
 <a href="#footnote-2-ref">&#8617;</a></p>
<p id="footnote-3">3.
        Bloomfield, Leonard,
        "A set of Postulates
        for the Science of Language",
        <cite>Language</cite>, Vol. 2, No. 3 (Sep., 1926), pp. 153-164.
 <a href="#footnote-3-ref">&#8617;</a></p>
<p id="footnote-4">4.
        Bloomfield 1926, definition 4 on p. 154.
 <a href="#footnote-4-ref">&#8617;</a></p>
<p id="footnote-5">5.
        Bloomfield, Leonard.
        <cite>Language</cite>.
        Holt, Rinehart and Winston, 1933, p. 140.
 <a href="#footnote-5-ref">&#8617;</a></p>
<p id="footnote-6">6.
        Harris, Randy Allen,
        <cite>The Linguistics Wars</cite>,
        Oxford University Press, 1993,
        pp 31-34, p. 37.
 <a href="#footnote-6-ref">&#8617;</a></p>
<p id="footnote-7">7.
        The quote is on p. 114 of
        Chomsky, Noam.
        "Three models for the description of language."
        <cite>IRE Transactions on information theory</cite>,
        vol. 2, issue 3, September 1956, pp. 113-124.
        In case there is any doubt Chomsky's "strings"
        are Bloomfield's utterances,
        Chomsky also calls his strings,
        "utterances".
        For example in Chomsky, Noam,
        <cite>Syntactic Structures</cite>,
        2nd ed.,
        Mouton de Gruyter, 2002, on p. 15:
        "Any grammar of a language will project the finite and somewhat accidental
        corpus of observed utterances to a set (presumably infinite)
        of grammatical utterances."
 <a href="#footnote-7-ref">&#8617;</a></p>
<p id="footnote-8">8.
        Chomsky, Noam.
        <cite>Topics in the Theory of Generative Grammar</cite>.
        De Gruyter, 1978, p. 20.
        (The quote occurs in footnote 7 starting on p. 19.)
 <a href="#footnote-8-ref">&#8617;</a></p>
<p id="footnote-9">9.
        Chomsky 1956, p. 118, p. 123.
 <a href="#footnote-9-ref">&#8617;</a></p>
<p id="footnote-10">10.
    Chomsky, Noam.
    “A Review of B. F. Skinner’s Verbal Behavior”. <cite>Language</cite>,
    Volume 35, No. 1, 1959, 26-58.
    <a href="https://chomsky.info/1967____/">
    https://chomsky.info/1967____/</a> accessed on 3 June 2018.
 <a href="#footnote-10-ref">&#8617;</a></p>
<p id="footnote-11">11.
    See in particular, Section IX of Chomsky 1959.
 <a href="#footnote-11-ref">&#8617;</a></p>
<p id="footnote-12">12.
        Carpenter, Brian E., and Robert W. Doran.
        "The other Turing machine."
        <cite>The Computer Journal</cite>, vol. 20, issue 3, 1 January 1977, pp. 269-279.
 <a href="#footnote-12-ref">&#8617;</a></p>
<p id="footnote-13">13.
        Samelson, Klaus, and Friedrich L. Bauer. "Sequentielle formelübersetzung." it-Information Technology 1.1-4 (1959): 176-182.
 <a href="#footnote-13-ref">&#8617;</a></p>
<p id="footnote-14">14.
          Oettinger, Anthony.
          "Automatic Syntactic Analysis and the Pushdown Store"
          <cite>Proceedings of Symposia in Applied Mathematics</cite>,
          Volume 12,
          American Mathematical Society, 1961.
 <a href="#footnote-14-ref">&#8617;</a></p>
<p id="footnote-15">15.
        Oettinger 1961, p. 127.
 <a href="#footnote-15-ref">&#8617;</a></p>
<p id="footnote-16">16.
      Knuth 1965, p. 607, in the abstract.
 <a href="#footnote-16-ref">&#8617;</a></p>
<p id="footnote-17">17.
      Knuth 1961, pp. 637-639.
 <a href="#footnote-17-ref">&#8617;</a></p>
<p id="footnote-18">18.
      "One might choose to this [more aggressive lookahead]
      left-to-right translation.", Knuth 1965, p. 639.
 <a href="#footnote-18-ref">&#8617;</a></p>
<p id="footnote-19">19.
      That my conclusions about Knuth's skepticism are not misreadings
      is suggested by his own plans for his (not yet released) Chapter
      12 of the <cite>Art of Computer Programming</cite>,
      in which he planned to use pre-Chomskyan bottom-up methods. (See
      Knuth, Donald E., "The genesis of attribute grammars",
      <cite>Attribute Grammars and Their Applications</cite>,
      Springer, September 1990, p. 3.)
      In any case, and more importantly,
      after Knuth 1965
      the research community certainly was strongly
      skeptical of more general algorithms.
 <a href="#footnote-19-ref">&#8617;</a></p>
<p id="footnote-20">20.
        Knuth 1965, p. 607: "execution time at worst
        proportional to the length of the string being parsed."
 <a href="#footnote-20-ref">&#8617;</a></p>
<p id="footnote-21">21.
    Knuth 1965, p. 608.
 <a href="#footnote-21-ref">&#8617;</a></p>
  </body>
</html>
