A Language for writing languages
  <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      The Scanless interface is not yet two weeks old, but at this point
      I have reports from its users of completed applications.
      Significantly, two of them are for work.
      <h3>A JSON Parser</h3>
      The non work-related application is a JSON parser.
      Obviously, it easily <b>could</b> be work-related,
      and given it's available as gist,
      it may well be in production use by someone somewhere.
      It was written by Peter Stuifzand,
      runs 185 lines
      and took him less than 30 minutes to write.
      With Marpa's Scanless interface, it was a matter of
      typing in the grammar,
      and add a few Perl functions to provide the semantics.
      <p>There are, of course, other JSON parsers out there,
      and many of which run faster.
      These, however, took weeks to write.
      If you are, for example, thinking of extending JSON,
      and development time is a consideration,
      the Marpa-based solution may be the one for you.
      <h3>Printer escape codes</h3>
      Peter also did
      <a href="https://groups.google.com/d/msg/marpa-parser/n4ouLW0e6P8/vdrku9fczZEJ">
      a Marpa-based language for work</a> --
      a solution to the problem of printer escape codes.
      For those unfamilar, a printer's special features can often be invoked
      by "escape sequences" --
      byte sequences which control things like cursor motion, color, character sets,
      graphics, etc., etc.
      These can get quite fancy, but are usually very repetitive, and it's nice
      to wrap them in conveniently named functions.
      <p>Escape sequences can get quite fancy, but they're usually repetitive,
      and even when complex typically aren't very interesting.
      They can be programmed with regex or eval hacks,
      but Peter chose Marpa-based grammar-driven programming because he thought it
      would be faster.
      He was done in a hour.
      <h3>A more complicated example: A log file query language</h3>
      <p>Meanwhile, on the other side of the Atlantic, Paul Bennett
      was having to analyze a lot of nginx log files.
      For both of Peter's languages, he was able to start with
      them not only fully designed,
      but which with a formal specification
      that he could put in front of him as he typed.
      Paul needed to design his own.
      Peter had written Marpa-based languages prior to my release
      of the Scanless interface, so his times I have to assume include
      no learning curve.
      Paul apparently was able to teach himself to use Marpa's Scanless
      interface starting from a gist.
      (He doesn't say, but it could have been the one for
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2013/01/dsl_simpler2.html">
      this post</a>.)
      <p>Paul took a similar approach to the one Peter used for
      printer escapes -- his log query language compiles to Perl.
      Its writing and debugging
      spread out over 3 days that sound
      like they included a lot of log file analysis.
      <p>
      Paul reports that his language is on the job already,
      but that
      needs some clean-up before going in CPAN.
      I look forward to seeing it
      -- the snippets he shows seem to include 
      strings, integers and timestamps as supported types;
      regexes;
      adn the standard comparision and boolean operators,
      plus "any", "between" and "one" operators.
      Pretty good for 3 days.
      Perhaps a lot of nasty problems that think they have
      safely buried themselves in
      log files may soon be toast.
    <h3>Comments</h3>
    <p>
      Comments on this post
      can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
