Making DSL's even simpler
<!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
  <p>In a previous post, I showed how to make it easier to write
  domain-specific languages (DSLs).
  This post takes things one step further --
  using Marpa's new Scanless interface, it eliminates the need to
  write a separate scanner (lexer).
  <p>
  When it comes to dealing with a programming problem,
  no tool is as powerful and flexible as
  a custom language targeted at the problem domain.
  But writing a domain specific language (DSL) is among the
  least used approaches,
  and for what has been a very good reason --
  they have been very difficult to write.
  <p>This post takes a tutorial approach.
  It does <b>not</b> assume any knowledge of the previous tutorials
  on this blog.
  The full code for this post is in a Github gist.
  A very similar example is part of Marpa::R2's test suite.
  Our example DSL is a calculator.
  This calculator is designed to make a good example,
  more than as something you'd want to use.
  But it goes beyond the requirement for a "toy" example
  -- its 300 lines include good diagnostics and a test suite.
  <h3>The Grammar</h3>
  Let's start right in, by showing the grammar for our calculator:
  <blockquote>
  <pre>
my $rules = <<'END_OF_GRAMMAR';
:start ::= script
script ::= expression
script ::= script ';' expression action => do_arg2
reduce_op ::= '+' | '-' | '/' | '*'
expression ::=
     number
   | variable action => do_is_var
   | '(' expression ')' assoc => group action => do_arg1
  || '-' expression action => do_negate
  || expression '^' expression action => do_caret assoc => right
  || expression '*' expression action => do_star
   | expression '/' expression action => do_slash
  || expression '+' expression action => do_plus
   | expression '-' expression action => do_minus
  || expression ',' expression action => do_array
  || reduce_op 'reduce' expression action => do_reduce
  || variable '=' expression action => do_set_var

number ~ [\d]+
variable ~ [\w]+
:discard ~ whitespace
whitespace ~ [\s]+
# allow comments
:discard ~ <hash comment>
<hash comment> ~ <terminated hash comment> | <unterminated
   final hash comment>
<terminated hash comment> ~ '#' <hash comment body> <vertical space char>
<unterminated final hash comment> ~ '#' <hash comment body>
<hash comment body> ~ <hash comment char>*
<vertical space char> ~ [\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
<hash comment char> ~ [^\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
END_OF_GRAMMAR
</pre></blockquote>
