Making DSL's even simpler
<!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
  <p><a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/dsl.html">
  In a previous post</a>, I showed how to make it easier to write
      domain-specific languages (DSLs).
      This post takes things one step further.
      With Marpa's new Scanless interface, the programmer does not
      need to write a separate lexer.
    </p><p>
      When it comes to dealing with a programming problem,
      no tool is as powerful and flexible as
      a custom language targeted to the problem domain.
      But writing a domain specific language (DSL) is among the
      least used approaches,
      and for what has been a very good reason --
      DSL's have been very difficult to write.
    </p>
    <p>This post takes a tutorial approach.
      It does
      <b>not</b>
      assume any knowledge of the previous tutorials
      on this blog.
      <p>
      The full code for this post is in <a href="https://gist.github.com/4480523">
      a Github gist</a>.
      Our example DSL is a calculator.
      While better than shell arithmetic,
      this calculator is designed to more to act as a good example,
      more than as something you'd want to use.
      But it is not a "toy" example
      -- its 300 lines include good error reporting and a test suite.
    </p>
    <h3>The Grammar</h3>
    <p>
      Let's start right in, by showing the grammar for our calculator.
      It divides naturally into two parts.  Here is the first:
    </p><blockquote>
      <pre>
:start ::= script
script ::= expression
script ::= script ';' expression action =&gt; do_arg2
&lt;reduce op&gt; ::= '+' | '-' | '/' | '*'
expression ::=
     number
   | variable action =&gt; do_is_var
   | '(' expression ')' assoc =&gt; group action =&gt; do_arg1
  || '-' expression action =&gt; do_negate
  || expression '^' expression action =&gt; do_caret assoc =&gt; right
  || expression '*' expression action =&gt; do_star
   | expression '/' expression action =&gt; do_slash
  || expression '+' expression action =&gt; do_plus
   | expression '-' expression action =&gt; do_minus
  || expression ',' expression action =&gt; do_array
  || &lt;reduce op&gt; 'reduce' expression action =&gt; do_reduce
  || variable '=' expression action =&gt; do_set_var
</pre></blockquote>
    <p>The format of the grammar is documented
      <a href="https://metacpan.org/module/JKEGL/Marpa-R2-2.040000/pod/Scanless.pod">
        here</a>.
      It consists of BNF rules, whose left hand side (LHS) and right hand side (RHS)
      can be separated by the BNF operator (<tt>::=</tt>).
      The first rule is a pseudo-rule -- its LHS is the pseudo-symbol
      <tt>:start</tt>,
      and indicates that
      <tt>script</tt>
      is the grammar's start symbol.
      The next two rules indicate that
      <tt>script</tt>
      is a series of one
      or more
      <tt>expression</tt>'s, separated by a semicolon.
    </p><p>
      Rules can have action "adverbs"
      to describe the semantics.
      For example, the adverb "<tt>action =&gt; do_args</tt>"
      says that the semantics for
      the preceding RHS are implemented by a Perl closure named
      <tt>do_args</tt>.
    </p><p>The rule for
      <tt>&lt;reduce op&gt;</tt>
      introduces two new features: symbols names
      in angle brackets, and alternatives,
      separated by a veritcal bar, ("<tt>|</tt>").
    </p>
    <p>The last and longest rule, defined an <tt>expression</tt>,
    is a precedence rule.
      It is a series of alternatives, some separated by
      a single vertical bar,
      and others separated by a double vertical bar ("<tt>||</tt>").
      The double vertical bar indicates that the alternatives after it
      are at a looser ("lower") precedence than the alternatives before it.
      The single vertical bar separates alternatives at the same precedence level.
    </p><p>
      While Marpa's Scanless interface allows lexical and structural rules
      to be intermixed,
      it is usually convenient to have the lexical rules come after
      the structural rules:
    </p>
    <blockquote>
      <pre>
number ~ [\d]+
variable ~ [\w]+
:discard ~ whitespace
whitespace ~ [\s]+
# allow comments
:discard ~ &lt;hash comment&gt;
&lt;hash comment&gt; ~ &lt;terminated hash comment&gt; | &lt;unterminated
   final hash comment&gt;
&lt;terminated hash comment&gt; ~ '#' &lt;hash comment body&gt; &lt;vertical space char&gt;
&lt;unterminated final hash comment&gt; ~ '#' &lt;hash comment body&gt;
&lt;hash comment body&gt; ~ &lt;hash comment char&gt;*
&lt;vertical space char&gt; ~ [\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
&lt;hash comment char&gt; ~ [^\x{A}\x{B}\x{C}\x{D}\x{2028}\x{2029}]
END_OF_GRAMMAR
</pre></blockquote>
    <p>
      Rules in this second set of rules have
      the same syntax as rules in the first set,
      but instead of the BNF operator (<tt>::=</tt>),
      they have a match operator (<tt>~</tt>) separating the LHS and RHS.
      The BNF operator can be seen as telling Marpa, "When it comes to whitespace and comments,
      do what I
      <b>mean</b>".
      The match operator tells Marpa to "Do exactly what I
      <b>say</b>
      on a literal,
      character-by-characcter basis."
    </p><p>
      The first two lines indicate how
      <tt>number</tt>'s and
      <tt>variable</tt>'s
      are formed.
      The square bracketed character classes accept anything acceptable to Perl.
      <tt>:discard</tt>
      is another pseudo-symbol -- any lexeme recognized as a
      <tt>:discard</tt>
      symbol is thrown away.
    </p><p>
      This is how whitespace and comments are dealt with.
      Note that our calculator recognizes "hash comments",
      and takes some care to do the right thing even when the hash comment is at
      the end of a string which does not end in vertical whitespace.
      It is interesting to compare the representation of hash comments here with
      the usual regular expression notation.
      Regular expressions are much more concise, but the BNF-ish form is
      easier to read and,
      with long desciptive angle-bracketed symbol names,
      the reader can be saved from having to
      guess the purpose of some of the more obscure cases.
    </p><p>
      Now that we have defined the grammar, we need to pre-process it:
    </p><pre>
<!--
        html_fmt: An missing end tag was added to close the preceding <pre> element
      --><blockquote>
      my $grammar = Marpa::R2::Scanless::G-&gt;new(
      { action_object  =&gt; 'My_Actions',
      default_action =&gt; 'do_arg0',
      source =&gt; \$rules,
      }
      );
    </blockquote><!--
        html_fmt: Next end tag is cruft
      --></pre><!--
        html_fmt: Next end tag is cruft
      --></blockquote>
    <p>
      The
      <tt>action_object</tt>
      named argument specifies a package to implement
      the semantics -- Marpa will look up the names of the Perl closures in that
      package.
      The
      <tt>default_action</tt>
      named argument specified the action name for RHS's
      which do not explicitly specify one with an
      <tt>action</tt>
      adverb.
    </p>
    <h3>Running a parse</h3>
    <p>
      The next closure shows how to use the grammar to parse a string:
    </p><pre>
<!--
        html_fmt: An missing end tag was added to close the preceding <pre> element
      --><blockquote>
      sub calculate {
      my ($p_string) = @_;
      my $recce = Marpa::R2::Scanless::R-&gt;new( { grammar =&gt; $grammar } );
      my $self = bless { grammar =&gt; $grammar }, 'My_Actions';
      $self-&gt;{recce} = $recce;
      $self-&gt;{symbol_table} = {};
      local $My_Actions::SELF = $self;
      if ( not defined eval { $recce-&gt;read($p_string); 1 } ) {
      # Add last expression found, and rethrow
      my $eval_error = $EVAL_ERROR;
      chomp $eval_error;
      die $self-&gt;show_last_expression(), "\n", $eval_error, "\n";
      } ## end if ( not defined eval { $recce-&gt;read($p_string); 1 })
      my $value_ref = $recce-&gt;value();
      if ( not defined $value_ref ) {
      die $self-&gt;show_last_expression(), "\n",
      "No parse was found, after reading the entire input\n";
      }
      return ${$value_ref}, $self-&gt;{symbol_table};
      } ## end sub calculate
    </blockquote><!--
        html_fmt: Next end tag is cruft
      --></pre><!--
        html_fmt: Next end tag is cruft
      --></blockquote>
    <p>First we create a recognizer (aka a "recce") from our grammar.
      Next we defined a parse object named "<tt>$self</tt>".
      (Object enthusiasts will, I hope, forgive a certain awkwardness at this stage.)
    </p><p>We call the
      <tt>read()</tt>
      method on the recognizer with our string as
      its argument, check for errors,
      and then return the result.
      The calculator allows variables, whose values it keeps in a symbol table.
      These can be important side effect, so the symbol table is also returned
      by
      <tt>calculate()</tt>.
    </p>
    <h3>Dealing with errors</h3>
    <p>This calculator has error reporting that compares favorably with
      production languages.
      (Unfortunately, they often do not set the bar very high.)
      The Scanless interface, in its diagnostics will pinpoint where things
      went wrong from the technical point of view,
      and what it saw as the problem.
      This is often adequate as a diagnostic, but not always --
      the parsing may have ceased to reflect the programmer's intent before
      there was an actual parse error.
    </p><p>To help the programmer sync his intent with what Marpa saw,
      this calculator also prints the last
      <tt>expression</tt>
      successfully
      recognized.
      Here's the code that finds it:
    </p><blockquote>
      <pre>
sub show_last_expression {
    my ($self) = @_;
    my $recce = $self-&gt;{recce};
    my ( $start, $end ) = $recce-&gt;last_completed_range('expression');
    return 'No expression was successfully parsed' if not defined $start;
    my $last_expression = $recce-&gt;range_to_string( $start, $end );
    return "Last expression successfully parsed was: $last_expression";
} ## end sub show_last_expression
</pre></blockquote>
    <h3>The semantics</h3>
    <p>Here are a few of the simpler semantic closures:
    </p><blockquote>
      <pre>
sub do_set_var {
    my ( $self, $var, undef, $value ) = @_;
    return $self-&gt;{symbol_table}-&gt;{$var} = $value;
}

sub do_negate {
    return -$_[2];
}

sub do_arg0 { return $_[1]; }
sub do_arg1 { return $_[2]; }
sub do_arg2 { return $_[3]; }
</pre></blockquote>
    <p>I have found modern programmers
      are usually very comfortable with procedural coding.
      (As an aside, this accounts for the popularity of recursive descent
      and left parsing in general -- it makes parsing look procedural.)
      Things get more complicated than examples above,
      but the full code can be found in the gist.
    </p>
    <h3>Comments</h3>
    <p>
      Comments on this post
      can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
