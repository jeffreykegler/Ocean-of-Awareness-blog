A Marpa-powered C parser
  <p><!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      Jean-Damien Durand has written a very ambitious application of Marpa:
      A tool which parses C language into an abstract syntax tree (AST).
      Recently released, it is more than a prototype.
      It parses the Perl C source code, as well as Marpa's own.
      </p>
      <p>
      A C parser can take one of two strategies: approximate or precise.
      A compiler has, of course, to be precise.
      Tools, such as cross-referencers, often decide to be approximate, or sloppy.
      Sloppiness is easier to implement and has other advantages:
      Compilers require the user to get all the C flags right.
      A sloppy tool can tolerate missing flags: what the flags should be 
      can be one of the things it guesses at.
      </p>
      <p>Of the two strategies, Jean-Damien decided to go with "precise".
      MarpaX::Languages::C::AST follows the C11 standard,
      with either GCC or Microsoft extensions.
      This has the advantage that 
      MarpaX::Languages::C::AST could be used as the front end of a compiler.
      </p>
    <h3>Applying MarpaX::Languges::C::AST<h3>
    <p>To help check out MarpaX::Languges::C::AST, Jean-Damien created a tool which spots
    use of C reserved names.
    The standard diagnostics often do not catch violations of
    these.
    Some of the restrictions date from days when
    namespace management was less well understood than it is now and
    are, frankly, quite a nuisance.
    </p>
    <p>The C and POSIX reserved namespace restrictions are very often ignored,
    but they are quite real.
    Take as an example, this one:
    <blockquote>Additional
    macro definitions, beginning with <b>E</b> and a digit or <b>E</b> and an uppercase 
    letter, may also be specified by the implementation.
    </blockquote>
    Any implementation is free to define a new error code, say <tt>EIM</tt> for
    "Error you never IMagined would be defined".
    If it does defined <tt>EIM</tt> as an error code, any use of it by a programm is "undefined" -- the implementation
    is free to "break" in any way it finds convenient, and with or
    without notice.
    </p>
    <p>
    Using <tt>#undef</tt> is no help here -- the behavior for that case is also undefined.
    The standards committee wanted to allow tricky and optimized implementations of elements in the reserved namespace, so
    that a compiler is allowed to assume that a programmer user has not reappropriated a reserved name for his own
    purposes.
    </p>
    <p>I've been aware of these namespace issues for some time, but the list of this is
    long and complicated, and there are no diagnostics
    for violations of them.
    I suspected some has slipped into Marpa's 21,000 plus lines of C code.   
    And there were.
    </p>
    <p>
    My implementation of Earley's algorithm requires many types and it is convenient to have short
    abbreviations for things like Earley items and Earley sets.
    <tt>EIM</tt> and <tt>ES</tt> seemed like great choices.
    But of course they violate the error code namespace.
    (I told you these restrictions could be nuisances.)
    </p>
    <p>Also flagged as violations by Jean-Damien's utility were the variable names <tt>top_of_stack</tt> and
    <tt>token_type</tt>:
    "Function names that begin with either <tt>is</tt> or <tt>to</tt>,
    and a lowercase letter" are also reserved.
   That means that I had also transgressed by using
    <tt>isy_count</tt> and
    <tt>isy_by_right_isy_matrix</tt>.
    ("isy" is my short abbreviation for "internal symbol", and the last variable name shows why I need to use abbreviations --
    my types appear as part of other variables and they are far more readable with abbreviated type names.)
    </p>
    <p>How did the Perl 5.19.2 source fare?
    No better than Marpa's source, which appropriates these names from the reserved space:
    </p>
    <blockquote>
isa isa_changed isa_hash isa_hashes isarev isary ischop iscv isdst isg
isio islop islv ismatchop ismodifying ismore isreg isrel isuni isutf
todo toend token tokenbuf_len toketype tokid
tolen too too_deep top top2 top_index top_ptr top_si topelem
topgen_cmp topgv topmask topname
topsv toptab tot total total_elems
    </blockquote>
    </p>
    <p>
    <p>And, in fact, Perl's namespace troubles get deeper than Marpa's.
    So far, the examples have only included names reserved regardless of header inclusion.
    Marpa's C code does not do IO, and it is safe to assume it never will, so Marpa is free
    to ignore, for example, the namespace reserved for <tt>fcntl.h</tt>.
    <tt>fnctl.h</tt> reserves, among other things, the namespace starting with <tt>S_</tt>,
    No so Perl, and 
    Perl has 353 variables named in the alphabetical range from 
<tt>S_aassign_common_vars</tt> to <tt>S_yywarn</tt>.
    </p>
    <p>The namespace restrictions imposed by the C and POSIX standards are
    <a href="http://www.gnu.org/software/libc/manual/html_node/Reserved-Names.html">
    conveniently
    collected in GNU's manual for its libc library</a>.
    </p>
    <h3>To learn more</h3>
    <p>
      <a href="https://metacpan.org/module/Marpa::R2">Marpa::R2
        is available on CPAN</a>.
      A list of my Marpa tutorials can be found
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html#TUTORIAL">
        here</a>.
      There are
        new tutorials by
      <a href="http://marpa-guide.github.io/chapter1.html">Peter Stuifzand</a>
      and <a href="http://longanswers.blogspot.de/2013/06/transforming-syntax.html">amon</a>.
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/">
      The Ocean of Awareness blog</a>
      focuses on Marpa,
      and it has
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html">an annotated guide</a>.
      Marpa also has
      <a href="http://jeffreykegler.github.com/Marpa-web-site/">a web page</a>.
      For questions, support and discussion, there is
      <a href="http://groups.google.com/group/marpa-parser">
      the "marpa parser"
      Google Group.</a>
      Comments on this post can be made there.
    </p>
