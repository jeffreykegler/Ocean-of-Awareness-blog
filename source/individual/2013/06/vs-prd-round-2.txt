Marpa v. Parse::RecDescent: a rematch
  <h3>The application</h3><!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
--><p>
      In
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2013/06/mixing-procedural.html">
      a recent post</a>,
      I looked at an unusual language which serializes arrays and strings,
      using a mixture of counts and parentheses.  Here is an example:
    </p>
<blockquote><pre>
A2(A2(S3(Hey)S13(Hello, World!))S5(Ciao!))
</pre></blockquote>
    <p>
      The language is of special interest for comparison
      against recursive descent
      because, while simple, it requires procedural
      parsing -- a purely declarative BNF approach will not work.
      So it's a chance to find out if Marpa can play the game that is recursive descent's
      specialty.
      </p>
      <p>
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2013/06/mixing-procedural.html">
      The previous post</a>
      focused on how to use Marpa to mix
      procedural and declarative parsing together smoothly,
      from a coding point of view.
      It only hinted at another aspect: speed.
    Over the last year, Marpa has greatly improved its speed for this kind of application.
      The latest release of Marpa::R2 now clocks in almost 100 times faster than Parse::RecDescent for long inputs.
    </p>
    <h3>The benchmark</h3>
    <table align="center" cellpadding="5" border="1" width="100%">
      <tbody><tr><th rowspan="2">Length</th><th colspan="3">Seconds</th></tr>
        <tr>
          <th>Marpa::R2</th>
          <th>Marpa::XS</th>
          <th>Parse::RecDescent
          </th></tr>
        <tr><td>1000
          </td><td align="center">1.569
          </td><td align="center">2.938
          </td><td align="center">13.616
          </td></tr>
        <tr><td>2000
          </td><td align="center">2.746
          </td><td align="center">7.067
          </td><td align="center">62.083
          </td></tr>
        <tr><td>3000
          </td><td align="center">3.935
          </td><td align="center">13.953
          </td><td align="center">132.549
          </td></tr>
        <tr>
          <td>10000
          </td><td align="center">12.270
          </td><td align="center">121.654
          </td><td align="center">1373.171
          </td></tr>
      </tbody></table>
    <p>Parse::RecDescent is pure Perl, while Marpa is based on a parse
      engine in a library written in
      hand-optimized C.
      You'd expect Marpa to win this race and it did.
    </p>
    <p>
      And it is nice to see that the changes from Marpa::XS to Marpa::R2 have paid off.
      Included in the table are the Marpa numbers from my
      2012 benchmark of Marpa::XS.
      Marpa::R2 has a new interface
      and an internal lexer,
      and now beats Marpa::XS by a factor of up to 10.
      </p>
      <p>
      While the benchmarked language is ideally suited to show recursive descent to
      advantage, the input lengths were picked to emphasize Marpa's strengths.
      Marpa optimizes by doing a lot of precomputation,
      and is written with long inputs in mind.
      Though these days, a 500K source,
      longer than the longest tested, would not exactly set a new industry record.
    </p>
    <h3>To learn more</h3>
    <p>
      There are fuller descriptions of the language in
      <a href="http://blogs.perl.org/users/polettix/2012/04/parserecdescent-and-number-of-elements-read-on-the-fly.html">
        Flavio's post and code</a>,
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2013/06/mixing-procedural.html">
      and my recent post on how to write a parser for this language</a>.
      I talk more about the benchmark's methodology in
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/individual/2012/04/marpa-v-parserecdescent-some-numbers.html">
      my post on the 2012 benchmark</a>.
    </p>
    <p>
      <a href="https://metacpan.org/module/Marpa::R2">Marpa::R2
        is available on CPAN</a>.
      A list of my Marpa tutorials can be found
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html#TUTORIAL">
        here</a>.
      There is
      <a href="http://marpa-guide.github.io/chapter1.html">
        a new tutorial by Peter Stuifzand</a>.
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/">
        The Ocean of Awareness blog</a>
      focuses on Marpa,
      and it has
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html">an annotated guide</a>.
      Marpa also has
      <a href="http://jeffreykegler.github.com/Marpa-web-site/">a web page</a>.
      For questions, support and discussion, there is a
      Google Group:
      <code>marpa-parser@googlegroups.com</code>.
      Comments on this post can be made there.
    </p>
