The Design of Four
  <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      In the Perl world at the moment,
      a lot is being said about the consequences of bad design.
      A lot should be said.
      A lot needs to be said.
      But this post will not say those things.
    </p>
    <p>
      As useful as it is to study design failures,
      the exercise will come to nothing unless you
      also find some road to learning good design.
      This post will point out four
      Perl-centric
      projects which I believe must be accounted,
      not just successful,
      but so successful they are worth study as models.
    </p>
    <p>
      The projects are
      <a href="https://metacpan.org/release/ack">
      ack</a>,
      <a href="https://metacpan.org/release/App-cpanminus">
      cpanm</a>,
      <a href="https://metacpan.org/release/local-lib">local::lib</a> and
      <a href="https://metacpan.org/release/App-perlbrew">perlbrew</a>.
      Each of these is perfect
      in the older sense of "having all that is requisite to its nature and kind"
      (<a href="http://1828.mshaffer.com/d/word/perfect">Webster's 1828</a>).
	If you are into Perl,
	they are all widely useful,
	and looking at them as a potential or an actual user
	is the best way to gain an appreciation of the art behind them.
    </p>
    <p><tt>ack</tt> is a file search tool -- UNIX's grep with improvements.
      The improvements are influenced by a Perl sensibility,
      and <tt>ack</tt> is written in Perl.
      But while the other tools I list will be of little interest fi
      you don't speak Perl,
      <tt>ack</tt> is something that will benefit someone who otherwise shuns Perl tools.
    </p>
    <p>
      <tt>cpanm</tt> is for installing CPAN packages from CPAN.
      If you don't know what that means, you aren't interested.
      If you do, you want to be using it.
      It does everything you need and importantly, nothing more.
      The interface is without clutter.
      Like I said, perfect.
    </p>
    <p>
      <tt>local::lib</tt> is for installing Perl modules in the directory of your choice.
      Even if you have root permission on a system,
      it is good practice to leave the delivered Perl on your system
      untouched except by vendor-sponsored patches and updates.
      Leaving the system Perl untouched is wise, even if your system is single-user.
      On my Raspberry Pi, for example, it is almost certain that anyone
      will ever log in except for me.
      But I leave the Raspbian Perl as delivered.
      <tt>local::lib</tt> allows me to do this easily and conveniently.
      It has every feature and convenience I want.
      And reading its documentation is again an encounter with
      perfection.
      Every feature described is either something you need today,
      something you are worried you might need tomorrow,
      or something you were not worried you might need
      but should have been.
      There is nothing else.
      Perfect.
    </p>
    <p>
      Repeated perfection can be boring,
      a fact which I suspect plays no small role in its scarcity.
      So of <tt>perlbrew</tt>,
      I will simply say that it does for Perl versions and executables
      what <tt>local::lib</tt> does for Perl modules.
      Good practice dictates that you leave the Perl delivered with
      your distribution alone,
      <tt>perlbrew</tt> is the way to manage alternative Perl executables.
      And using it,
      is a good way to study yet another perfect interface.
    </p>
    <p>
      How did Andy Lester (<tt>ack</tt>),
      Tatsuhiko Miyagawa (<tt>cpanm</tt>),
      Matt S Trout (<tt>local::lib</tt>)
      and Kang-min Liu (<tt>perlbrew</tt>) do it?
      It might be tempting to say these were simpler
      problems and that our failures
      have come with projects that are
      more complex and harder to define.
    </p>
    <p>
      There is perhaps some truth in that.
      But I was quite familiar with the problem spaces tackled by <tt>ack</tt> and <tt>cpanm</tt>
      before those two tools came along,
      and they did not look simple.
      And while the problem spaces tackled by <tt>local::lib</tt> and <tt>perlbrew</tt> do very precisely
      defined to me now,
      I think my precise definitions come from using those tools --
      I am not at all sure I could have come up with it on my own.
      So the idea that these designs have the benefit of
      a lucky choice of which problem to tqckle,
      make me think of Ben Hogan's comment:
    </p>
    <blockquote>Golf is a game of luck.
      The more I practice, the luckier I get.
    </blockquote>
