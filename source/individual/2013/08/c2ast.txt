A Marpa-powered C parser
  <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      Jean-Damien Durand has just released
      <a href="https://metacpan.org/release/MarpaX-Languages-C-AST">
        MarpaX::Languages::C::AST</a>,
      which parses C language into an abstract syntax tree (AST).
      MarpaX::Languages::C::AST has been tested against
      Perl's C source code, as well as Marpa's own C source.
    </p>
    <p>
      Because it is Marpa-powered,
      MarpaX::Languages::C::AST works differently from other C parsers.
      In the past,
      C parsers have been syntax-driven -- parsing was based on a BNF description
      of the C grammar.
      More recently, C parsers have used hand-written
      recursive descent -- they have been procedurally-driven.
    </p>
    <p>
      MarpaX::Languages::C::AST uses both approaches.
      Marpa has the advantage that it makes full knowledge of the state of the parse
      available to the programmer,
      so that procedural logic and syntax-driven parsing can reinforce each other.
      The result is a combined lexer/parser
      which is very compact and easy to understand.
      Among the potential applications:
    </p>
    <ul>
      <li>Customized "lints".
        You can write programs to enforce C language standards
        and restrictions specific to an individual, a company or a project.
      </li>
      <li>C interpreters.
        By taking the AST and adding your own back end, you can create a special-purpose C interpreter
        or a special-purpose compiler.
      </li>
      <li>C variants.
        Because the code for the parser is compact and easy to modify,
        it lends itself to language extension and experimentation.
        For example,
        you could reasonably implement compilers
        to try out the proposals submitted to
        a standards committee.
      </li>
      <li>C supersets.
        Would you like to see some of the syntax from a favorite language available in C?
        Here's your chance.
      </li>
    </ul>
    <h3>The implementation</h3>
    <p>A few of Jean-Damien's implementation choices are worth noting.
      A C parser can take one of two strategies: approximate or precise.
      A compiler has, of course, to be precise.
      Tools, such as cross-referencers, often decide to be approximate, or sloppy.
      Sloppiness is easier to implement and has other advantages:
      A sloppy tool can tolerate missing C flags: what the C flags should be
      can be one of the things it guesses at.
    </p>
    <p>Of the two strategies, Jean-Damien decided to go with "precise".
      MarpaX::Languages::C::AST follows the C11 standard,
      with either GCC or Microsoft extensions.
      This has the advantage that
      MarpaX::Languages::C::AST could be used as the front end of a compiler.
    </p>
    <p>
      Because
      MarpaX::Languages::C::AST purpose is to take things as far as an AST,
      and let the user take over,
      it does not implement those constraints usually implemented in post-processing.
      One example of a post-syntactic constraint is the one that bans
      "<tt>case</tt>" labels outside of switch statements.
      Perhaps a future version can include a default "first phase" post-processor to enforce
      the constraints from the standards.
      As currently implemented, the user can check for and enforce these constraints in any
      way he likes.
      This makes it easier for extensions and customizations,
      which I think of as the major purpose of MarpaX::Languages::C::AST.
    </p>
    <h3>The parsing strategy</h3>
    <p>
      Those familar with the C parsing and its special issues may be interested in
      Jean-Damien's approach to them.
      MarpaX::Languages::C::AST is, with a few exceptions, syntax-driven -- the parser works
      from Marpa's SLIF, an extended BNF variant.
      The SLIF-driven logic is sufficient to deal with the
      <a href="http://en.wikipedia.org/wiki/Dangling_else">if-then-else issue</a>.
      Marpa handles right recursion in linear time,
      so that the if-then-else issue could have been dealt with by rewriting the relevant rules.
      But Jean-Damien wanted to have his BNF follow closely the grammar in the standards,
      and he decided to use Marpa's rule ranking facility instead.
    </p>
    <p>More complicated is the ambiguity in C between variable names and types,
      which actually takes C beyond BNF and context-free grammars into context-sensitive
      territory.
      Most C parsers deal with this using
      <a href="http://en.wikipedia.org/wiki/The_lexer_hack">lexer
        or post-processing hacks</a>.
      Marpa allows the parser to do this more elegantly.
      Marpa knows the parsing context at all times and can comnunicate this to a user's
      customized code.
      Marpa also has the ability to use the parsing context to
      decide when to
      switch control from the syntax-driven logic to
      a user's customized procedural logic,
      and for the syntax-driven logic to take control back
      when the procedural logic wants to give it back.
      This allows the variable-name-versus-type ambiguity to be handled by specifically targeted code
      which knows the full context of the decisions it needs to make.
      This code can be written more directly, simply and clearly
      than was possible with previous parsing methods.
    </p>
    <p>
    </p><h3>Compilers?</h3>
    <p>
      Above I mentioned special-purpose compilers.
      What about production compilers?
      MarpaX::Languages::C::AST's upper layers are in Perl,
      so the speed, while acceptable for special-purpose tools,
      will probably not be adequate for production.
      Perhaps a future Marpa-powered C parser will rewrite those
      upper layers in C, and make the race more interesting.
    </p>
    <h3>To learn more</h3>
    <p>
      <a href="https://metacpan.org/module/Marpa::R2">Marpa::R2
        is available on CPAN</a>.
      A list of my Marpa tutorials can be found
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html#TUTORIAL">
        here</a>.
      There are
      new tutorials by
      <a href="http://marpa-guide.github.io/chapter1.html">Peter Stuifzand</a>
      and
      <a href="http://longanswers.blogspot.de/2013/06/transforming-syntax.html">amon</a>.
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/">
        The Ocean of Awareness blog</a>
      focuses on Marpa,
      and it has
      <a href="http://jeffreykegler.github.io/Ocean-of-Awareness-blog/metapages/annotated.html">an annotated guide</a>.
      Marpa also has
      <a href="http://jeffreykegler.github.io/Marpa-web-site/">a web page</a>.
      For questions, support and discussion, there is
      <a href="http://groups.google.com/group/marpa-parser">
        the "marpa parser"
        Google Group.</a>
      Comments on this post can be made there.
    </p>
