High-level HTML Parsing
<p>
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
is a high-level HTML parser, built on top of
the very high-quality
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
module.
Why bother with high-level parsing,
especially if it means layering one parser on top of another?

<p>Here is
<a href="http://search.cpan.org/dist/HTML-Parser/Parser.pm#EXAMPLES">
an example,
taken
from the main document for HTML::Parser</a>.
The example prints out the title of an HTML document.
To do this, 
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
uses handlers which set up other handlers.
One handler finds the start tag,
then sets up two other handlers.
(I won't reproduce
that example here --
<a href="http://search.cpan.org/dist/HTML-Parser/Parser.pm#EXAMPLES">
it's on CPAN.</a>
)

<p>Here's the
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
code for printing the title.
It avoids the awkward state-driven switching of handlers.

<pre>
<code class="prettyprint">
say html(
    \$string_containging_html,
    {   'title' => sub { return Marpa::HTML::contents() },
        ':TOP'  => sub { return ( join q{}, @{ Marpa::HTML::values() } ) }
    }
);
</code>
</pre>

The code is fairly transparent.
<code class="prettyprint">html</code> is a static method.
Here it takes two arguments: a string with the html to be parsed, and
a hash specifying two handlers.
One handler returns the contents of title elements.
Another, top-level, handler takes all the values found below it,
joins them together, and returns them.
(<a href="http://search.cpan.org/dist/Marpa-HTML">Full
documentation is on CPAN</a>.)

<p>Finding titles is an unusually easy problem --
too easy to demonstrate the real advantage of using
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>.
The
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
solution for finding titles is as simple as it is,
only because it takes advantage of the special and unusually simple
properties of HTML <code class="prettyprint">title</code> elements.
There is only one title in a well-formed HTML document.
Most HTML elements can occur more than once.
Titles cannot be nested.
In standard use,
HTML elements are often nested to some depth.

<p>Suppose instead you want to print out, instead of the title,
all tables.
In that case you need to handle multiple elements,
and to deal with nested elements.
Here's the 
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
solution:

<pre>
<code class="prettyprint">
say html(
    \$html,
    {   'table' => sub { return Marpa::HTML::original() },
        ':TOP'  => sub { return ( join qq{\n}, @{ Marpa::HTML::values() } ) }
    }
);
</code>
</pre>

<p>Essentially the same code as for finding titles.
The
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
solution for titles "scales" to tables.
For nested tables, the above code returns the outermost table.
It will return as many outermost tables as your HTML contains.

<p>To use
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
to accomplish the same task, an application would have
to keep track of the high-level HTML structure,
perhaps using state logic and stacks.
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
has more of a track record, and a reader might reasonably think
some additional solution complexity is tolerable for that reason.
But I believe that any reader who tries the exercise of writing up
an
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
solution to this problem
will become willing to give
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
a try.

<p>The
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
module contains more examples,
and also contains documentation with
full explanations of how all of this works.
From that documentation,
here's an example
that's an especially happy
match of the solution's shape to the problem's structure.
This code determines the maximum
element depth of an HTML document:

<pre>
<code class="prettyprint">
sub depth_below_me {
    return List::Util::max( 0, @{ Marpa::HTML::values() } );
}
my %handlers_to_calculate_maximum_element_depth = (
    q{*}   => sub { return 1 + depth_below_me() },
    ':TOP' => sub { return depth_below_me() },
);
my $maximum_depth = html( \$string_containing_html_document,
    \%handlers_to_calculate_maximum_element_depth );
</code>
</pre>

<p>
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
does its job (low-level parsing) extremely well.
I've benefited not just from using it,
but from studying it.
But even with a time-tested
module like
<a href="http://search.cpan.org/dist/HTML-Parser">HTML::Parser</a>
in CPAN,
I think you'll find that
<a href="http://search.cpan.org/dist/Marpa-HTML">Marpa::HTML</a>
brings additional value.
