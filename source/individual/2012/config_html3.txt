Configuring the Ruby Slippers for HTML
  <p>
      <!--
      perl ./marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      This post is part of
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/metapages/annotated.html#PARSE_HTML">
        a series</a>
      describing Marpa::R2::HTML,
      a configurable HTML parser.
      The last two posts described how to change
      the context and contents of the HTML
      elements, both new and existing.
      This post describes how to configure
      optional start tags: how to change 
      which start tags
      are optional,
      and how to specify the circumstances
      in which they will be supplied.
    </p>
    <h3>How the parser works</h3>
    <p>
      In the first posts in this series I went into some detail describing
      my Marpa-based approach to HTML parsing.
      Briefly, it combines a parse engine using a "wishful thinking" grammar
      with a Ruby Slippers lexer.
      The "wishful thinking" grammar expects all elements,
      without exception,
      to have both start and end tags.
      This overstrict grammar demands tags even in cases
      where the
      <a href="http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline">
        HTML 4.01 Strict DTD</a>
      mandates that they be treated as optional.
    </p>
    <p>
      The overstrict grammar is liberalized by the Ruby Slippers.
      Marpa has an unusual property among parsers -- it is fully
      informed about the state of the parse at all points,
      and can conveniently and efficiently share that information
      with the application.
      In Marpa::R2::HTML, when the parse engine, with its
      overstrict grammar, grinds to a halt for lack
      of a tag that does not exist
      in the physical input,
      the lexer can ask the parse engine which tag it is looking for.
      It can then dummy one up, feed it to the parse engine,
      and start things back up.
      It's as simple as that.
    </p>
    <p>
      In the case of HTML end tags,
      the Ruby Slippers work stunningly well.
      Only one end tag will be expected at any point.
      In cases where a stack of elements must be properly terminated,
      the parse engine will request the end tags, one at a time,
      in proper order.
      The grammar can simplify life for itself by demanding a perfect
      world, and on the lexer's side, things are no harder -- it just
      has to do what it is told.
    </p>
    <p>
      For the very few start tags
      that are optional according to the Strict HTML 4.01,
      things are just as simple -- they occur in places where only one
      at a time will be demanded, and the Ruby Slippers lexer need
      only do what it is told to.
      However, if you want to further liberalize HTML, there will be
      cases where there is a choice between start tags;
      or between
      starting one element and ending another.
    </p>
    <h3>Configuring the Ruby Slippers</h3>
    <p>
      In the last post,
      I showed how to configure Marpa::R2::HTML to allow or disallow
      text directly in the
      <tt>&lt;body&gt;</tt>
      element.
      If Marpa::R2::HTML
      was configured to not allow 
      text directly in the
      <tt>&lt;body&gt;</tt>
      element,
      and it encountered such text,
      Marpa::R2::HTML would start a block.
      The block was started
      by supplying a
      <tt>&lt;p&gt;</tt>
      start tag in front of the text.
      In other words, Marpa::R2::HTML treated
      the
      <tt>&lt;p&gt;</tt>
      start tag as optional.
    </p>
      Let me give an example.
      Suppose the HTML document consisted of the string
    </p>
    <blockquote>
      <pre><tt>Hello, world</tt></pre>
    </blockquote>
    <p>
      and that, using the default configuration,
      we ran <tt>html_fmt</tt> as  follows:
    </p>
    <blockquote>
      <pre><tt>echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt --no-added-tag-comment</tt></pre>
    </blockquote>
    <p>
      This would be our result:
    </p>
    <blockquote>
      <pre><tt>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;
      Hello, world
    &lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</tt></pre>
    </blockquote>
    <p>
      This was produced using the default configuration which
      resides in
      <a href="http://api.metacpan.org/source/JKEGL/Marpa-R2-2.022000/g/config/default.txt">
        the
        <tt>g/config/default.txt</tt>
        file</a>.
      (All the examples is this post use version 2.022000 of Marpa::R2.)
    </p>
    <h3>First, the results</h3>
    <p>
      Let's change the behavior of 
      Marpa::R2::HTML so that,
      instead of starting a new
      <tt>&lt;p&gt;</tt>
      element,
      it will reject the text as cruft.
      We create a new configuration,
      putting it into a file named
      <tt>g/config/reject_text.txt</tt>.
    <p>
      Creating the
      configuration will not be difficult,
      but it will perhaps be easiest to understand
      if we first see the result
      that we are aiming at.
      Again we run <tt>html_fmt</tt>:
    </p>
    <blockquote>
      <pre><tt>echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt \
  --compile reject_pcdata.txt  --no-added-tag-comment</tt></pre>
    </blockquote>
    <p>
      And this is our new result:
    </p><blockquote><pre><tt>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!-- html_fmt: Next line is cruft --&gt;
    Hello, world
&lt;/body&gt;
</tt></pre>
    </blockquote>
    <p>Note that in this second example, there are no tags
      for the
      <tt>&lt;p&gt;</tt>
      element,
      and that the text is now labeled as "cruft", as desired.
    </p>
    <h3>How it was done</h3>
    <p>
      How would we change the default configuration file to refuse to start a new
      <tt>&lt;p&gt;</tt>
      element in front of text?
      The three relevant lines are:
    </p>
    <blockquote>
      <pre><tt>@block_rubies  = &lt;html&gt; &lt;head&gt; &lt;body&gt;
@inline_rubies = @block_rubies &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt;
PCDATA -&gt; @inline_rubies
</tt></pre>
    </blockquote>
    <p>The symbols with an "<tt>@</tt>" sigil are lists,
      which the configuration file uses as a convenient shorthand for groups
      of symbols which occur frequently.
      For convenience in this discussion,
      let's expand them, so that relevant extract looks like this
    </p>
    <blockquote>
      <pre><tt>PCDATA -&gt; &lt;html&gt; &lt;head&gt; &lt;body&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt;</tt></pre>
    </blockquote>
    <p>
      In the configuration file,
      <tt>PCDATA</tt>
      can be thought of as non-whitespace text,
      occurring in a context which is parsed
      for markup and entities.
      (Precisely, it is whatever
      HTML::Parser returns as text that is not whitespace
      and does not turn on the
      <tt>is_cdata</tt>
      flag.)
      What this line says is that, whenever
      a <tt>PCDATA</tt> token
      is rejected,
      Marpa::R2::HTML should try to fix the problem as follows:
    </p>
    <ul>
      <li>1. If possible, start an
        <tt>&lt;html&gt;</tt>
        element.
      </li>
      <li>2. Otherwise, if possible, start a
        <tt>&lt;head&gt;</tt>
        element.
      </li>
      <li>3. Otherwise, if possible, start a
        <tt>&lt;body&gt;</tt>
        element.
      </li>
      <li>4. Otherwise, if possible, start a
        <tt>&lt;tbody&gt;</tt>
        element.
      </li>
      <li>5. Otherwise, if possible, start a
        <tt>&lt;tr&gt;</tt>
        element.
      </li>
      <li>6. Otherwise, if possible, start a
        <tt>&lt;td&gt;</tt>
        element.
      </li>
      <li>7. Otherwise, if possible, start a
        <tt>&lt;p&gt;</tt>
        element.
      </li>
      <li>8. Otherwise, if it is possible to end
        a non-structural or a 
        <tt>&lt;head&gt;</tt>
	element at this point, do so.
	(At any point, it will be possible to end
	at most one element.)
      </li>
      <li>9. Finally, if nothing else works, mark the "PCDATA" as cruft.
      </li>
    </ul>
    <p>
      Of these alternatives, the first three allow Marpa::R2::HTML to supply missing
      structural start tags, as required by the standards.
      Alternatives 4, 5 and 6 allow Marpa::R2::HTML to continue building a table
      if table-building is in progress.
      (But note that the line does not allow Marpa::R2::HTML
      to deal with rejected
      PCDATA by starting a new table.)
      Alternative 7 allows Marpa::R2::HTML to start a new
      <tt>&lt;p&gt;</tt>
      element if PCDATA is rejected.
      <p>
      Alternatives 8 and 9 are implicit.
      By default, after all the explicit Ruby Slippers
      alternatives have been tried,
      Marpa::R2::HTML will create a Ruby Slippers tags
      for any end tag that is allowed,
      with two exceptions:
      Marpa::R2::HTML will not create
      <tt>&lt;/body&gt;</tt> and
      <tt>&lt;/html&gt;</tt> end tags except at the end of file.
      And Marpa::R2::HTML always reserves the possibility of,
      as a last resort,
      labeling a token as "cruft" and moving on.
    </p>
    <p>
      Once you understand how the Ruby Slippers configuration lines work,
      the fix in this case becomes obvious.
      In the expanded line,
      elminate the
      <tt>&lt;p&gt;</tt>
      as one of the alternatives considered for the Ruby Slippers.
      In terms of the expanded line,
      this means changing it to
    </p>
    <blockquote>
      <pre><tt>PCDATA -&gt; &lt;html&gt; &lt;head&gt; &lt;body&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;</tt></pre>
    </blockquote>
    <p>
      In terms of the original set of lines,
      this means changing the one for the
      <tt>@inline_rubies</tt>
      list:
    </p>
    <blockquote>
      <pre><tt>@inline_rubies = @block_rubies &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;</tt></pre>
    </blockquote>
    <p>
      In the Ruby Slippers configuration lines of
      the default configuration file,
      the <tt>@inline_rubies</tt> list is the only place that
      the
      <tt>&lt;p&gt;</tt> tag is mentioned.
      So changing
      <tt>@inline_rubies</tt>
      has effect
      of eliminating
      <tt>&lt;p&gt;</tt>
      as an optional start tag.
      Only <tt>&lt;p&gt;</tt> tags actually in the physical
      input will be recognized.
      This is what was actually done
      in the
      <a href="https://gist.github.com/3925571">
        <tt>g/config/reject_text.txt</tt>,
        configuration file used in our example</a>.
    </p>
    <h3>Code and comments</h3>
    <p>
      Comments on this post can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
