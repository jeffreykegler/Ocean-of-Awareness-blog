Configuring the Ruby Slippers for HTML
  <p>
      <!--
      perl ./marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      This post is part of
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/metapages/annotated.html#PARSE_HTML">
        a series</a>
      describing Marpa::R2::HTML,
      a configurable HTML parser.
      The last two posts described how to change
      the context and contents of the HTML
      elements, both new and existing.
      This post describes how to configure
      optional start tags -- which start tags
      are allowed to be optional,
      and under what circumstances.
    </p>
    <h3>Optional HTML tags</h3>
    <p>
      Every non-empty HTML element has, in concept,
      a start and an end tag,
      but the standards allow both to be omitted in circumstances
      where it is expected that the HTML parser
      can easily "do what you mean".
      The
      <a href="http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline">
        HTML 4.01 Strict DTD</a>
      allows end tags to be omitted for
      <tt>&lt;p&gt;</tt>
      and
      <tt>&lt;li&gt;</tt>
      elements, for example.
      For the structural elements,
      (<tt>&lt;html&gt;</tt>,
      <tt>&lt;head&gt;</tt>
      and
      <tt>&lt;body&gt;</tt>)
      both tags can be omitted.
      The same is true for the "table body" element (<tt>&lt;tbody&gt;</tt>).
    </p>
    <p>
      Marpa::R2::HTML goes well beyond the requirements of the standards.
      In Marpa::R2::HTML all end tags are optional,
      and which start tags are optional is up to you.
    </p>
    <h3>How the parser works</h3>
    <p>
      In the first posts in this series I went into some detail describing
      my Marpa-based approach to HTML parsing.
      Briefly, it combines a parse engine using a "wishful thinking" grammar
      with a Ruby Slippers lexer.
      The "wishful thinking" grammar expects all elements,
      without exception,
      to have both start and end tags.
      This overstrict grammar demands tags even in cases
      where the HTML 4.01 Strict DTD
      mandates that they be treated as optional.
    </p>
    <p>
      The overstrict grammar is liberalized by the Ruby Slippers.
      Marpa has an unusual property among parsers -- it is fully
      informed about the state of the parse at all points,
      and can conveniently and efficiently share that information
      with the application.
      In Marpa::R2::HTML, when the parse engine, with its
      overstrict grammar, grinds to a halt for lack
      of a tag that does not exist
      in the physical input,
      the lexer can ask the parse engine which tag it is looking for.
      It can then dummy one up, feed it to the parse engine,
      and start things back up.
      It's as simple as that.
    </p>
    <p>
      And in the case of HTML end tags,
      the Ruby Slippers work stunningly well.
      Only one end tag will be expected at any point.
      Even in cases where a stack of elements must be properly terminated,
      the parse engine will request the end tags, one at a time,
      in proper order.
      The grammar can simplify life for itself by demanding a perfect
      world, and on the lexer's side, things are no harder -- it just
      has to do what it is told.
    </p>
    <p>
      For start tags that are optional according to the Strict HTML 4.01,
      things are just as simple -- they occur in places where only one
      at a time will be demanded, and the Ruby Slippers lexer need
      only do what it is told to.
      However, if you want to further liberalize HTML, there will be
      cases where there is a choice between start tags, or between
      starting one element or ending another.
    </p>
    <h3>Configuring the Ruby Slippers</h3>
    <p>
      In the last post,
      I showed how to configure Marpa::R2::HTML to allow or disallow
      text directly in the
      <tt>&lt;body&gt;</tt>
      element.
      If Marpa::R2::HTML
      encountered text that was directly part of the
      <tt>&lt;body&gt;</tt>
      element
      and it was configured to not allow that,
      Marpa::R2::HTML would start a block
      by supplying a
      <tt>&lt;p&gt;</tt>
      start tag in front of the text.
      In other words, Marpa::R2::HTML treated
      the
      <tt>&lt;p&gt;</tt>
      start tag as optional.
    </p>
    <h3>First, the results</h3>
    <p>The configuration will not be difficult,
      but it is perhaps still best to first show the result
      that I am aiming at.
      Suppose the HTML document consists of the string
    </p>
    <blockquote>
      <pre><tt>Hello, world</tt></pre>
    </blockquote>
    <p>
      To see how this parses by default, we run
      <tt>html_fmt</tt>,
      as follows:
    </p>
    <blockquote>
      <pre><tt>echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt --no-added-tag-comment</tt></pre>
    </blockquote>
    <p>
      This is our result:
    </p>
    <blockquote>
      <pre><tt>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;
      Hello, world
    &lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</tt></pre>
    </blockquote>
    <p>
      This was produced using the default configuration which
      resides in
      <a href="http://api.metacpan.org/source/JKEGL/Marpa-R2-2.022000/g/config/default.txt">
        the
        <tt>g/config/default.txt</tt>
        file</a>.
      (All the examples is this post use version 2.022000 of Marpa::R2.)
    </p>
    <p>
      We want to a new configuration,
      call it
      <tt>g/config/reject_text.txt</tt>,
      that will not start a new
      <tt>&lt;p&gt;</tt>
      element,
      but instead reject the text as cruft.
      To see if it worked we can use
      <tt>html_fmt</tt>:
    </p>
    <blockquote>
      <pre><tt>echo 'Hello, world' |
/Users/jeffreykegler/perl5/bin/marpa_r2_html_fmt \
  --compile reject_pcdata.txt  --no-added-tag-comment</tt></pre>
    </blockquote>
    <p>
      This should be our result:
    </p><blockquote><pre><tt>&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;!-- html_fmt: Next line is cruft --&gt;
    Hello, world
&lt;/body&gt;
</tt></pre>
    </blockquote>
    <p>Note that in this second example, there are no tags
      for the
      <tt>&lt;p&gt;</tt>
      element,
      and that the text is now labeled as "cruft", as desired.
    </p>
    <h3>How it was done</h3>
    <p>
      How would we change the default configuration file to refuse to start a new
      <tt>&lt;p&gt;</tt>
      element in front of text?
      The three relevant lines are:
    </p>
    <blockquote>
      <pre><tt>@block_rubies  = &lt;html&gt; &lt;head&gt; &lt;body&gt;
@inline_rubies = @block_rubies &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt;
PCDATA -&gt; @inline_rubies
</tt></pre>
    </blockquote>
    <p>The symbols with an "<tt>@</tt>" sigil are lists,
      which the configuration file uses as a convenient shorthand for groups
      of symbols which occur frequently.
      For convenience in this discussion,
      let's expand them, so that relevant extract looks like this
    </p>
    <blockquote>
      <pre><tt>PCDATA -&gt; &lt;html&gt; &lt;head&gt; &lt;body&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt; &lt;p&gt;</tt></pre>
    </blockquote>
    <p>
      In the configuration file,
      <tt>PCDATA</tt>
      can be thought of as non-whitespace text.
      Precisely, it is whatever
      HTML::Parser returns as text that is not whitespace
      and does not have the
      <tt>is_cdata</tt>
      flag turned on.)
      What this line says, is, whenever
      <tt>PCDATA</tt>
      is rejected,
      try to fix the problem by
    </p>
    <ul>
      <li>1. If possible, starting an
        <tt>&lt;html&gt;</tt>
        element.
      </li>
      <li>2. Otherwise, if possible, starting an
        <tt>&lt;head&gt;</tt>
        element.
      </li>
      <li>3. Otherwise, if possible, starting an
        <tt>&lt;body&gt;</tt>
        element.
      </li>
      <li>4. Otherwise, if possible, starting an
        <tt>&lt;tbody&gt;</tt>
        element.
      </li>
      <li>5. Otherwise, if possible, starting an
        <tt>&lt;tr&gt;</tt>
        element.
      </li>
      <li>6. Otherwise, if possible, starting an
        <tt>&lt;td&gt;</tt>
        element.
      </li>
      <li>7. Otherwise, if possible, starting an
        <tt>&lt;p&gt;</tt>
        element.
      </li>
      <li>8. Otherwise, by ending whatever element it is possible to end
        at this point.  (There will be at most one.)
      </li>
      <li>9. Finally, if nothing else works, by marking the "PCDATA" as cruft.
      </li>
    </ul>
    <p>
      Of these alternatives, the first three allow Marpa::R2::HTML to supply missing
      structural tasks, as required by the standards.
      Alternatives 4, 5 and 6 allow Marpa::R2::HTML to continue building a table
      if table-building is in progress.
      (But note that the line does not allow Marpa::R2::HTML
      to deal with rejected
      PCDATA by starting a new table.)
      Alternative 7 allows Marpa::R2::HTML to start a new
      <tt>&lt;p&gt;</tt>
      element if PCDATA is rejected.
      Alternatives 8 and 9 are implicit.
      By default, after all the explicit Ruby Slippers
      alternatives have been tried,
      Marpa::R2::HTML will create a Ruby Slippers tags
      for any end tag that is allowed.
      And Marpa::R2::HTML always reserves the possibility of,
      as a last resort,
      labeling a token as "cruft" and moving on.
    </p>
    <p>
      Once you understand how the Ruby Slippers configuration lines work,
      the fix in this case becomes obvious.
      In the expanded line,
      elminate the
      <tt>&lt;p&gt;</tt>
      as one of the alternatives considered for the Ruby Slippers.
      In terms of the expanded line,
      this means changing it to
    </p>
    <blockquote>
      <pre><tt>PCDATA -&gt; &lt;html&gt; &lt;head&gt; &lt;body&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;</tt></pre>
    </blockquote>
    <p>
      In terms of the original set of lines,
      this means changing the one for the
      <tt>@inline_rubies</tt>
      list:
    </p>
    <blockquote>
      <pre><tt>@inline_rubies = @block_rubies &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;</tt></pre>
    </blockquote>
    <p>
      In the default configuration file,
      changing
      <tt>@inline_rubies</tt>
      has effect
      of elimination the
      <tt>&lt;p&gt;</tt>
      start tag
      as a Ruby Slippers token in all cases,
      and this is what was actually done
      in the
      <a href="https://gist.github.com/3925571">
        <tt>g/config/reject_text.txt</tt>,
        configuration file used in our example</a>.
    </p>
    <h3>Code and comments</h3>
    <p>
      Comments on this post can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
