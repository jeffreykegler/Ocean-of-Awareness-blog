A configurable HTML parser, part 2
  <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      <a href="http://jeffreykegler.github.com/Ocean-of-Awareness-blog/individual/2012/config_html.html">
        My last post</a>
      introduced Marpa::R2::HTML,
      a configurable HTML parser.
      By editing
      <a href="https://gist.github.com/3901637">
        a configuration file</a>,
      the user can change
      the variant of HTML
      being parsed.
      The changes allowed are very wide ranging.
      The previous post started with simple changes --
      the ability to specify the contents of new tags,
      and the context in which they can appear.
    </p>
    <p>
      In this post the changes get more aggressive.
      I change the contents of an existing HTML element --
      and not just any element, but
      one of the HTML's three "structural" elements.
      Marpa::R2::HTML allows the configuration file to change
      the contents of all pre-existing
      elements, with the exception of the highest level of the three
      structural elements:
      the
      <tt>&lt;html&gt;</tt>
      element itself.
    </p>
    <h3>Can text appear directly in an HTML body?</h3>
    <p>
      This post will discuss changing the contents of the
      <tt>&lt;body&gt;</tt>
      element.
      Fundamental to the HTML document as this element as it is,
      the definition of its contents has been very much in play.
    </p>
    <p>
      Let's start with the question posed in the title of this section:
      Can text appear directly in an HTML
      <tt>
        &lt;body&gt;</tt>
      element?
      That is, must text inside an HTML
      <tt>
        &lt;body&gt;</tt>
      be part of one of its child elements,
      or can it be directly part of the contents
      of the
      <tt>
        &lt;body&gt;</tt>
      element?
    </p><p>
      If you want an
      answer strictly according to the standards,
      then you get your choice in the matter.
      According to the
      <a href="http://www.w3.org/TR/1999/PR-html40-19990824/sgml/dtd.html#inline">
        HTML 4.01 Strict DTD</a>,
      the
      <tt>&lt;body&gt;</tt>
      contains a "block flow",
      which means that
      the answer is "No, text must be in the contents of a child element".
      Implementations of HTML were encouraged to be liberal, however,
      and in practice a lot of the HTML "out there"
      has text directly
      in
      <tt>&lt;body&gt;</tt>
      elements.
      Users expect their browsers to render these pages
      in the way that the writer intended them to look.
    </p>
    <p>
      Recognizing existing practice,
      HTML 5 changed to require conforming implementations to
      allow text to be interspersed with the block flow,
      in what I call a "mixed flow".
      A mixed flow can directly contain blocks and text,
      as well as inline elements.
      (The inline vs. block element distinction is basic to HTML parsing.
      See my earlier post or
      <a href="http://en.wikipedia.org/wiki/HTML_element">
        the well-organized Wikipedia page on HTML elements</a>.)
    </p>
    <h3>Block or mixed flow?</h3>
    <p>
      When parsing HTML, do you want to the treat contents of the body
      as a block flow or a mixed flow?
      Here are some of the factors.
    </p><ul>
      <li>
        Common practice requires accepting a mixed flow.
      </li><li>
        Cautious practice suggests writing a block flow.
      </li><li>
        HTML 4.01 requires block, but suggests being liberal.
      </li><li>
        HTML 5 requires that a mixed flow be accepted.
      </li><li>
        But HTML5 also requires that the mixed flow be displayed as if it was written
        in blocks and
        suggests that explicit blocking be used to eliminate
        ambiguities.
      </li></ul>
    <h3>Examples</h3>
    <h4>Body contains block flow</h4>
    <p>
      In this first example,
      the
      <tt>&lt;body&gt;</tt>
      contains a block flow.
      This is what is specified in
      <a href="https://gist.github.com/3901637">
        the default configuration file</a>.
      Here is the pertinent line:
    </p><blockquote>
      <pre><tt>
&lt;body&gt; is *block
</tt></pre></blockquote><p>
      This line says
      that the
      <tt>
        &lt;body&gt;</tt>
      element contains a block flow (<tt>*block</tt>).
      Here the star is a sigil which suggests the repetition operator
      of DTD's and regular expressions.
      (Readers of my last post will notice I've changed the configuration
      file syntax and will,
      I hope,
      find the new format an improvement.)
    </p><p>
      For the examples in this post,
      the HTML will be
    </p><blockquote>
      <pre><tt>
I cannot wait for a start tag&lt;p&gt;I can
</tt></pre></blockquote><p>
      We run this through the
      <tt>marpa_r2_html_fmt --no-added-tag-comment</tt>.
      Here is the output:
    </p><blockquote>
      <pre><tt>
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;
      I cannot wait for a start tag&lt;/p&gt;&lt;p>
      I can&lt;/p&gt;&lt;/body>
&lt;/html&gt;
</tt></pre></blockquote><p>
      The first thing the parser encounters is text,
      which in this example is not allowed
      to occur directly in the body.
      As part of being highly liberal HTML parser,
      however, Marpa::R2::HTML will supply a start tag
      in these situations.
      (This behavior, by the way, is also configurable --
      a change to the configuration file will
      tell Marpa::R2::HTML not to do this.)
      With its two
      <tt>&lt;p&gt;</tt>
      start tags,
      one of them conjured up by the Ruby Slippers,
      Marpa::R2::HTML breezes through input.
    </p>
    <h4>Body contains mixed flow</h4>
    <p>
      In the second example, we liberalize the contents of
      the
      <tt>&lt;body&gt;</tt>
      to allow a mixed flow:
    </p><blockquote>
      <pre><tt>
&lt;body&gt; is *mixed
</tt></pre></blockquote><p>
      Here is the result:
    </p><blockquote>
      <pre><tt>
&lt;html&gt;
  &lt;head&gt;
  &lt;/head&gt;
  &lt;body&gt;
    I cannot wait for a start tag&lt;p&gt;
      I can&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;
</tt></pre></blockquote>
    <p>
      In a mixed flow, no
      second
      <tt>&lt;p&gt;</tt>
      start tag
      is needed, and none is created.
      Its matching end tag
      (<tt>&lt;/p&gt;</tt>) also does not
      have to be created.
      Otherwise, all is as before.
    </p>
    <h3>What I decided</h3>
    <p>
      Before I figured out how to make my HTML parser configurable,
      I had to make a decision.
      My first
      implementation of the
      <tt>html_fmt</tt>
      utility was based on Marpa::XS
      and
      its grammar specified a mixed flow.
      When I started a new version
      of the utility
      for Marpa::R2,
      I decided that it produced a more precise parse
      when I used a stricter grammar,
      leaving it to the Ruby Slippers to "loosen things up"
      when the grammar was too strict.
      This was close, I hoped, to the best of both worlds,
      so I changed.
      This second choice -- strict block-flow-body grammar and liberal Ruby Slippers --
      remains the default in the configurable version.
    </p>
    <p>
      In Marpa::R2's current developer's releases,
      and in its next indexed release,
      both the grammar and the Ruby Slippers are configurable.
      The user gets to decide what she wants at runtime.
    </p>
    <h3>Code and comments</h3>
    <p>
      The examples here were run using Marpa::R2 release 2.021_010.
      They are part of its test suite and can be found in the
      <tt>html/t/cfg_fmt.t</tt> file.
    </p>
    <p>
      The configurable Marpa::R2::HTML does considerably more than
      can be comfortably described in a single post.
      This post is the second of a series.
      Comments on this post can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
  </body>
</html>
