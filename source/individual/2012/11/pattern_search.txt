A Marpa tutorial: Pattern searches
  <h3>Pattern searches</h3>
    <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment --no-ws-ok-after-start-tag
      -->
      In usual practice these days, we use regular expression engines for pattern searching.
      This standard practice works very beautifully --
      if the target pattern is a regular expression.
    </p>
    <p>
      But if what you were searching for was not a regular expression?
      Sometimes you could approximate with an over-liberal regular expression,
      and sort out the false positives by other means.
      Other times you were simply out of luck.
    </p>
    <p>
      In this post I will show how to use Marpa to search text files for
      arbitrary context-free expressions.
      The search target that
      I will use in this example,
      is one that is clearly beyond a regular
      expression search: arithmetic expressions.
    </p>
    <p>
      This tutorial builds on earlier tutorials.
      It is be possible to simply dive into it,
      following up on unfamiliar aspects
      in the Marpa documentation,
      but it may be easier
      to start with those earlier posts.
    </p>
    <h3>The grammar</h3>
    <p>
      Even the arithmetic subset of Perl expressions is quite complex,
      but in this case we can get the job done
      with a dozen or so lines of grammar and a table-driven lexer.
      Here is the grammar:
    </p>
    <blockquote>
      <pre>
    <tt>
start ::= prefix target
prefix ::= any_token*
target ::= expression
expression ::=
       number | scalar | scalar postfix_op
    || op_lparen expression op_rparen assoc =&gt; group
    || unop expression
    || expression binop expression`
    </tt>
    </pre>
    </blockquote>
    <p>
      This grammar uses Marpa::R2's BNF interface, which is documented here.
      It takes considerable advantage of the fact that we are not
      <b>parsing</b>
      these expressions, but
      <b>recognizing</b>
      them.
      Because of this, we don't have to specify whether expressions left- or right-associate.
      We can also ignore what operators mean and group them according to syntax only
      -- binary, prefix unary and postfix unary.
      Similarly, we can ignore the precedence within these large groups.
      This leaves us with numbers, scalars,
      binary, prefix unary and postfix unary operators
      and parentheses.
      (To keep this example simple, this code only deals with Perl scalars.)
    </p>
    <p>
      What we are searching for is defined by the
      <tt>target</tt>
      symbol.
      For <tt>target</tt>
      you could substitute any context-free grammar,
      and the technique of this example would still work.
      To turn a parser for <tt>target</tt>
      into a pattern searcher, we add a new start
      symbol (unimaginatively named "<tt>start</tt>")
      and two rules that
      allow the target to have a
      <tt>prefix</tt>,
      and use Marpa's ability to do ambiguous parsing.
    </p>
<h3>Ambiguous parsing</h3>
<p>This method will make simple use of three advanced techniques.
Ambiguous parsing is the first of them.
Some use of ambiguous parsing is not unfamiliar even in
standard parsing.
For example, the C grammar contains a small ambiguity,
</p>
<p>
At any where this example has found a target,
it will have, in effect, at least two parses going.
One parse, which is always going,
      extends the prefix.
      The prefix will never end, because
      any token (literally
      <tt>any_token</tt>)
      extends it.
</p>
<p>
In addition, we may be recognizing a
      <tt>target</tt>,
      we will have its parses going.
I say "parses" because the target can be ambiguous,
although in this case it is not.
    </p>
    <p>
Ambiguous parsing has a serious potential downside --
      it is not necessarily efficient.
      But Marpa can parse many types of ambiguous grammar in linear time and,
      as long as the target is unambiguous,
      this kind of "prefix and pattern" grammar will be one of them.
Keeping the prefix going requires a tiny constant overhead per token.
    </p>
    <h3>The lexer table</h3>
    <p>
      The lexer is driven by a table of pairs: token name and regex.
    </p><blockquote>
      <pre>
<tt>
my @lexer_table = (
    [ number     =&gt; qr/(?:\d+(?:\.\d*)?|\.\d+)/xms ],
    [ scalar     =&gt; qr/ [\$] \w+ \b/xms ],
    [ postfix_op =&gt; qr/ [-][-] | [+][+] /xms ],
    [ unop       =&gt; qr/ [-][-] | [+][+] /xms ],
    [   binop =&gt; qr/
          [*][*] | [&gt;][&gt;] | [&lt;][&lt;]
        | [*] | [\/] | [%] | [x] \b
        | [+] | [-] | [&amp;] | [|] | [=] | [,]
    /xms
    ],
    [   unop =&gt; qr/ [-] | [+] | [!] | [~] /xms
    ],
    [ op_lparen =&gt; qr/[(]/xms ],
    [ op_rparen =&gt; qr/[)]/xms ],
);
</tt>
</pre>
    </blockquote>
    <p>
      Order is significant here -- in particular
      two-character operators are checked for first,
      so that a prefix
      <tt>--</tt>
      will be seen as an
      increment operator, and not as a double negation.
    </p>
    <h3>The main loop</h3>
    <p>
      The main loop iterates through input looking for tokens.
      Whitespace is skipped.
      Note that comments are not skipped.
      Finding arithmetic expressions in
      strings and/or comments can be highly useful,
      and we will assume that in this case that it is.
    </p>
    <p>
      The most interesting action is inside the
      <tt>FIND_ALTERNATIVE</tt>
      block, where the order of the lexing table is combined with
      "Ruby Slippers" parsing.
      The "Ruby Slippers" parsing technique solves difficult lexing
      and parsing problems by asking the parser, at the problem point,
      what it is looking for.
      This seems a fairly obvious approach,
      but the Ruby Slippers is new with Marpa --
      previous parsers could not provide this information conveniently
      or efficiently.
    </p>
    <p>
      As an example,
      a real problem here is minus signs,
      which can negate a number,
      be a subtraction operation,
      or be part of a decrement operation (postfix or prefix).
      Some of this issue is dealt with by the lexer.
      The order of lexer table puts two-character operators,
      like decrement,
      ("<tt>--</tt>")
      before one-character operators,
      such as negation
      ("<tt>-</tt>").
    </p><p>In this lexer, an initial minus sign is never part of a number.
      A number constant is always positive, though it may have
      a unary negation operator in front of it.
      PPI sometimes includes initial minus signs in numeric
      constants. Unfortunately, lacking the Ruby Slippers,
      it will do this in cases where the minus
      sign is actually a binary operator.
    </p>
    <p>
      The
      <tt>FIND_ALTERNATIVE</tt>
      loop is short,
      but worth a careful look.
      It tries every lexeme, in lexer table order.
      If the
      <tt>alternative()</tt>
      method
      returns a Perl
      <tt>undef</tt>,
      it means the token was "rejected".
      This means the parser was not expecting it.
      Unlike most parsers in use today, Marpa is 100% accurate about
      what tokens can and cannot result in a successful parse.
    </p>
    <p>
      This means that Marpa knows whether a minus sign can be
      a unary or binary operator.
      (Because of Perl's grammar, it can be one or the other,
      but never both in the same position.)
      This is the Ruby Slippers in action --
      a very simple solution to what for
      <tt>perly.y</tt>
      and PPI is a very complicated problem.
    </p>
    <p>
      Once the right token has been determined, the
      <tt>alternative()</tt>
      method is called again to
      ready in an
      <tt>any_token</tt>.
      (Marpa allows ambiguous lexing --
      the same character can be read as two different
      tokens.)
      If the entire lexer table is tried, and no acceptable
      lexeme is found,
      a single character is read as an
      <tt>any_token</tt>.
    </p>
    <blockquote>
      <pre>
<tt>
my $length = length $string;
pos $string = $positions[-1];
TOKEN: while ( pos $string &lt; $length ) {
    next TOKEN if $string =~ m/\G\s+/gcxms;    # skip whitespace
    my $position = pos $string;
    FIND_ALTERNATIVE: {
        TOKEN_TYPE: for my $t (@lexer_table) {
            my ( $token_name, $regex ) = @{$t};
            next TOKEN_TYPE if not $string =~ m/\G($regex)/gcxms;
            if ( not defined $recce-&gt;alternative($token_name) ) {
                pos $string = $position;       # reset position for matching
                next TOKEN_TYPE;
            }
            $recce-&gt;alternative('any_token');
            last FIND_ALTERNATIVE;
        } ## end TOKEN_TYPE: for my $t (@lexer_table)
        ## Nothing in the lexer table matched
        ## Just read the currrent character as an 'any_token'
        pos $string = $position + 1;
        $recce-&gt;alternative('any_token');
    } ## end FIND_ALTERNATIVE:
    $recce-&gt;earleme_complete();
    my $latest_earley_set_ID = $recce-&gt;latest_earley_set();
    $positions[$latest_earley_set_ID] = pos $string;
} ## end TOKEN: while ( pos $string &lt; $length )
</tt>
</pre>
    </blockquote>
    <p>
      The
      <tt>earleme_complete()</tt>
      method tells Marpa that all the alternatives
      for that location have been entered.
      (Marpa's idea of location is called an "earleme", in honor of the great
      parsing theorist, Jay Earley.)
    </p>
    <h3>Finding the targets</h3>
    <p>
      Once the parse is complete, it remains to find
      and print the "targets" found
      by the search.
      In a previous post,
      I showed how, for error reporting, to find the last symbol found,
      given a symbol name.
      That routine needs to be modified to allow repeated searches.
      The code is in the gist,
      and was explained in the previous post,
      so I won't repeat here.
    </p>
    <h3>Pattern searching and incremental development</h3>
    <p>
    You may notice that this pattern searcher is also
    a start on a Perl parser.
    The first priority would have to be restoring proper associativity
    and precedence to the expressions.
    This can be done by copying the
    table at the beginning of the perlop man page
    into the precedence statement in the grammar.
    </p>
    <p>
    From this start, you would adding more and more syntax to the grammar,
    and more and more recognition to the lexer.
    As you expanded the pattern searcher, the target would gradually become
    closer and closer to the entire language.
    </p>
    <p>
    When, for all valid input files, your pattern searcher always finds
    a single match that spans the input file, you can remove rules which
    parse the prefix, and make <tt>target</tt> the new start symbol.
    Or you may wish to keep them, as an aid to error reporting.
    Either way, your parser is finished.
    My own experience is that parsers are far easier
    to write
    if you can build them incrementally,
    taking advantage of the kind of feedback that Marpa allows.
    </p>
    <h3>Comments</h3>
    <p>The example in this post was run with Marpa::R2 2.024000,
      as of this writing the latest full release.
      Comments can be sent to the Marpa Google Group:
      <code>marpa-parser@googlegroups.com</code>
    </p>
