A Marpa DSL tutorial: Error reporting made easy.
    <p>
      <!--
      marpa_r2_html_fmt --no-added-tag-comment
      -->
      Marpa's facilities for error reporting are new.
      Using them, your quickie domain-specific language can,
      as of its first draft,
      have error reporting whose helpfulness and precision exceeds 
      that of carefully hand-crafted production compilers.
      <p>
      This post will give an example.
      Two techniques will be used.
      First and most basic, 
      in the technical sense, Marpa's knowledge of when the parse
      could not longer proceed is 100% accurate and immediate.
      (This is not the case with yacc-derived parsers and not usually the
      case with recursive descent parsers.)
      <p>
      The second technique is new with the post.
      Marpa also knows, at any point, the entire history of the parse.
      This is the case even if the parse fails.
      So you can ask the Marpa parser questions, like,
      <blockquote><p>
      "What was the last statement you successfully parsed?"
      "What was the last expression you successfully parsed?"
      "The last block you successfully parsed, where did it end?"
      </p>
      </blockquote>
      <p>
      Imagine that you C compiler or 4GL interpreter reported this
      information every time you made an error.
      Your work would be a lot faster.
      For users of your next DSL, you don't have to imagine -- this
      kind of error-reporting will be a standard feature
      from its earliest versions.
      <h3>The language</h3>
      <p>
      To focus on the logic of the error reporting,
      I picked a language that was error-prone,
      but otherwise as simple as possible.
      For this purpose,
      prefix arithmetic is like a gift from the dakinis.
      Simple in concept,
      it is almost impossible to get right when it is more than a few
      characters long,
      and confusing to read.
      <q>say + 1 2</q> and
      <q>+++ 1 2 3 + + 1 2 4</q> are two correct strings in this
      language.
      Their results are, in order, 3 and 13.
      <p>
      I restricted the calculator to addition, because even with one
      operator, prefix notation is confusing enough to serve our purposes.
      I have included an optional <tt>say</tt> keyword, in order
      to illustrate rejection of a token by type.
      In pure prefix arithmetic, either all tokens are valid or none are.
      The <tt>say</tt> keyword is only valid as the first token.
      <h3>The grammar</h3>

<pre><tt>
my $prefix_grammar = Marpa::R2::Grammar-&gt;new(
    {   start          =&gt; 'Script',
        actions        =&gt; 'My_Actions',
        default_action =&gt; 'do_arg0',
        rules          =&gt; [ &lt;&lt;'END_OF_RULES' ]
Script ::=
     Expression
   | kw_say Expression action =&gt; do_arg1
Expression ::=
     Number
   | op_add Expression Expression action =&gt; do_add
END_OF_RULES
    }
);

sub My_Actions::do_add  { shift; return $_[1] + $_[2] }
sub My_Actions::do_arg0 { shift; return shift; }
sub My_Actions::do_arg1 { shift; return $_[1]; }

$prefix_grammar-&gt;precompute();

my @terminals = (
    [ Number =&gt; qr/\d+/xms,   'Number' ],
    [ op_add =&gt; qr/[+]/xms,   'Addition operator' ],
    [ kw_say =&gt; qr/say\b/xms, qq{"say" keyword} ],
);

sub My_Error::last_completed_range {
    my ( $self, $symbol_name ) = @_;
    my $grammar      = $self-&gt;{grammar};
    my $recce        = $self-&gt;{recce};
    my @sought_rules = ();
    for my $rule_id ( $grammar-&gt;rule_ids() ) {
        my ($lhs) = $grammar-&gt;bnf_rule($rule_id);
        push @sought_rules, $rule_id if $lhs eq $symbol_name;
    }
    die "Looking for completion of non-existent rule lhs: $symbol_name"
        if not scalar @sought_rules;
    my $latest_earley_set = $recce-&gt;latest_earley_set();
    my $earley_set        = $latest_earley_set;

    # Initialize to one past the end, so we can tell if there were no hits
    my $first_origin = $latest_earley_set + 1;
    EARLEY_SET: while ( $earley_set &gt;= 0 ) {
        my $report_items = $recce-&gt;progress($earley_set);
        ITEM: for my $report_item ( @{$report_items} ) {
            my ( $rule_id, $dot_position, $origin ) = @{$report_item};
            next ITEM if $dot_position != -1;
            next ITEM if not scalar grep { $_ == $rule_id } @sought_rules;
            next ITEM if $origin &gt;= $first_origin;
            $first_origin = $origin;
        } ## end ITEM: for my $report_item ( @{$report_items} )
        last EARLEY_SET if $first_origin &lt;= $latest_earley_set;
        $earley_set--;
    } ## end EARLEY_SET: while ( $earley_set &gt;= 0 )
    return if $earley_set &lt; 0;
    return ( $first_origin, $earley_set );
} ## end sub My_Error::last_completed_range

# Given a string, an earley set to position mapping,
# and two earley sets, return the slice of the string
sub My_Error::input_slice {
    my ( $self, $start, $end ) = @_;
    my $positions = $self-&gt;{positions};
    return if not defined $start;
    my $start_position = $positions-&gt;[$start];
    my $length         = $positions-&gt;[$end] - $start_position;
    return substr ${ $self-&gt;{input} }, $start_position, $length;
} ## end sub My_Error::input_slice

sub My_Error::show_last_expression {
    my ($self) = @_;
    my $last_expression =
        $self-&gt;input_slice( $self-&gt;last_completed_range('Expression') );
    return
        defined $last_expression
        ? "Last expression successfully parsed was: $last_expression"
        : 'No expression was successfully parsed';
} ## end sub My_Error::show_last_expression

sub My_Error::show_position {
    my ( $self, $position ) = @_;
    my $input = $self-&gt;{input};
    my $local_string = substr ${$input}, $position, 40;
    $local_string =~ s/\n/\\n/gxms;
    return $local_string;
} ## end sub My_Error::show_position

sub my_parser {
    my ( $grammar, $string ) = @_;
    my @positions = (0);
    my $recce = Marpa::R2::Recognizer-&gt;new( { grammar =&gt; $grammar } );

    # A quasi-object, for internal use only
    my $self = bless {
        grammar   =&gt; $grammar,
        input     =&gt; \$string,
        recce     =&gt; $recce,
        positions =&gt; \@positions
        },
        'My_Error';

    my $length = length $string;
    pos $string = $positions[-1];
    TOKEN: while ( pos $string &lt; $length ) {
        next TOKEN if $string =~ m/\G\s+/gcxms;    # skip whitespace
        if ( $recce-&gt;exhausted() ) {
            die $self-&gt;show_last_expression(), "\n",
                q{The parse became exhausted here: "},
                $self-&gt;show_position( $positions[-1] ), qq{"\n},
                ;
        } ## end if ( $recce-&gt;exhausted() )
        TOKEN_TYPE: for my $t (@terminals) {
            my ( $token_name, $regex, $long_name ) = @{$t};
            next TOKEN_TYPE if not $string =~ m/\G($regex)/gcxms;
            if ( defined $recce-&gt;read( $token_name, $1 ) ) {
                my $latest_earley_set_ID = $recce-&gt;latest_earley_set();
                $positions[$latest_earley_set_ID] = pos $string;
                next TOKEN;
            }
            die $self-&gt;show_last_expression(), "\n",
                'A problem occurred here: ',
                $self-&gt;show_position( $positions[-1] ), "\n",
                qq{Parser rejected token "$long_name"};
        } ## end TOKEN_TYPE: for my $t (@terminals)
        die 'A problem occurred here: ',
            $self-&gt;show_position( $positions[-1] ), "\n",
            q{No valid token was found};
    } ## end TOKEN: while ( pos $string &lt; $length )
    my $value_ref = $recce-&gt;value;
    if ( not defined $value_ref ) {
        die $self-&gt;show_last_expression(), "\n",
            "No parse was found, after reading the entire input\n";
    }
    return ${$value_ref};
} ## end sub my_parser

</tt></pre>
